[{"E:\\Project 350\\WillChange\\client\\src\\index.js":"1","E:\\Project 350\\WillChange\\client\\src\\reportWebVitals.js":"2","E:\\Project 350\\WillChange\\client\\src\\Containers\\App.js":"3","E:\\Project 350\\WillChange\\client\\src\\Components\\Layout\\Layout.js":"4","E:\\Project 350\\WillChange\\client\\src\\Components\\Authentication\\SignIn.js":"5","E:\\Project 350\\WillChange\\client\\src\\Components\\Navbar\\Navbar.js":"6","E:\\Project 350\\WillChange\\client\\src\\Components\\Authentication\\SignUp.js":"7","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Course.js":"8","E:\\Project 350\\WillChange\\client\\src\\Components\\Profile\\Profile.js":"9","E:\\Project 350\\WillChange\\client\\src\\Components\\LiveExam\\LiveExam.js":"10","E:\\Project 350\\WillChange\\client\\src\\Components\\Home\\Home.js":"11","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\PreviousExam.js":"12","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\Examine.js":"13","E:\\Project 350\\WillChange\\client\\src\\Components\\UpcomingExam\\UpcomingExam.js":"14","E:\\Project 350\\WillChange\\client\\src\\Components\\404\\Error404.js":"15","E:\\Project 350\\WillChange\\client\\src\\Components\\Exam\\Exam.js":"16","E:\\Project 350\\WillChange\\client\\src\\Components\\Generic\\Loader.js":"17","E:\\Project 350\\WillChange\\client\\src\\Components\\Generic\\Forms.js":"18","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Sidebar.js":"19","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\ExamInfo.js":"20","E:\\Project 350\\WillChange\\client\\src\\Components\\Timer\\Timer.js":"21","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\MarkSheet.js":"22","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Exams.js":"23","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Students.js":"24","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\ExamType.js":"25","E:\\Project 350\\WillChange\\client\\src\\Components\\LiveExam\\Result.js":"26","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\CreateExam.js":"27","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\Question.js":"28","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Teacher.js":"29","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Info.js":"30","E:\\Project 350\\WillChange\\client\\src\\Components\\Notifications\\Notification.js":"31"},{"size":608,"mtime":1613031877944,"results":"32","hashOfConfig":"33"},{"size":375,"mtime":1611586567836,"results":"34","hashOfConfig":"33"},{"size":4410,"mtime":1613037826680,"results":"35","hashOfConfig":"33"},{"size":2812,"mtime":1612912100934,"results":"36","hashOfConfig":"33"},{"size":4354,"mtime":1613031877936,"results":"37","hashOfConfig":"33"},{"size":9307,"mtime":1613040149009,"results":"38","hashOfConfig":"33"},{"size":10011,"mtime":1613031877936,"results":"39","hashOfConfig":"33"},{"size":1073,"mtime":1613031877936,"results":"40","hashOfConfig":"33"},{"size":8010,"mtime":1613035442015,"results":"41","hashOfConfig":"33"},{"size":16907,"mtime":1613035085735,"results":"42","hashOfConfig":"33"},{"size":19915,"mtime":1613035085734,"results":"43","hashOfConfig":"33"},{"size":13364,"mtime":1613031877944,"results":"44","hashOfConfig":"33"},{"size":12019,"mtime":1613031877944,"results":"45","hashOfConfig":"33"},{"size":3735,"mtime":1613031877944,"results":"46","hashOfConfig":"33"},{"size":747,"mtime":1613031877936,"results":"47","hashOfConfig":"33"},{"size":3254,"mtime":1612764301992,"results":"48","hashOfConfig":"33"},{"size":536,"mtime":1612900218747,"results":"49","hashOfConfig":"33"},{"size":7205,"mtime":1612988760058,"results":"50","hashOfConfig":"33"},{"size":4999,"mtime":1613034158448,"results":"51","hashOfConfig":"33"},{"size":13971,"mtime":1613031877944,"results":"52","hashOfConfig":"33"},{"size":2738,"mtime":1613035085736,"results":"53","hashOfConfig":"33"},{"size":3348,"mtime":1613031877944,"results":"54","hashOfConfig":"33"},{"size":4578,"mtime":1613035800601,"results":"55","hashOfConfig":"33"},{"size":2380,"mtime":1612979418700,"results":"56","hashOfConfig":"33"},{"size":2959,"mtime":1612911586010,"results":"57","hashOfConfig":"33"},{"size":1479,"mtime":1613031877936,"results":"58","hashOfConfig":"33"},{"size":5528,"mtime":1612946971804,"results":"59","hashOfConfig":"33"},{"size":15393,"mtime":1612946971804,"results":"60","hashOfConfig":"33"},{"size":954,"mtime":1613033966214,"results":"61","hashOfConfig":"33"},{"size":919,"mtime":1613034251733,"results":"62","hashOfConfig":"33"},{"size":4232,"mtime":1613040683047,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vw26ma",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"80","usedDeprecatedRules":"73"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"73"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"73"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"73"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"73"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"73"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"73"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"73"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"73"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"73"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"73"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"73"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"73"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"73"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"73"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"73"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"73"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"73"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Project 350\\WillChange\\client\\src\\index.js",[],"E:\\Project 350\\WillChange\\client\\src\\reportWebVitals.js",[],"E:\\Project 350\\WillChange\\client\\src\\Containers\\App.js",["147","148","149","150"],"E:\\Project 350\\WillChange\\client\\src\\Components\\Layout\\Layout.js",["151"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Modal,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nconst Layout = (props) => {\r\n  const [showModal, setShowModal] = useState(true);\r\n\r\n  const handleCloseModal = () => setShowModal(false);\r\n  const handleShowModal = () => setShowModal(true);\r\n\r\n  const SelectForm = () => {\r\n    let items = [];\r\n\r\n    if (props.universityInfo) {\r\n      props.universityInfo.forEach((element) => {\r\n        if (element.shortform === props.userInfo.varsity) {\r\n          element.departments.forEach((dept) => {\r\n            // console.log(dept);\r\n            items.push({\r\n              id: dept._id,\r\n              value: dept.shortform,\r\n            });\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    const menuItems = items.map((item, i) => {\r\n      // console.log(items);\r\n      return (\r\n        <MenuItem key={i} value={item.id}>\r\n          {item.value}\r\n        </MenuItem>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <FormControl variant=\"outlined\" fullWidth required>\r\n        <InputLabel>{props.label}</InputLabel>\r\n        <Select value={props.values} label={props.label}>\r\n          <MenuItem disabled>\r\n            <em>{props.label}</em>\r\n          </MenuItem>\r\n          {menuItems}\r\n        </Select>\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  const createCourseModal = (\r\n    <Modal\r\n      show={showModal}\r\n      onHide={handleCloseModal}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Create Course</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form>\r\n          <Row>\r\n            <Col>\r\n              <Form.Control placeholder=\"Course Name\" />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control placeholder=\"Code\" />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Control\r\n                readOnly\r\n                defaultValue={\r\n                  props.userInfo ? props.userInfo.varsity : \"Loading\"\r\n                }\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <SelectForm />\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleCloseModal}>\r\n          Close\r\n        </Button>\r\n        <Button variant=\"primary\">Understood</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Button onClick={handleShowModal}>Create Course </Button>;\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n",["152","153"],"E:\\Project 350\\WillChange\\client\\src\\Components\\Authentication\\SignIn.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Navbar\\Navbar.js",["154","155","156","157","158","159","160","161","162","163","164","165","166"],"E:\\Project 350\\WillChange\\client\\src\\Components\\Authentication\\SignUp.js",["167","168","169"],"import React, { useState } from \"react\";\r\nimport { Container, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Forms from \"../Generic/Forms\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./SignIn.css\";\r\n\r\nconst apiDomain = \"http://localhost:8080/\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    // margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    // width: \"15vw\",\r\n    // margin: theme.spacing(1),\r\n    paddingRight: theme.spacing(1),\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  shadows: [\"none\"],\r\n}));\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    role: \"\",\r\n    designation: \"\",\r\n    university: \"\",\r\n    department: \"\",\r\n    session: \"\",\r\n    regNo: \"\",\r\n    result: \"\",\r\n    error: \"\",\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: apiDomain + \"university/all\",\r\n  //   })\r\n  //     .then((response) => {\r\n  //       // console.log(\"All Universites..\");\r\n\r\n  //       // console.log(response.data);\r\n\r\n  //       const data = response.data;\r\n\r\n  //       if (data.status === \"OK\") {\r\n  //         setUniversities(data.result.data);\r\n  //       }\r\n  //     })\r\n  //     .catch((error) => console.log(error));\r\n  // }, []);\r\n\r\n  // console.log(\"API CALL DATA\", universities);\r\n  let history = useHistory();\r\n\r\n  const obj = {\r\n    role: values.role,\r\n    username: values.username,\r\n    email: values.email,\r\n    password: values.password,\r\n    repassword: values.confirmPassword,\r\n    firstName: values.firstName,\r\n    lastName: values.lastName,\r\n    department: values.department,\r\n    registrationNo: parseInt(values.regNo, 10),\r\n    session: values.session,\r\n    varsity: values.university,\r\n    designation: values.designation,\r\n  };\r\n\r\n  const body = JSON.stringify(obj);\r\n\r\n  const handleSignUp = (e) => {\r\n    // console.log('hello')\r\n    fetchData();\r\n    e.preventDefault();\r\n  };\r\n  const fetchData = async () => {\r\n    let endpoint;\r\n    if (values.role === \"Teacher\") endpoint = \"auth/create-teacher\";\r\n    else endpoint = \"auth/create-student\";\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: body,\r\n    };\r\n\r\n    const response = await fetch(`${apiDomain}${endpoint}`, requestOptions);\r\n\r\n    const data = await response.json();\r\n\r\n    console.log(\"API data\", data);\r\n\r\n    if (data.status === \"FAILED\")\r\n      setValues({ ...values, [\"error\"]: data.result });\r\n    else {\r\n      setValues({ ...values, [\"error\"]: \"\" });\r\n      // const userdata = {\r\n      //   token: data.result.jwt.token,\r\n      //   role: data.result.data.role.toLowerCase(),\r\n      //   id: data.result.data.id,\r\n      // };\r\n\r\n      localStorage.setItem(\"data\", JSON.stringify(data.result.data));\r\n\r\n      // console.log(userdata);\r\n\r\n      // localStorage.setItem(\"data\", JSON.stringify(userdata));\r\n      history.push(\"/\");\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n  // if (universities)\r\n  return (\r\n    <Container>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item className={classes.textField}>\r\n            <h2>Hello There!!</h2>\r\n            <p>Lets Sign Up to continue</p>\r\n          </Grid>\r\n        </Grid>\r\n        {values.error !== \"\" ? (\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            className={classes.root}\r\n          >\r\n            <Alert elevation={0} severity=\"error\">\r\n              {values.error}\r\n            </Alert>\r\n          </Grid>\r\n        ) : null}\r\n        <form onSubmit={handleSignUp}>\r\n          <Grid item xs={12}>\r\n            <Forms\r\n              id=\"role\"\r\n              type=\"select\"\r\n              label=\"Role\"\r\n              classes={classes}\r\n              values={values.role}\r\n              handleChange={handleChange}\r\n            />\r\n          </Grid>\r\n          <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"university\"\r\n                type=\"select\"\r\n                label=\"University\"\r\n                labelWidth={117}\r\n                classes={classes}\r\n                values={values.university}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                selectedUniversity={values.university}\r\n                id=\"department\"\r\n                type=\"select\"\r\n                label=\"Department\"\r\n                labelWidth={117}\r\n                classes={classes}\r\n                values={values.department}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          {values.role !== \"Teacher\" ? (\r\n            <Grid container justify=\"center\" alignItems=\"center\">\r\n              <Grid item xs={12} sm={6}>\r\n                <Forms\r\n                  id=\"session\"\r\n                  type=\"select\"\r\n                  label=\"Session\"\r\n                  labelWidth={117}\r\n                  classes={classes}\r\n                  values={values.session}\r\n                  handleChange={handleChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Forms\r\n                  id=\"regNo\"\r\n                  type=\"text\"\r\n                  label=\"Registration No\"\r\n                  labelWidth={120}\r\n                  classes={classes}\r\n                  values={values.regNo}\r\n                  handleChange={handleChange}\r\n                  required={true}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          ) : (\r\n            <Grid item xs={12}>\r\n              <Forms\r\n                id=\"designation\"\r\n                type=\"select\"\r\n                label=\"Designation\"\r\n                labelWidth={117}\r\n                classes={classes}\r\n                values={values.designation}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n          )}\r\n          <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"firstName\"\r\n                type=\"text\"\r\n                label=\"First Name\"\r\n                labelWidth={78}\r\n                classes={classes}\r\n                values={values.firstName}\r\n                handleChange={handleChange}\r\n                required={false}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"lastName\"\r\n                type=\"text\"\r\n                label=\"Last Name\"\r\n                labelWidth={78}\r\n                classes={classes}\r\n                values={values.lastName}\r\n                handleChange={handleChange}\r\n                required={false}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"username\"\r\n                type=\"text\"\r\n                label=\"Username\"\r\n                labelWidth={84}\r\n                classes={classes}\r\n                values={values.username}\r\n                handleChange={handleChange}\r\n                required={true}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"email\"\r\n                type=\"text\"\r\n                label=\"Email Address\"\r\n                labelWidth={110}\r\n                classes={classes}\r\n                values={values.email}\r\n                handleChange={handleChange}\r\n                required={true}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                labelWidth={80}\r\n                classes={classes}\r\n                values={values.password}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"confirmPassword\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                labelWidth={140}\r\n                classes={classes}\r\n                values={values.confirmPassword}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.textField}>\r\n            <Button variant=\"contained\" value=\"Sign Up\" type=\"submit\" fullWidth>\r\n              Sign Up\r\n            </Button>\r\n            <Grid item xs={12} className={classes.textField}>\r\n              <Typography>\r\n                Already have an account?{\" \"}\r\n                <Link to=\"/signIn\">\r\n                  <b>Sign In</b>\r\n                </Link>{\" \"}\r\n                instead\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n  // else return <h1>Loading</h1>;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Course.js",["170","171"],"import axios from \"axios\";\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport \"./Course.scss\";\r\nimport LinearIndeterminate from \"../Generic/Loader\";\r\n\r\nlet userdata = localStorage.getItem(\"data\");\r\nuserdata = JSON.parse(userdata);\r\n\r\nexport default function Course(props) {\r\n  let { id } = useParams();\r\n\r\n  const [courseData, setCourseData] = useState(null);\r\n\r\n  console.log(userdata);\r\n\r\n  useEffect(() => {\r\n    if (userdata)\r\n      axios\r\n        .get(`${userdata.role}/course/${id}`)\r\n        .then((response) => {\r\n          const data = response.data;\r\n          console.log(data);\r\n          if (data.status === \"OK\") setCourseData(data.result.data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n  }, []);\r\n\r\n  if (courseData)\r\n    return (\r\n      <div className=\"course\">\r\n        <Sidebar courseData={courseData} userInfo={userdata} />\r\n      </div>\r\n    );\r\n  else return <LinearIndeterminate></LinearIndeterminate>;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Profile\\Profile.js",["172","173","174"],"import React, { useState, useEffect } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Forms from \"../Generic/Forms\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport \"./Profile.scss\";\r\nimport { LinearProgress } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    // margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    // width: \"15vw\",\r\n    // margin: theme.spacing(1),\r\n    paddingRight: theme.spacing(1),\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  shadows: [\"none\"],\r\n}));\r\n\r\nexport default function Profile(props) {\r\n  let userdata;\r\n\r\n  useEffect(() => {\r\n    userdata = localStorage.getItem(\"data\");\r\n    userdata = JSON.parse(userdata);\r\n    // if (userdata) userdata = userdata;\r\n  }, []);\r\n\r\n  console.log(props.userInfo);\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState({\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    error: \"\",\r\n  });\r\n  console.log(values.firstName);\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  if (props.userInfo)\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Row className=\"userName\">\r\n              <Col>\r\n                <h3>{props.userInfo.firstName + ' ' + props.userInfo.lastName}</h3>\r\n                <p>{props.userInfo.role}</p>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"about\">\r\n              <Col>\r\n                <h4>About</h4>\r\n                <hr />\r\n                <form>\r\n                  <Row>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"firstName\"\r\n                        type=\"textField\"\r\n                        label=\"First Name\"\r\n                        labelWidth={78}\r\n                        classes={classes}\r\n                        handleChange={handleChange}\r\n                        required={false}\r\n                        defaultValue={props.userInfo.firstName}\r\n                      />\r\n                    </Col>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"lastName\"\r\n                        type=\"textField\"\r\n                        label=\"Last Name\"\r\n                        labelWidth={78}\r\n                        classes={classes}\r\n                        defaultValue={props.userInfo.lastName}\r\n                        handleChange={handleChange}\r\n                        required={false}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"regNo\"\r\n                        type=\"textField\"\r\n                        label=\"Registration No\"\r\n                        labelWidth={120}\r\n                        classes={classes}\r\n                        defaultValue={props.userInfo.registrationNo}\r\n                        handleChange={handleChange}\r\n                        disabled={true}\r\n                      />\r\n                    </Col>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"session\"\r\n                        type=\"textField\"\r\n                        label=\"Session\"\r\n                        labelWidth={117}\r\n                        classes={classes}\r\n                        handleChange={handleChange}\r\n                        defaultValue={props.userInfo.session}\r\n                        disabled={true}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"university\"\r\n                        type=\"textField\"\r\n                        label=\"University\"\r\n                        labelWidth={117}\r\n                        classes={classes}\r\n                        handleChange={handleChange}\r\n                        defaultValue={props.userInfo.varsity}\r\n                        disabled={true}\r\n                      />\r\n                    </Col>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"department\"\r\n                        type=\"textField\"\r\n                        label=\"Department\"\r\n                        labelWidth={120}\r\n                        classes={classes}\r\n                        defaultValue={props.userInfo.department}\r\n                        handleChange={handleChange}\r\n                        disabled={true}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"designation\"\r\n                        type=\"textField\"\r\n                        label=\"Designation\"\r\n                        labelWidth={117}\r\n                        classes={classes}\r\n                        handleChange={handleChange}\r\n                        defaultValue={\r\n                          props.userInfo.role === \"Student\"\r\n                            ? props.userInfo.role\r\n                            : props.userInfo.designation\r\n                        }\r\n                        disabled={true}\r\n                      />\r\n                    </Col>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"email\"\r\n                        type=\"textField\"\r\n                        label=\"Email Address\"\r\n                        labelWidth={120}\r\n                        classes={classes}\r\n                        defaultValue={props.userInfo.email}\r\n                        handleChange={handleChange}\r\n                        disabled={true}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        labelWidth={80}\r\n                        classes={classes}\r\n                        values={values.password}\r\n                        handleChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                    <Col>\r\n                      <Forms\r\n                        id=\"confirmPassword\"\r\n                        label=\"Confirm Password\"\r\n                        type=\"password\"\r\n                        labelWidth={140}\r\n                        classes={classes}\r\n                        values={values.confirmPassword}\r\n                        handleChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"justify-content-center\">\r\n                    <Col xs=\"auto\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        type=\"submit\"\r\n                        style={{\r\n                          marginTop: \"15%\",\r\n                          marginBottom: \"10%\",\r\n                          backgroundColor: \"#3F7CAC\",\r\n                        }}\r\n                      >\r\n                        Save Changes\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </form>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  else return <LinearProgress />;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\LiveExam\\LiveExam.js",["175","176","177","178","179","180"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LinearIndeterminate from \"../Generic/Loader\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { LinearProgress, makeStyles, Snackbar } from \"@material-ui/core\";\r\n// import Alert from \"@material-ui/lab/Alert\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport Result from \"./Result\";\r\nimport \"./LiveExam.scss\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function LiveExam(props) {\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [index, setIndex] = React.useState(0);\r\n\r\n  const [examinfo, setExamInfo] = useState(null);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [seconds, setSeconds] = useState(2);\r\n\r\n  const [windowChange, setwindowChange] = useState(0);\r\n\r\n  const studentAnswers = [];\r\n\r\n  const [result, setResult] = useState(0);\r\n\r\n  const intervalRef = useRef();\r\n  const [disableNextButton, setdisableNextButton] = useState(false);\r\n\r\n  const [openFeedback, setOpenFeedback] = useState(false);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n\r\n  const [answer, setAnswer] = useState(\"\");\r\n\r\n  const [showResult, setShowResult] = useState(false);\r\n\r\n  const handleAnswer = (event) => {\r\n    setAnswer(event.target.value);\r\n  };\r\n\r\n  const handleFeedbackOpen = () => {\r\n    setOpenFeedback(true);\r\n  };\r\n\r\n  const handleFeedbackClose = () => {\r\n    setOpenFeedback(false);\r\n  };\r\n\r\n  const handleFeedback = (event) => {\r\n    setFeedback(event.target.value);\r\n  };\r\n  // console.log(feedback);\r\n  // const [totalExamTime, setTotalExamTime] = useState(0);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds((seconds) => seconds - 1);\r\n    }, 1000);\r\n    intervalRef.current = interval;\r\n\r\n    axios\r\n      .get(`student/exam/${id}`)\r\n      .then((response) => {\r\n        setExamInfo(response.data.result.data);\r\n        console.log(\"examinfo\", response.data.result.data);\r\n\r\n        if (response.data.result.data.mcqQuestions) {\r\n          setSeconds(\r\n            response.data.result.data.mcqQuestions[index].mcqQuestionId.time\r\n          );\r\n        } else\r\n          setSeconds(\r\n            response.data.result.data.cqQuestions[index].mcqQuestionId.time\r\n          );\r\n\r\n        let examTimeEndAfter = 0;\r\n\r\n        examTimeEndAfter =\r\n          Math.round(\r\n            new Date(response.data.result.data.date).getTime() / 1000\r\n          ) +\r\n          response.data.result.data.totalTime -\r\n          Math.round(Date.now() / 1000);\r\n\r\n        console.log(examTimeEndAfter);\r\n\r\n        if (examTimeEndAfter > 0) examTimeEndAfter = examTimeEndAfter * 1000;\r\n        else examTimeEndAfter = 0;\r\n\r\n        console.log(examTimeEndAfter);\r\n\r\n        const timeout = setTimeout(() => {\r\n          clearInterval(intervalRef.current);\r\n          setdisableNextButton(true);\r\n          submitAnswers();\r\n          // alert(\"Exam Timeout!\");\r\n        }, examTimeEndAfter);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  console.log(\"examinfo\", examinfo);\r\n\r\n  const submitAnswers = () => {\r\n    let url;\r\n    let data;\r\n\r\n    setShowResult(true);\r\n\r\n    console.log(examinfo);\r\n\r\n    if (examinfo) {\r\n      if (examinfo.mcqQuestions) {\r\n        console.log(\"studentAnswers\", studentAnswers);\r\n        url = `student/exam/mcq/submit/${id}`;\r\n        data = JSON.stringify({\r\n          studentAnswers: studentAnswers,\r\n          feedback: feedback,\r\n          windowChanged: windowChange,\r\n        });\r\n      } else {\r\n        console.log(\"studentAnswers\", studentAnswers);\r\n        url = `student/exam/cq/submit/${id}`;\r\n\r\n        data = JSON.stringify({\r\n          studentAnswers: studentAnswers,\r\n          feedback: feedback,\r\n          windowChanged: windowChange,\r\n        });\r\n      }\r\n\r\n      // setResult(\"Loading\");\r\n      axios({\r\n        method: \"POST\",\r\n        url: url,\r\n\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        data: data,\r\n      })\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          if (response.data.status === \"OK\") {\r\n            setResult(response.data.result.data);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const nextQuestion = (event) => {\r\n    // console.log(\r\n    //   \"Ans : \",\r\n    //   index,\r\n    //   answer,\r\n    //   examinfo.cqQuestions[index].cqQuestionId._id\r\n    // );\r\n\r\n    \r\n\r\n    if (examinfo.mcqQuestions)\r\n      studentAnswers.push({\r\n        mcqQuestion: examinfo.mcqQuestions[index].mcqQuestionId._id,\r\n        studentAnswer: value,\r\n      });\r\n    else {\r\n      studentAnswers.push({\r\n        cqQuestion: examinfo.cqQuestions[index].cqQuestionId._id,\r\n        studentAnswer: answer,\r\n      });\r\n    }\r\n    setValue('');\r\n    setAnswer('');\r\n    if (examinfo.mcqQuestions) {\r\n      if (index + 1 < examinfo.mcqQuestions.length) {\r\n        console.log(\"Index\", index + 1, examinfo.mcqQuestions.length);\r\n        setSeconds(\r\n          (seconds) => examinfo.mcqQuestions[index + 1].mcqQuestionId.time\r\n        );\r\n        setIndex(index + 1);\r\n      } else {\r\n        clearInterval(intervalRef.current);\r\n        submitAnswers();\r\n      }\r\n    } else if (examinfo.cqQuestions) {\r\n      if (index + 1 < examinfo.cqQuestions.length) {\r\n        console.log(\"Index\", index + 1, examinfo.cqQuestions.length);\r\n        setSeconds(\r\n          (seconds) => examinfo.cqQuestions[index + 1].cqQuestionId.time\r\n        );\r\n        setIndex(index + 1);\r\n      } else {\r\n        submitAnswers();\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    }\r\n  };\r\n\r\n  document.addEventListener(\"visibilitychange\", function () {\r\n    // document.title = document.hidden ? \"I'm am cheating\" : \"I'm here\";\r\n    // var mp3_url =\r\n    //   \"https://media.geeksforgeeks.org/wp-content/uploads/20190531135120/beep.mp3\";\r\n\r\n    // new Audio(mp3_url).play();\r\n    setwindowChange((windowChange) => windowChange + 1);\r\n    handleClick();\r\n  });\r\n\r\n  if (examinfo) {\r\n    let des;\r\n    if (examinfo.cqQuestions) {\r\n      des = examinfo.cqQuestions[index].cqQuestionId.description ? (\r\n        <Row className=\"exam__description\">\r\n          <Col>\r\n            <h5>{examinfo.cqQuestions[index].cqQuestionId.description}</h5>\r\n          </Col>\r\n        </Row>\r\n      ) : null;\r\n    }\r\n\r\n    if (examinfo.mcqQuestions) {\r\n      des = examinfo.mcqQuestions[index].mcqQuestionId.description ? (\r\n        <Row className=\"exam__description\">\r\n          <Col>\r\n            <h5>{examinfo.mcqQuestions[index].mcqQuestionId.description}</h5>\r\n          </Col>\r\n        </Row>\r\n      ) : null;\r\n    }\r\n\r\n    if (seconds < 0) nextQuestion();\r\n    if (result || showResult) {\r\n      return (\r\n        <Result\r\n          result={result}\r\n          examType={examinfo.mcqQuestions ? \"mcq\" : \"cq\"}\r\n        />\r\n      );\r\n    } else\r\n      return (\r\n        <div>\r\n          <Snackbar\r\n            open={open}\r\n            onClose={handleClose}\r\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\r\n            // anchorPosition ={ { right: 10, top: 100 }}\r\n          >\r\n            <Alert onClose={handleClose} severity=\"warning\">\r\n              Please Don't Leave Tab During Exam!\r\n            </Alert>\r\n          </Snackbar>\r\n          <Container fluid className=\"root noselect\">\r\n            <Row className=\"justify-content-center\">\r\n              <Col xs={7} className=\"exam\">\r\n                <Row className=\"exam__title justify-content-center\">\r\n                  <Col xs=\"auto\">\r\n                    <h4>{examinfo.name}</h4>\r\n                  </Col>\r\n                </Row>\r\n\r\n                {des}\r\n\r\n                <Row className=\"d-flex justify-content-between exam__question\">\r\n                  <Col>\r\n                    <h5>\r\n                      {examinfo.mcqQuestions\r\n                        ? examinfo.mcqQuestions[index].mcqQuestionId\r\n                            .mainQuestion\r\n                        : examinfo.cqQuestions[index].cqQuestionId.mainQuestion}\r\n                    </h5>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                    <p style={{ fontSize: \"1vw\" }}>\r\n                      Marks:{\" \"}\r\n                      {examinfo.mcqQuestions\r\n                        ? examinfo.mcqQuestions[index].mcqQuestionId.marks\r\n                        : examinfo.cqQuestions[index].cqQuestionId.marks}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"exam__options\">\r\n                  <Col xs={12}>\r\n                    {examinfo.mcqQuestions ? (\r\n                      <FormControl component=\"fieldset\" fullWidth>\r\n                        <RadioGroup\r\n                          aria-label=\"ans\"\r\n                          name=\"ans\"\r\n                          value={value}\r\n                          onChange={handleChange}\r\n                        >\r\n                          <Row className=\"option\" xs={12}>\r\n                            <Col xs={12}>\r\n                              <FormControlLabel\r\n                                value={\r\n                                  examinfo.mcqQuestions[index].mcqQuestionId\r\n                                    .options[0].option\r\n                                }\r\n                                control={<Radio color=\"primary\" />}\r\n                                label={\r\n                                  examinfo.mcqQuestions[index].mcqQuestionId\r\n                                    .options[0].option\r\n                                }\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row className=\"option\">\r\n                            <Col xs={12}>\r\n                              <FormControlLabel\r\n                                value={\r\n                                  examinfo.mcqQuestions[index].mcqQuestionId\r\n                                    .options[1].option\r\n                                }\r\n                                control={<Radio color=\"primary\" />}\r\n                                label={\r\n                                  examinfo.mcqQuestions[index].mcqQuestionId\r\n                                    .options[1].option\r\n                                }\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row className=\"option\">\r\n                            <Col xs={12}>\r\n                              <FormControlLabel\r\n                                value={\r\n                                  examinfo.mcqQuestions[index].mcqQuestionId\r\n                                    .options[2].option\r\n                                }\r\n                                control={<Radio color=\"primary\" />}\r\n                                label={\r\n                                  examinfo.mcqQuestions[index].mcqQuestionId\r\n                                    .options[2].option\r\n                                }\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row className=\"option\">\r\n                            <Col xs={12}>\r\n                              <FormControlLabel\r\n                                value={\r\n                                  examinfo.mcqQuestions[index].mcqQuestionId\r\n                                    .options[3].option\r\n                                }\r\n                                control={<Radio color=\"primary\" />}\r\n                                label={\r\n                                  examinfo.mcqQuestions[index].mcqQuestionId\r\n                                    .options[3].option\r\n                                }\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    ) : (\r\n                      <TextField\r\n                        id=\"ans\"\r\n                        label=\"Answer\"\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        multiline\r\n                        rows={5}\r\n                        variant=\"standard\"\r\n                        value={answer}\r\n                        onChange={handleAnswer}\r\n                      />\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"feedback\">\r\n                  <Col>\r\n                    <p>\r\n                      Something wrong with this question?\r\n                      <a onClick={handleFeedbackOpen}>\r\n                        <b> Give Feedback</b>\r\n                      </a>\r\n                    </p>\r\n                    <Dialog\r\n                      open={openFeedback}\r\n                      onClose={handleClose}\r\n                      aria-labelledby=\"form-dialog-title\"\r\n                    >\r\n                      <DialogContent>\r\n                        <DialogTitle>\r\n                          Let your teacher know what is wrong\r\n                        </DialogTitle>\r\n                        <TextField\r\n                          autoFocus\r\n                          margin=\"dense\"\r\n                          id=\"feedback\"\r\n                          label=\"Feedback\"\r\n                          fullWidth\r\n                          multiline\r\n                          rows={3}\r\n                          variant=\"outlined\"\r\n                          value={feedback}\r\n                          onChange={handleFeedback}\r\n                        />\r\n                      </DialogContent>\r\n                      <DialogActions>\r\n                        <Button onClick={handleFeedbackClose} color=\"default\">\r\n                          Cancel\r\n                        </Button>\r\n                        <Button onClick={handleFeedbackClose} color=\"primary\">\r\n                          Send\r\n                        </Button>\r\n                      </DialogActions>\r\n                    </Dialog>\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"exam__buttons d-flex justify-content-between\">\r\n                  <Col>\r\n                    <span className=\"timer\">\r\n                      <b>\r\n                        {/* <div id=\"countdown\"></div> */}\r\n                        {seconds <= 0 ? \"Timeout!\" : seconds}\r\n                      </b>\r\n                    </span>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={nextQuestion}\r\n                      disableElevation\r\n                      disabled={disableNextButton}\r\n                      style={{ backgroundColor: \"#3F7CAC\" }}\r\n                      // disabled={\r\n                      //   index + 1 == examinfo.mcqQuestions.length && true\r\n                      // }\r\n                    >\r\n                      Next\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      );\r\n  } else return <LinearIndeterminate />;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Home\\Home.js",["181","182","183","184","185","186","187","188","189","190","191","192"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Snackbar, TextField } from \"@material-ui/core\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport SubjectIcon from \"@material-ui/icons/Subject\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AssignmentTurnedInOutlinedIcon from \"@material-ui/icons/AssignmentTurnedInOutlined\";\r\nimport Timer from \"../Timer/Timer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LinearIndeterminate from \"../Generic/Loader\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Forms from \"../Generic/Forms\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FaRegCheckCircle } from \"react-icons/fa\";\r\nimport \"./Home.scss\";\r\nimport axios from \"axios\";\r\n// import Alert from \"@material-ui/lab/Alert\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    // margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    // width: \"15vw\",\r\n    // margin: theme.spacing(1),\r\n    paddingRight: theme.spacing(1),\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  shadows: [\"none\"],\r\n}));\r\n\r\nexport default function Home(props) {\r\n  let userdata;\r\n  userdata = localStorage.getItem(\"data\");\r\n  userdata = JSON.parse(userdata);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  let history = useHistory();\r\n  const [opensnack, setopensnack] = React.useState(false);\r\n\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState({\r\n    courseName: \"\",\r\n    courseCode: \"\",\r\n    university: \"\",\r\n    department: \"\",\r\n  });\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n  var months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  var days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  let courseUI;\r\n  let upcomingExams = [];\r\n  let upcomingExamsUI;\r\n  let mostUpcomingExamUI;\r\n  let previousExams = [];\r\n  let previousExamsUI;\r\n  let ongoingExams = [];\r\n\r\n  const [timerDeadline, setTimerDeadLine] = useState(Date.now());\r\n\r\n  const [snackbarMsg, setsnackbarMsg] = useState(null);\r\n\r\n  const handleSnackClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setopensnack(false);\r\n  };\r\n\r\n  const createCourse = () => {\r\n    // const dept = document.getElementById(\"department\").innerHTML);\r\n\r\n    if (\r\n      values.university &&\r\n      values.department &&\r\n      values.courseCode &&\r\n      values.courseName\r\n    ) {\r\n      axios({\r\n        method: \"POST\",\r\n        url: `teacher/course/create`,\r\n\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n\r\n        data: JSON.stringify({\r\n          name: values.courseName,\r\n          code: values.courseCode,\r\n          department: {\r\n            name: `${document.getElementById(\"department\").innerHTML}`,\r\n            id: values.department,\r\n          },\r\n          varsity: {\r\n            name: `${document.getElementById(\"university\").innerHTML}`,\r\n            id: values.department,\r\n          },\r\n        }),\r\n      })\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          if (response.data.status === \"OK\") {\r\n            handleClose();\r\n            setsnackbarMsg(\"Course Created Successfully\");\r\n            setopensnack(true);\r\n\r\n            setTimeout(function () {\r\n              history.push(\"/\");\r\n              window.location.reload();\r\n            }, 1000);\r\n          } else {\r\n            setsnackbarMsg(\"Course Creation Failed!\");\r\n            setopensnack(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setsnackbarMsg(\"Course Creation Failed!\");\r\n          setopensnack(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  if (userdata) {\r\n    if (userdata.courses.length > 0) {\r\n      courseUI = userdata.courses.map((course, k) => {\r\n        // console.log(items);\r\n        return (\r\n          <Grid key={k} container alignitems=\"flex-start\" className=\"sideExams\">\r\n            <Grid item>\r\n              <SubjectIcon style={{ fontSize: \"27px\" }} />\r\n            </Grid>\r\n            <Grid item xs className=\"examName\">\r\n              <Link\r\n                to={`/course/${course.course._id}/#exams`}\r\n                style={{ textDecoration: \"none\", color: \"black\" }}\r\n              >\r\n                <span>{course.course.name}</span>\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      });\r\n    }\r\n\r\n    userdata.courses.forEach((course, i) => {\r\n      const date = new Date();\r\n\r\n      if (course.course.cqExams) {\r\n        course.course.cqExams.forEach((exam, j) => {\r\n          console.log(course.course);\r\n          if (\r\n            new Date(exam.examId.date).getTime() + exam.examId.totalTime * 60 <\r\n            date.getTime()\r\n          )\r\n            previousExams.push({\r\n              _id: exam.examId._id,\r\n              name: exam.examId.name,\r\n              courseName: course.course.name,\r\n              date: new Date(exam.examId.date),\r\n              totalMarks: exam.examId.totalMarks,\r\n              totalTime: exam.examId.totalTime,\r\n              createdBy:\r\n                course.course.createdBy.firstName +\r\n                course.course.createdBy.lastName +\r\n                course.course.createdBy.username,\r\n            });\r\n          else {\r\n            upcomingExams.push({\r\n              _id: exam.examId._id,\r\n              name: exam.examId.name,\r\n              courseName: course.course.name,\r\n              date: new Date(exam.examId.date),\r\n              totalMarks: exam.examId.totalMarks,\r\n              totalTime: exam.examId.totalTime,\r\n              createdBy:\r\n                course.course.createdBy.firstName +\r\n                \" \" +\r\n                course.course.createdBy.lastName +\r\n                \" \" +\r\n                course.course.createdBy.username,\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      if (course.course.mcqExams) {\r\n        course.course.mcqExams.forEach((exam, j) => {\r\n          if (\r\n            new Date(exam.examId.date).getTime() + exam.examId.totalTime * 60 <\r\n            date.getTime()\r\n          )\r\n            previousExams.push({\r\n              _id: exam.examId._id,\r\n              name: exam.examId.name,\r\n              courseName: course.course.name,\r\n              date: new Date(exam.examId.date),\r\n              totalMarks: exam.examId.totalMarks,\r\n              totalTime: exam.examId.totalTime,\r\n              createdBy:\r\n                course.course.createdBy.firstName +\r\n                \" \" +\r\n                course.course.createdBy.lastName +\r\n                \" \" +\r\n                course.course.createdBy.username,\r\n            });\r\n          else {\r\n            upcomingExams.push({\r\n              _id: exam.examId._id,\r\n              name: exam.examId.name,\r\n              courseName: course.course.name,\r\n              date: new Date(exam.examId.date),\r\n              totalMarks: exam.examId.totalMarks,\r\n              totalTime: exam.examId.totalTime,\r\n              createdBy:\r\n                course.course.createdBy.firstName +\r\n                \" \" +\r\n                course.course.createdBy.lastName +\r\n                \" \" +\r\n                course.course.createdBy.username,\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    upcomingExams.sort(function (a, b) {\r\n      return a.date.getTime() - b.date.getTime();\r\n    });\r\n    previousExams.sort(function (a, b) {\r\n      return b.date.getTime() - a.date.getTime();\r\n    });\r\n\r\n    ongoingExams.sort(function (a, b) {\r\n      return a.date.getTime() - b.date.getTime();\r\n    });\r\n\r\n    const reloadHandler = (event) => {\r\n      event.preventDefault();\r\n    };\r\n    let examSchedule;\r\n    if (upcomingExams.length > 0) {\r\n      examSchedule = `${\r\n        new Date(upcomingExams[0].date).getHours() < 10\r\n          ? \"0\" + new Date(upcomingExams[0].date).getHours()\r\n          : new Date(upcomingExams[0].date).getHours()\r\n      }:${\r\n        new Date(upcomingExams[0].date).getMinutes() < 10\r\n          ? \"0\" + new Date(upcomingExams[0].date).getMinutes()\r\n          : new Date(upcomingExams[0].date).getMinutes()\r\n      }\r\n      ${new Date(upcomingExams[0].date).getDate()}th ${\r\n        months[new Date(upcomingExams[0].date).getMonth()]\r\n      },\r\n      ${new Date(upcomingExams[0].date).getFullYear()}`;\r\n\r\n      mostUpcomingExamUI = (\r\n        <Container fluid key={upcomingExams[0]._id} alignitems=\"flex-start\">\r\n          <Row className=\"examHeading d-flex justify-content-between\">\r\n            <Col xs=\"auto\">\r\n              <span className=\"examName\">\r\n                <b>{upcomingExams[0].name}</b>\r\n              </span>\r\n            </Col>\r\n            <Col xs=\"auto\" className=\"examSchedule\">\r\n              <p>{examSchedule}</p>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"infos\">\r\n            <Col>\r\n              <span>Course: {upcomingExams[0].courseName}</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"infos\">\r\n            <Col>\r\n              <p>Host: {upcomingExams[0].createdBy}</p>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"infos\">\r\n            <Col>\r\n              <span>Total Marks: {upcomingExams[0].totalMarks}</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"infos\">\r\n            <Col>\r\n              <span>Total Time: {upcomingExams[0].totalTime}</span>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      );\r\n      upcomingExamsUI = upcomingExams.map((ex, i) => {\r\n        if (i != 0)\r\n          return (\r\n            <>\r\n              <Container\r\n                fluid\r\n                key={ex._id}\r\n                alignitems=\"flex-start\"\r\n                className=\"upcoming__next\"\r\n              >\r\n                <Link\r\n                  to={`/upcoming-exam/${ex._id}`}\r\n                  style={{ textDecoration: \"none\", color: \"black\" }}\r\n                >\r\n                  <Row className=\"examHeading d-flex justify-content-between\">\r\n                    <Col xs=\"auto\">\r\n                      <span className=\"examName\">\r\n                        <b>{ex.name}</b>\r\n                      </span>\r\n                    </Col>\r\n                    <Col xs=\"auto\" className=\"examSchedule\">\r\n                      <p>\r\n                        {new Date(ex.date).getHours() < 10\r\n                          ? \"0\" + new Date(ex.date).getHours()\r\n                          : new Date(ex.date).getHours()}\r\n                        :\r\n                        {new Date(ex.date).getMinutes() < 10\r\n                          ? \"0\" + new Date(ex.date).getMinutes()\r\n                          : new Date(ex.date).getMinutes()}{\" \"}\r\n                        {new Date(ex.date).getDate()}\r\n                        th {months[new Date(ex.date).getMonth()]},\r\n                        {new Date(ex.date).getFullYear()}\r\n                      </p>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col style={{ paddingBottom: \"10px\" }}>{ex.courseName}</Col>\r\n                  </Row>\r\n                </Link>\r\n              </Container>\r\n            </>\r\n          );\r\n      });\r\n    }\r\n\r\n    if (previousExams)\r\n      previousExamsUI = previousExams.map((ex, i) => {\r\n        return (\r\n          <Grid\r\n            key={ex._id}\r\n            container\r\n            alignitems=\"flex-start\"\r\n            className=\"sideExams\"\r\n          >\r\n            <Grid item>\r\n              <AssignmentTurnedInOutlinedIcon style={{ fontSize: \"27px\" }} />\r\n            </Grid>\r\n            <Grid item xs className=\"examName\">\r\n              <Link\r\n                to={`/previous-exam/${ex._id}`}\r\n                style={{ textDecoration: \"none\", color: \"black\" }}\r\n              >\r\n                <span>{ex.name}</span>\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <p>\r\n                {new Date(ex.date).getHours() < 10\r\n                  ? \"0\" + new Date(ex.date).getHours()\r\n                  : new Date(ex.date).getHours()}\r\n                :\r\n                {new Date(ex.date).getMinutes() < 10\r\n                  ? \"0\" + new Date(ex.date).getMinutes()\r\n                  : new Date(ex.date).getMinutes()}{\" \"}\r\n                {new Date(ex.date).getDate()}\r\n                th {months[new Date(ex.date).getMonth()]},\r\n                {new Date(ex.date).getFullYear()}\r\n              </p>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      });\r\n  }\r\n  if (userdata) {\r\n    const role = userdata.role;\r\n    // console.log(role)\r\n    return (\r\n      // <Container fluid style={{ marginTop: \"10px\", height: \"100vh\" }}>\r\n      <>\r\n        <Snackbar\r\n          open={opensnack}\r\n          onClose={handleSnackClose}\r\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\r\n          // anchorPosition ={ { right: 10, top: 100 }}\r\n        >\r\n          <Alert onClose={handleSnackClose} severity=\"success\">\r\n            {setsnackbarMsg}\r\n          </Alert>\r\n        </Snackbar>\r\n        <Grid container justify=\"space-between\" alignItems=\"flex-start\">\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={2}\r\n            className=\"leftside\"\r\n            style={{ float: \"left\", paddingTop: \"10px\", paddingLeft: \"10px\" }}\r\n          >\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <h4 className=\"leftHeading\">My Courses</h4>\r\n              </Grid>\r\n              {role === \"Teacher\" ? (\r\n                <Grid item>\r\n                  <AddIcon\r\n                    onClick={handleClickOpen}\r\n                    style={{\r\n                      fontSize: \"30px\",\r\n                      color: \"#234058\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  />\r\n                  <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                  >\r\n                    <DialogTitle id=\"form-dialog-title\">\r\n                      Create New Course\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                      <Forms\r\n                        id=\"university\"\r\n                        type=\"select\"\r\n                        label=\"University\"\r\n                        labelWidth={117}\r\n                        classes={classes}\r\n                        values={values.university}\r\n                        handleChange={handleChange}\r\n                      />\r\n                      <Forms\r\n                        selectedUniversity={values.university}\r\n                        id=\"department\"\r\n                        type=\"select\"\r\n                        label=\"Department\"\r\n                        labelWidth={117}\r\n                        classes={classes}\r\n                        values={values.department}\r\n                        handleChange={handleChange}\r\n                      />\r\n                      <Forms\r\n                        id=\"courseName\"\r\n                        type=\"text\"\r\n                        label=\"Course Name\"\r\n                        labelWidth={78}\r\n                        classes={classes}\r\n                        values={values.firstName}\r\n                        handleChange={handleChange}\r\n                        required={false}\r\n                      />\r\n                      <Forms\r\n                        id=\"courseCode\"\r\n                        type=\"text\"\r\n                        label=\"Course Code\"\r\n                        labelWidth={78}\r\n                        classes={classes}\r\n                        values={values.firstName}\r\n                        handleChange={handleChange}\r\n                        required={false}\r\n                      />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                      <Button onClick={handleClose} color=\"default\">\r\n                        Cancel\r\n                      </Button>\r\n                      <Button onClick={createCourse} color=\"primary\">\r\n                        Create\r\n                      </Button>\r\n                    </DialogActions>\r\n                  </Dialog>\r\n                </Grid>\r\n              ) : null}\r\n            </Grid>\r\n            <Grid item>\r\n              <hr />\r\n            </Grid>\r\n            {courseUI}\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={6}\r\n            className=\"upcoming\"\r\n            style={{ padding: \"10px\" }}\r\n          >\r\n            <Grid container justify=\"space-between\" alignitems=\"flex-start\">\r\n              <Grid item>\r\n                <h4 className=\"centerHeading\">Upcoming Exams</h4>\r\n              </Grid>\r\n              <Grid item>\r\n                <InfoOutlinedIcon\r\n                  style={{ fontSize: \"35px\", color: \"#234058\" }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <hr />\r\n            </Grid>\r\n            <div className=\"upcoming__first\">\r\n              {mostUpcomingExamUI}\r\n\r\n              {upcomingExams.length > 0 ? (\r\n                <Timer\r\n                  examID={upcomingExams[0]._id}\r\n                  deadline={upcomingExams[0].date}\r\n                />\r\n              ) : (\r\n                <>\r\n                  <Grid container justify=\"center\">\r\n                    <Grid item xs=\"auto\" style={{ marginTop: \"10%\" }}>\r\n                      <FaRegCheckCircle\r\n                        style={{ fontSize: \"50px\", color: \"#234058\" }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid container justify=\"center\" style={{ marginTop: \"2%\" }}>\r\n                    <Grid item xs=\"auto\">\r\n                      <h3 style={{ textAlign: \"center\" }}>\r\n                        You're All Caught Up!\r\n                      </h3>\r\n                      <p style={{ textAlign: \"center\", fontSize: \"20px\" }}>\r\n                        No Upcoming Exams\r\n                      </p>\r\n                    </Grid>\r\n                  </Grid>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div>{upcomingExamsUI}</div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={3}\r\n            className=\"rightside\"\r\n            style={{ padding: \"10px\" }}\r\n          >\r\n            <Grid container justify=\"space-between\" alignitems=\"flex-start\">\r\n              <Grid item>\r\n                <h4 className=\"rightHeading\">Previous Exams</h4>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <hr />\r\n            </Grid>\r\n            {previousExamsUI}\r\n          </Grid>\r\n        </Grid>\r\n        {/* // </Container> */}\r\n      </>\r\n    );\r\n  } else return <LinearIndeterminate />;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\PreviousExam.js",["193","194","195","196","197","198","199","200","201","202","203"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Modal,\r\n  Form,\r\n  Spinner,\r\n  Card,\r\n  Alert,\r\n  Jumbotron,\r\n  Table,\r\n  Tab,\r\n  TabContainer,\r\n  ListGroup,\r\n  TabContent,\r\n  TabPane,\r\n} from \"react-bootstrap\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport \"./PreviousExam.css\";\r\n\r\nimport MarkSheet from \"./MarkSheet\";\r\n\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport LinearIndeterminate from \"../Generic/Loader\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { Box, CardContent, MenuList, Typography } from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport ExamInfo from \"./ExamInfo\";\r\n\r\nconst PreviousExam = (props) => {\r\n  var months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  var days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  const { id } = useParams();\r\n\r\n  let userdata;\r\n  userdata = localStorage.getItem(\"data\");\r\n  userdata = JSON.parse(userdata);\r\n\r\n  let role ;\r\n  \r\n  role = userdata.role;\r\n\r\n  const [mcqExamData, setMcqExamData] = useState(null);\r\n  const [cqExamData, setCqExamData] = useState(null);\r\n  const [mcqExamsData, setMcqExamsData] = useState(null);\r\n  const [cqExamsData, setCqExamsData] = useState(null);\r\n\r\n  const [onlyExamInfo, setOnlyExamInfo] = useState(null);\r\n\r\n  let mcq;\r\n  let cq;\r\n\r\n  useEffect(() => {\r\n    let examType = \"mcq\";\r\n    let endpoint;\r\n    if (role === \"Teacher\") endpoint = `teacher/exam/${examType}/submits/${id}`;\r\n    else endpoint = `${role}/exam/${examType}/submit/${id}`;\r\n\r\n    axios\r\n      .get(endpoint)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status == \"OK\") {\r\n          if (role === \"Teacher\") setMcqExamsData(response.data.result.data);\r\n          else setMcqExamData(response.data.result.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        axios\r\n          .get(`${role}/exam/${id}`)\r\n          .then((response) => {\r\n            setOnlyExamInfo(response.data.result.data);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      });\r\n\r\n    examType = \"cq\";\r\n    if (role === \"Teacher\") endpoint = `teacher/exam/${examType}/submits/${id}`;\r\n    else endpoint = `${role}/exam/${examType}/submit/${id}`;\r\n\r\n    axios\r\n      .get(endpoint)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status == \"OK\") {\r\n          if (role === \"Teacher\") setCqExamsData(response.data.result.data);\r\n          else setCqExamData(response.data.result.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        axios\r\n          .get(`${role}/exam/${id}`)\r\n          .then((response) => {\r\n            setOnlyExamInfo(response.data.result.data);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      });\r\n  }, []);\r\n\r\n  if (mcqExamData)\r\n    mcq = mcqExamData.studentAnswers.map((test) => {\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Box fontWeight=\"fontWeightBold\" m={1}>\r\n              {\" \"}\r\n              Question :{\" \"}\r\n            </Box>\r\n            <div className=\"card card-body bg-light\">\r\n              <Typography>{test.mcqQuestion.description}</Typography>\r\n              {/* <Alert variant=\"primary\"> */}\r\n              <Typography>{test.mcqQuestion.mainQuestion}</Typography>\r\n              {/* </Alert> */}\r\n            </div>\r\n\r\n            <CardContent>\r\n              {/* <Box fontWeight=\"fontWeightBold\" m={1}> Options :  </Box> */}\r\n              <MenuList>\r\n                {test.mcqQuestion.options.map((op) => {\r\n                  if (test.mcqQuestion.correctAnswers[0].answer === op.option)\r\n                    return <Alert variant=\"success\">{op.option}</Alert>;\r\n                  if (test.studentAnswer === op.option)\r\n                    return <Alert variant=\"danger\">{op.option}</Alert>;\r\n\r\n                  return <MenuItem>{op.option}</MenuItem>;\r\n                })}\r\n              </MenuList>\r\n            </CardContent>\r\n          </Card>\r\n          <br></br>\r\n        </div>\r\n      );\r\n    });\r\n  else if (cqExamData)\r\n    cq = cqExamData.cqExam.cqQuestions.map((cqx, i) => {\r\n      console.log(cqExamData);\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Box fontWeight=\"fontWeightBold\" m={1}>\r\n              {\" \"}\r\n              Question : [ {`Marks : ${cqx.cqQuestionId.marks} || `}\r\n              {`Time : ${cqx.cqQuestionId.time / 60}  min  ${\r\n                cqx.cqQuestionId.time % 60\r\n              } sec `}\r\n              ]\r\n            </Box>\r\n\r\n            <div className=\"card card-body bg-light\">\r\n              <Typography>\r\n                {\" \"}\r\n                {cqx.cqQuestionId.description\r\n                  ? cqx.cqQuestionId.description\r\n                  : \"\"}\r\n              </Typography>\r\n\r\n              <Typography> {cqx.cqQuestionId.mainQuestion} </Typography>\r\n            </div>\r\n            <CardContent>\r\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                <Form.Label>\r\n                  <Box fontWeight=\"fontWeightBold\" m={1}>\r\n                    Ans :{\" \"}\r\n                  </Box>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  value={cqExamData.studentAnswers[i] ? cqExamData.studentAnswers[i].studentAnswer : ''}\r\n                  disabled\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                />\r\n              </Form.Group>\r\n            </CardContent>\r\n          </Card>\r\n          <br></br>\r\n        </div>\r\n      );\r\n    });\r\n\r\n  if (role === \"Teacher\" && (mcqExamsData || onlyExamInfo || cqExamData)) {\r\n    return (\r\n      <Tab.Container\r\n        className=\"scroll-off\"\r\n        id=\"list-group-tabs-example\"\r\n        defaultActiveKey=\"#exam-info\"\r\n      >\r\n        <Row>\r\n          <Col sm={2}>\r\n            <ListGroup variant=\"flush\" className=\"align-items-center\">\r\n              <ListGroup.Item action href=\"#exam-info\">\r\n                Exam Info\r\n              </ListGroup.Item>\r\n              <ListGroup.Item action href=\"#mark-sheet\">\r\n                Mark Sheet\r\n              </ListGroup.Item>\r\n              <ListGroup.Item action href=\"#reviews\">\r\n                Reviews\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col sm={10}>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey=\"#exam-info\">\r\n                <ExamInfo\r\n                  onlyExamInfo={onlyExamInfo}\r\n                  mcqExamData={mcqExamsData ? mcqExamsData[0] : null}\r\n                  cqExamData={cqExamsData ? cqExamsData[0] : null}\r\n                />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey=\"#mark-sheet\">\r\n                <MarkSheet\r\n                  mcqExamsData={mcqExamsData}\r\n                  cqExamsData={cqExamsData}\r\n                />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey=\"#reviews\">Reports</Tab.Pane>\r\n            </Tab.Content>\r\n          </Col>\r\n        </Row>\r\n      </Tab.Container>\r\n    );\r\n  }\r\n  // else if()\r\n  else if (role === \"Student\" && (mcqExamData || cqExamData))\r\n    return (\r\n      <Container style={{ marginTop: \"5px\", backgroundColor: \"white\" }}>\r\n        <Alert variant=\"light\">\r\n          <h1 className=\"text-center\">\r\n            {mcqExamData ? mcqExamData.mcqExam.name : cqExamData.cqExam.name}\r\n          </h1>\r\n        </Alert>\r\n\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Participated On</td>\r\n                      <td>\r\n                        {new Date(\r\n                          mcqExamData\r\n                            ? mcqExamData.submitOn\r\n                            : cqExamData.submitOn\r\n                        ).getDate()}\r\n                        th{\" \"}\r\n                        {\r\n                          months[\r\n                            new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.submitOn\r\n                                : cqExamData.submitOn\r\n                            ).getMonth()\r\n                          ]\r\n                        }\r\n                        ,\r\n                        {new Date(\r\n                          mcqExamData\r\n                            ? mcqExamData.submitOn\r\n                            : cqExamData.submitOn\r\n                        ).getFullYear()}{\" \"}\r\n                        (\r\n                        {\r\n                          days[\r\n                            new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.submitOn\r\n                                : cqExamData.submitOn\r\n                            ).getDay()\r\n                          ]\r\n                        }\r\n                        )\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>At</td>\r\n                      <td>\r\n                        {new Date(\r\n                          mcqExamData\r\n                            ? mcqExamData.mcqExam.date\r\n                            : cqExamData.cqExam.date\r\n                        ).getHours() < 10\r\n                          ? \"0\" +\r\n                            new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.mcqExam.date\r\n                                : cqExamData.cqExam.date\r\n                            ).getHours()\r\n                          : new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.mcqExam.date\r\n                                : cqExamData.cqExam.date\r\n                            ).getHours()}\r\n                        :\r\n                        {new Date(\r\n                          mcqExamData\r\n                            ? mcqExamData.mcqExam.date\r\n                            : cqExamData.cqExam.date\r\n                        ).getMinutes() < 10\r\n                          ? \"0\" +\r\n                            new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.mcqExam.date\r\n                                : cqExamData.cqExam.date\r\n                            ).getMinutes()\r\n                          : new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.mcqExam.date\r\n                                : cqExamData.cqExam.date\r\n                            ).getMinutes()}{\" \"}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Total Time</td>\r\n                      <td>\r\n                        {mcqExamData\r\n                          ? mcqExamData.mcqExam.totalTime\r\n                          : cqExamData.cqExam.totalTime}{\" \"}\r\n                        min\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Row>\r\n              <Col></Col>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Total Marks</td>\r\n                      <td>\r\n                        {mcqExamData ? mcqExamData.mark : cqExamData.mark}/\r\n                        {mcqExamData\r\n                          ? mcqExamData.mcqExam.totalMarks\r\n                          : cqExamData.cqExam.totalMarks}\r\n                      </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                      <td>Solved</td>\r\n                      <td>{mcqExamData ? mcqExamData.solved : \"\"}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                      <td>Wrong</td>\r\n                      <td>{mcqExamData ? mcqExamData.wrong : \"\"}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col></Col>\r\n\r\n          <Col></Col>\r\n        </Row>\r\n        <Container fluid>{mcq ? mcq : cq}</Container>\r\n      </Container>\r\n    );\r\n  else if (onlyExamInfo && role === \"Student\")\r\n    return (\r\n      <Container>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <Alert variant=\"danger\">You Haven't Participated In This Exam</Alert>\r\n        </div>\r\n        <ExamInfo onlyExamInfo={onlyExamInfo} />\r\n      </Container>\r\n    );\r\n  else return <LinearIndeterminate />;\r\n};\r\n\r\nexport default PreviousExam;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\Examine.js",["204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Modal,\r\n  Form,\r\n  Spinner,\r\n  Card,\r\n  Alert,\r\n  Jumbotron,\r\n  Table,\r\n  Tab,\r\n  TabContainer,\r\n  ListGroup,\r\n  TabContent,\r\n  TabPane,\r\n} from \"react-bootstrap\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport MarkSheet from \"./MarkSheet\";\r\n\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport LinearIndeterminate from \"../Generic/Loader\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n  Box,\r\n  CardContent,\r\n  Grid,\r\n  MenuList,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport ExamInfo from \"./ExamInfo\";\r\n\r\nconst Examine = (props) => {\r\n  var months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  var days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  const { id } = useParams();\r\n\r\n  let userdata;\r\n  userdata = localStorage.getItem(\"data\");\r\n  userdata = JSON.parse(userdata);\r\n\r\n  let role;\r\n\r\n  role = userdata.role;\r\n\r\n  const [cqExamsData, setCqExamsData] = useState(null);\r\n\r\n  const [onlyExamInfo, setOnlyExamInfo] = useState(null);\r\n\r\n  const [index, setindex] = useState(0);\r\n  const [mark, setmark] = useState(\"\");\r\n\r\n  const marks = [];\r\n\r\n  let cq;\r\n\r\n  useEffect(() => {\r\n    let examType = \"mcq\";\r\n    const endpoint = `teacher/exam/cq/submits/${id}`;\r\n\r\n    axios\r\n      .get(endpoint)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status == \"OK\") {\r\n          setCqExamsData(response.data.result.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        axios\r\n          .get(`teacher/exam/${id}`)\r\n          .then((response) => {\r\n            setOnlyExamInfo(response.data.result.data);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      });\r\n  }, []);\r\n\r\n  const addMark = (id) => {\r\n    console.log(cqExamsData[index].cqExam._id, \" X \", mark);\r\n    if (mark)\r\n      marks.push({\r\n        cqQuestion: cqExamsData[index].cqExam._id,\r\n        mark: parseInt(mark, 10),\r\n      });\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setmark(e.target.value);\r\n  };\r\n\r\n  const postMarks = () => {\r\n    const url = `teacher/examine/cq/${id}`;\r\n\r\n    let totalMarks;\r\n\r\n    marks.forEach((marxk) => {\r\n      totalMarks += marxk.mark;\r\n    });\r\n    console.log(marks);\r\n\r\n    const data = JSON.stringify({\r\n      marks: marks,\r\n      totalMarks: totalMarks,\r\n    });\r\n\r\n    axios({\r\n      method: \"POST\",\r\n      url: url,\r\n\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      data: data,\r\n    })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status === \"OK\") {\r\n          setindex((index) => index + 1);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  if (cqExamsData) {\r\n    const examInfoUI = (\r\n      <Container fluid style={{ marginTop: \"5px\" }}>\r\n        <Alert variant=\"light\">\r\n          <h1 className=\"text-center\">\r\n            Exam Name : {cqExamsData[0].cqExam.name}\r\n          </h1>\r\n        </Alert>\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Date</td>\r\n                      <td>\r\n                        {new Date(cqExamsData[0].cqExam.date).getDate()}\r\n                        th{\" \"}\r\n                        {\r\n                          months[\r\n                            new Date(cqExamsData[0].cqExam.date).getMonth()\r\n                          ]\r\n                        }\r\n                        ,{new Date(cqExamsData[0].cqExam.date).getFullYear()} (\r\n                        {days[new Date(cqExamsData[0].cqExam.date).getDay()]})\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>At</td>\r\n                      <td>\r\n                        {new Date(cqExamsData[0].cqExam.date).getHours() < 10\r\n                          ? \"0\" +\r\n                            new Date(cqExamsData[0].cqExam.date).getHours()\r\n                          : new Date(cqExamsData[0].cqExam.date).getHours()}\r\n                        :\r\n                        {new Date(cqExamsData[0].cqExam.date).getMinutes() < 10\r\n                          ? \"0\" +\r\n                            new Date(cqExamsData[0].cqExam.date).getMinutes()\r\n                          : new Date(\r\n                              cqExamsData[0].cqExam.date\r\n                            ).getMinutes()}{\" \"}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Row>\r\n              <Col></Col>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Total Marks</td>\r\n                      <td>{cqExamsData[0].totalMarks}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                      <td>Total Time</td>\r\n                      <td>{cqExamsData[0].totalTime} min</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n\r\n    cq = cqExamsData[index].cqExam.cqQuestions.map((cqx, i) => {\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Grid justify=\"space-between\">\r\n              <Box fontWeight=\"fontWeightBold\" m={1}>\r\n                {\" \"}\r\n                Question : [ {`Marks : ${cqx.cqQuestionId.marks} || `}\r\n                {`Time : ${cqx.cqQuestionId.time / 60}  min  ${\r\n                  cqx.cqQuestionId.time % 60\r\n                } sec `}\r\n                ]\r\n              </Box>\r\n            </Grid>\r\n\r\n            <div className=\"card card-body bg-light\">\r\n              <Typography>\r\n                {\" \"}\r\n                {cqx.cqQuestionId.description\r\n                  ? cqx.cqQuestionId.description\r\n                  : \"\"}\r\n              </Typography>\r\n\r\n              <Typography> {cqx.cqQuestionId.mainQuestion} </Typography>\r\n            </div>\r\n            <CardContent>\r\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                <Form.Label>\r\n                  <Box fontWeight=\"fontWeightBold\" m={1}>\r\n                    Ans :{\" \"}\r\n                  </Box>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  value={\r\n                    cqExamsData[0].studentAnswers[i]\r\n                      ? cqExamsData[0].studentAnswers[i].studentAnswer\r\n                      : \"\"\r\n                  }\r\n                  disabled\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                <TextField\r\n                  label=\"Mark\"\r\n                  id={cqExamsData[0].cqExam._id}\r\n                  //   defaultValue=\"Small\"\r\n                  type=\"Number\"\r\n                  value={mark}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  size=\"small\"\r\n                  required\r\n                />\r\n                <button onClick={addMark} type=\"input\" className=\"btn btn-info\">\r\n                  {\" \"}\r\n                  Add{\" \"}\r\n                </button>\r\n              </Form.Group>\r\n            </CardContent>\r\n          </Card>\r\n          <br></br>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Container>\r\n        {examInfoUI}\r\n        {cq}\r\n        <button onClick={postMarks} className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n        <br />\r\n        <br />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (onlyExamInfo) {\r\n    cq = onlyExamInfo.cqQuestions.map((questions) => {\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Box fontWeight=\"fontWeightBold\" m={1}>\r\n              {\" \"}\r\n              Question :{\" \"}\r\n            </Box>\r\n            <div className=\"card card-body bg-light\">\r\n              <Typography>{questions.cqQuestionId.description}</Typography>\r\n              {/* <Alert variant=\"primary\"> */}\r\n              <Typography>{questions.cqQuestionId.mainQuestion}</Typography>\r\n              {/* </Alert> */}\r\n            </div>\r\n          </Card>\r\n          <br></br>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Container fluid style={{ marginTop: \"5px\" }}>\r\n        <Container>\r\n          <div className=\"d-flex justify-content-center\">\r\n            <Alert variant=\"warning\">No Participants</Alert>\r\n          </div>\r\n        </Container>\r\n\r\n        <Alert variant=\"light\">\r\n          <h1 className=\"text-center\">Exam Name : {onlyExamInfo.name}</h1>\r\n        </Alert>\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Date</td>\r\n                      <td>\r\n                        {new Date(onlyExamInfo.date).getDate()}\r\n                        th {months[new Date(onlyExamInfo.date).getMonth()]},\r\n                        {new Date(onlyExamInfo.date).getFullYear()} (\r\n                        {days[new Date(onlyExamInfo.date).getDay()]})\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>At</td>\r\n                      <td>\r\n                        {new Date(onlyExamInfo.date).getHours() < 10\r\n                          ? \"0\" + new Date(onlyExamInfo.date).getHours()\r\n                          : new Date(onlyExamInfo.date).getHours()}\r\n                        :\r\n                        {new Date(onlyExamInfo.date).getMinutes() < 10\r\n                          ? \"0\" + new Date(onlyExamInfo.date).getMinutes()\r\n                          : new Date(onlyExamInfo.date).getMinutes()}{\" \"}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Row>\r\n              <Col></Col>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Total Marks</td>\r\n                      <td>{onlyExamInfo.totalMarks}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                      <td>Total Time</td>\r\n                      <td>{onlyExamInfo.totalTime} min</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Container>{cq}</Container>\r\n      </Container>\r\n    );\r\n  } else return <LinearIndeterminate />;\r\n};\r\n\r\nexport default Examine;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\UpcomingExam\\UpcomingExam.js",["222","223","224","225","226"],"import React from \"react\";\r\nimport Timer from \"../Timer/Timer\";\r\nimport { Col, Container, Row, Alert, Table } from \"react-bootstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst UpcomingExam = (props) => {\r\n  var months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  var days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  const { id } = useParams();\r\n\r\n  let userdata;\r\n  userdata = localStorage.getItem(\"data\");\r\n  userdata = JSON.parse(userdata);\r\n\r\n  let examInfo;\r\n  if (userdata)\r\n    userdata.courses.map((course) => {\r\n      //   console.log(course);\r\n      course.course.cqExams.map((exam) => {\r\n        //   console.log(exam.examId._id);\r\n        if (exam.examId._id == id) {\r\n          //   console.log(exam);\r\n          examInfo = exam.examId;\r\n        }\r\n      });\r\n      course.course.mcqExams.map((exam) => {\r\n        //   console.log(exam.examId._id);\r\n        if (exam.examId._id == id) examInfo = exam.examId;\r\n      });\r\n    });\r\n\r\n  console.log(examInfo);\r\n\r\n  return (\r\n    <Container style={{backgroundColor: \"white\", paddingBottom: \"3%\"}}>\r\n      <Alert variant=\"primary\">\r\n        <p className=\"text-center\">Exam Has Not Started Yet</p>\r\n      </Alert>\r\n      {/* <Alert variant=\"light\"> */}\r\n      <h1 className=\"text-center\">{examInfo.name}</h1>\r\n      {/* </Alert> */}\r\n\r\n      <Row>\r\n        <Col>\r\n          <Row>\r\n            <Col>\r\n              <Table\r\n                // variant=\"dark\"\r\n                responsive\r\n                hover\r\n                bordered\r\n                size=\"sm\"\r\n                bsPrefix=\"table\"\r\n              >\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Time</td>\r\n                    <td>\r\n                      {new Date(examInfo.date).getHours() < 10\r\n                        ? \"0\" + new Date(examInfo.date).getHours()\r\n                        : new Date(examInfo.date).getHours()}\r\n                      :\r\n                      {new Date(examInfo.date).getMinutes() < 10\r\n                        ? \"0\" + new Date(examInfo.date).getMinutes()\r\n                        : new Date(examInfo.date).getMinutes()}{\" \"}\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Date</td>\r\n                    <td>\r\n                      {new Date(examInfo.date).getDate()}th{\" \"}\r\n                      {months[new Date(examInfo.date).getMonth()]},\r\n                      {new Date(examInfo.date).getFullYear()} (\r\n                      {days[new Date(examInfo.date).getDay()]})\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n\r\n        <Col>\r\n          <Row>\r\n            <Col></Col>\r\n            <Col>\r\n              <Table\r\n                // variant=\"dark\"\r\n                responsive\r\n                hover\r\n                bordered\r\n                size=\"sm\"\r\n                bsPrefix=\"table\"\r\n              >\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Total Marks</td>\r\n                    <td>{examInfo.totalMarks}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Total Time</td>\r\n                    <td>{examInfo.totalTime} min</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <Timer deadline={examInfo.date} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpcomingExam;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\404\\Error404.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Exam\\Exam.js",["227","228","229","230","231"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CircularProgress,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  Menu,\r\n  MenuItem,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Exam(props) {\r\n  // const { match } = props;\r\n\r\n  // console.log(\"Exam id\",match);\r\n  console.log(\"props... \", props);\r\n\r\n  let { id } = useParams();\r\n  console.log(\"ID\", id);\r\n\r\n  const [examData, setExamData] = useState(null);\r\n\r\n  const [timer, setTimer] = useState(null);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (props.userInfo)\r\n      axios.get(`${props.userInfo.role}/exam/${id}`).then((response) => {\r\n        const data = response.data;\r\n        setExamData(data.result.data);\r\n      });\r\n  }, []);\r\n\r\n  console.log(\"Exam Data\", examData);\r\n\r\n  let examQuestionUi;\r\n\r\n  if (examData && examData.mcqQuestions) {\r\n    examQuestionUi = examData.mcqQuestions.map((question) => {\r\n      return (\r\n        <Card>\r\n          <CardContent>\r\n            <Typography>{question.mcqQuestionId.description}</Typography>\r\n\r\n            <Typography>{question.mcqQuestionId.mainQuestion}</Typography>\r\n\r\n            <List>\r\n              {question.mcqQuestionId.options.map((options) => {\r\n                return (\r\n                  <ListItem>\r\n                    <CardActions Button>{options.option}</CardActions>\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </CardContent>\r\n          <Divider />\r\n        </Card>\r\n      );\r\n    });\r\n  } else if (examData && examData.cqQuestions) {\r\n    examQuestionUi = examData.cqQuestions.map((question) => {\r\n      return (\r\n        <Card>\r\n          <CardContent>\r\n            <Typography>{question.cqQuestionId.description}</Typography>\r\n\r\n            <Typography>{question.cqQuestionId.mainQuestion}</Typography>\r\n            <TextField\r\n              id=\"outlined-textarea\"\r\n              label=\"Ans\"\r\n              placeholder=\"Write here\"\r\n              multiline\r\n              variant=\"outlined\"\r\n            />\r\n          </CardContent>\r\n          <Divider />\r\n        </Card>\r\n      );\r\n    });\r\n  }\r\n\r\n  let x = 0;\r\n\r\n  if (examData)\r\n    setInterval(() => {\r\n      const date = new Date();\r\n      setTimer(date.getSeconds());\r\n    }, 1000);\r\n\r\n  if (examData)\r\n    return (\r\n      <Container>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={8}>\r\n            <Paper>\r\n              <Typography variant=\"h2\" component=\"h2\">\r\n                {examData.name}\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Paper>\r\n              {\" \"}\r\n              <h3>{timer}</h3>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid>{examQuestionUi}</Grid>\r\n        <Button onClick={() => x++}>Next</Button>\r\n      </Container>\r\n    );\r\n  else return <CircularProgress />;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Generic\\Loader.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Generic\\Forms.js",["232"],"import React, { useState, useEffect } from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport axios from \"axios\";\r\nimport \"./Forms.scss\";\r\n\r\nconst apiDomain = \"http://localhost:8080/\";\r\n\r\nconst TextFieldForm = (props) => (\r\n  <TextField\r\n  id={props.id}\r\n  label={props.label}\r\n  multiline\r\n  rows={props.rows}\r\n  variant=\"outlined\"\r\n  onChange={props.handleChange(props.id)}\r\n  labelWidth={props.labelWidth}\r\n  value={props.values}\r\n  fullWidth\r\n  className={props.classes.textField}\r\n  required={props.required}\r\n  defaultValue={props.defaultValue ? props.defaultValue : ''}\r\n  disabled={props.disabled ? props.disabled : false}\r\n/>\r\n)\r\n\r\nconst TextForm = (props) => (\r\n  <FormControl\r\n    className={props.classes.textField}\r\n    variant=\"outlined\"\r\n    fullWidth\r\n    required={props.required}\r\n  >\r\n    <InputLabel>{props.label}</InputLabel>\r\n    <OutlinedInput\r\n      id={props.id}\r\n      onChange={props.handleChange(props.id)}\r\n      value={props.values}\r\n      labelWidth={props.labelWidth}\r\n    />\r\n  </FormControl>\r\n);\r\n\r\nconst PasswordForm = (props) => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  return (\r\n    <FormControl\r\n      className={props.classes.textField}\r\n      variant=\"outlined\"\r\n      fullWidth\r\n      required\r\n    >\r\n      <InputLabel>{props.label}</InputLabel>\r\n      <OutlinedInput\r\n        id={props.id}\r\n        type={showPassword ? \"text\" : \"password\"}\r\n        value={props.values}\r\n        onChange={props.handleChange(props.id)}\r\n        endAdornment={\r\n          <InputAdornment position=\"end\">\r\n            <IconButton\r\n              aria-label={\"password\"}\r\n              onClick={handleClickShowPassword}\r\n              onMouseDown={handleMouseDownPassword}\r\n              edge=\"end\"\r\n            >\r\n              {showPassword ? <Visibility /> : <VisibilityOff />}\r\n            </IconButton>\r\n          </InputAdornment>\r\n        }\r\n        labelWidth={props.labelWidth}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst Forms = (props) => {\r\n  const type = props.type;\r\n\r\n  const [universities, setUniversities] = useState(null);\r\n  const [isApiLoaded, setIsApiLoaded] = useState(true);\r\n\r\n  // console.log(props);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: apiDomain + \"university/all\",\r\n    })\r\n      .then((response) => {\r\n        // console.log(\"All Universites..\");\r\n\r\n        // console.log(response.data);\r\n\r\n        const data = response.data;\r\n\r\n        if (data.status === \"OK\") {\r\n          setUniversities(data.result.data.universities);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setIsApiLoaded(false);\r\n      });\r\n  }, []);\r\n\r\n  const SelectForm = (props) => {\r\n    // console.log(\"COMPONENT : select form\");\r\n    let items = [];\r\n    const id = props.id;\r\n\r\n    if (universities) {\r\n      // console.log(\"Univbersity\", universities);\r\n\r\n      // for (let i = 0; i < universities.length; i++) {\r\n      //   console.log(\"Loop\");\r\n      //   console.log(universities[i]);\r\n      // }\r\n\r\n      if (id === \"role\")\r\n        items = [\r\n          {\r\n            id: \"Teacher\",\r\n            value: \"Teacher\",\r\n          },\r\n          {\r\n            id: \"Student\",\r\n            value: \"Student\",\r\n          },\r\n        ];\r\n      else if (id === \"university\") {\r\n        items = [];\r\n        universities.forEach((element) => {\r\n          items.push({\r\n            id: element._id,\r\n            value: element.shortform,\r\n          });\r\n        });\r\n      } else if (id === \"department\") {\r\n        items = [];\r\n\r\n        if (props.selectedUniversity) {\r\n          // console.log(\"Selected University \", props.selectedUniversity);\r\n          universities.forEach((element) => {\r\n            if (element._id === props.selectedUniversity) {\r\n              element.departments.forEach((dept) => {\r\n                // console.log(dept);\r\n                items.push({\r\n                  id: dept._id,\r\n                  value: dept.shortform,\r\n                });\r\n              });\r\n            }\r\n          });\r\n        }\r\n      } else if (id === \"session\") {\r\n        items = [];\r\n        items = [\r\n          {\r\n            id: \"2016-2017\",\r\n            value: \"2016-2017\",\r\n          },\r\n          {\r\n            id: \"2017-2018\",\r\n            value: \"2017-2018\",\r\n          },\r\n          {\r\n            id: \"2018-2019\",\r\n            value: \"2018-2019\",\r\n          },\r\n          {\r\n            id: \"2020-2021\",\r\n            value: \"2020-2021\",\r\n          },\r\n        ];\r\n      } else if (id === \"designation\") {\r\n        items = [];\r\n        items = [\r\n          {\r\n            id: \"Department Head\",\r\n            value: \"Department Head\",\r\n          },\r\n          {\r\n            id: \"Professor\",\r\n            value: \"Professor\",\r\n          },\r\n          {\r\n            id: \"Assistant Professor\",\r\n            value: \"Assistant Professor\",\r\n          },\r\n          {\r\n            id: \"Lecturer\",\r\n            value: \"Lecturer\",\r\n          },\r\n        ];\r\n      } else if(id === \"options\") {\r\n        items = [];\r\n        items = [\r\n          {\r\n            id: \"optA\",\r\n            value: \"A\",\r\n          },\r\n          {\r\n            id: \"optB\",\r\n            value: \"B\",\r\n          },\r\n          {\r\n            id: \"optC\",\r\n            value: \"C\",\r\n          },\r\n          {\r\n            id: \"optD\",\r\n            value: \"D\",\r\n          },\r\n        ];\r\n      }\r\n    }\r\n\r\n    const menuItems = items.map((item, i) => {\r\n      // console.log(items);\r\n      return (\r\n        <MenuItem key={i} value={item.id}>\r\n          {item.value}\r\n        </MenuItem>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <FormControl\r\n      disabled = {props.disable ?  props.disable : false}\r\n        variant=\"outlined\"\r\n        className={props.classes.textField}\r\n        fullWidth\r\n        required\r\n      >\r\n        <InputLabel>{props.label}</InputLabel>\r\n        <Select\r\n          id={id}\r\n          value={props.values}\r\n          onChange={props.handleChange(id)}\r\n          label={props.label}\r\n        >\r\n          <MenuItem disabled>\r\n            <em>{props.label}</em>\r\n          </MenuItem>\r\n          {menuItems}\r\n        </Select>\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  if (type === \"text\") {\r\n    return <TextForm {...props} />;\r\n  } else if (type === \"password\") {\r\n    return <PasswordForm {...props} />;\r\n  } else if (type === \"select\") {\r\n    return <SelectForm {...props} />;\r\n  } else {\r\n    return <TextFieldForm {...props}/>\r\n  }\r\n};\r\n\r\nexport default Forms;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Sidebar.js",["233","234","235"],"import React, { useState ,useEffect} from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { IoCreate } from \"react-icons/io5\";\r\nimport { IoClipboard } from \"react-icons/io5\";\r\nimport { FaAngleDoubleRight } from \"react-icons/fa\";\r\nimport { FaChalkboardTeacher } from \"react-icons/fa\";\r\nimport { FaUsers } from \"react-icons/fa\";\r\nimport { FaInfoCircle } from \"react-icons/fa\";\r\nimport \"./Sidebar.scss\";\r\nimport ExamType from \"./CreateExam/ExamType\";\r\nimport Students from './Students';\r\nimport Exams from \"./Exams\";\r\nimport Teacher from \"./Teacher\";\r\nimport Info from \"./Info\";\r\n\r\nexport default function Sidebar(props) {\r\n\r\n\r\n\r\n  let userdata;\r\n  userdata = localStorage.getItem(\"data\");\r\n  userdata = JSON.parse(userdata);\r\n\r\n  console.log(props.courseData);\r\n\r\n\r\n  let displayContent;\r\n\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const showSidebar = () => setSidebar(!sidebar);\r\n\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  const [content, setContent] = useState(\"\");\r\n  const handleClick = (prop) => (event) => {\r\n    setContent(prop);\r\n  };\r\n  console.log(content);\r\n  if (content === \"createExam\")\r\n    displayContent = (\r\n      <ExamType className=\"content\" courseData={props.courseData} />\r\n    );\r\n  else if (content === \"exams\")\r\n    displayContent = (\r\n      <Exams\r\n        className=\"content\"\r\n        userInfo={userdata}\r\n        courseData={props.courseData}\r\n      />\r\n    );\r\n  else if (content === \"students\")\r\n    displayContent = (\r\n      <Students\r\n        className=\"content\"\r\n        userInfo={userdata}\r\n        courseData={props.courseData}\r\n      />\r\n    );\r\n  else if(content === \"teacher\") {\r\n    displayContent = (\r\n      <Teacher\r\n        className=\"content\"\r\n        userInfo={userdata}\r\n        courseData={props.courseData}\r\n      />\r\n    );\r\n  }\r\n  else if(content === \"info\") {\r\n    displayContent = (\r\n      <Info\r\n        className=\"content\"\r\n        userInfo={userdata}\r\n        courseData={props.courseData}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"parent\">\r\n      <div className={sidebar ? \"sidebar active\" : \"sidebar\"}>\r\n        <ul className=\"sidebar__nav\">\r\n          <li className=\"sidebar__logo\">\r\n            <Row>\r\n              <span className=\"sidebar__item__link\" onClick={showSidebar}>\r\n                <Col xs={4} className=\"sidebar__item__text\">\r\n                  {props.courseData.code}\r\n                </Col>\r\n                <Col xs={sidebar ? { span: 4, offset: 2 } : {}}>\r\n                  <FaAngleDoubleRight className=\"sidebar__item__icon\" />\r\n                </Col>\r\n              </span>\r\n            </Row>\r\n          </li>\r\n          {userdata.role === \"Teacher\" ? (\r\n            <li className=\"sidebar__item\">\r\n              <a\r\n                href=\"#create-exam\"\r\n                id=\"create-exam\"\r\n                className=\"sidebar__item__link\"\r\n                onClick={handleClick(\"createExam\")}\r\n              >\r\n                <IoCreate className=\"sidebar__item__icon\" />\r\n                <span className=\"sidebar__item__text\">Create Exam</span>\r\n              </a>\r\n            </li>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <li className=\"sidebar__item\">\r\n            <a\r\n              href=\"#exams\"\r\n              id=\"exams\"\r\n              className=\"sidebar__item__link\"\r\n              onClick={handleClick(\"exams\")}\r\n            >\r\n              <IoClipboard className=\"sidebar__item__icon\" />\r\n              <span className=\"sidebar__item__text\">Exams</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"sidebar__item\">\r\n            <a\r\n              href=\"#students\"\r\n              id=\"students\"\r\n              className=\"sidebar__item__link\"\r\n              onClick={handleClick(\"students\")}\r\n            >\r\n              <FaUsers className=\"sidebar__item__icon\" />\r\n              <span className=\"sidebar__item__text\">Students</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"sidebar__item\">\r\n            <a\r\n              href=\"#teacher\"\r\n              id=\"teacher\"\r\n              className=\"sidebar__item__link\"\r\n              onClick={handleClick(\"teacher\")}\r\n            >\r\n              <FaChalkboardTeacher className=\"sidebar__item__icon\" />\r\n              <span className=\"sidebar__item__text\">Teacher</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"sidebar__item\">\r\n            <a\r\n              href=\"#info\"\r\n              id=\"info\"\r\n              className=\"sidebar__item__link\"\r\n              onClick={handleClick(\"info\")}\r\n            >\r\n              <FaInfoCircle className=\"sidebar__item__icon\" />\r\n              <span className=\"sidebar__item__text\">Course Info</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className={sidebar ? \"content__small\" : \"content__large\"}>\r\n        {displayContent}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\ExamInfo.js",["236","237","238","239","240","241","242","243","244"],"import React from \"react\";\r\nimport { Col, Container, Row, Card, Alert, Table } from \"react-bootstrap\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { Box, CardContent, MenuList, Typography } from \"@material-ui/core\";\r\n\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  Spinner,\r\n  Jumbotron,\r\n  Tab,\r\n  TabContainer,\r\n  ListGroup,\r\n  TabContent,\r\n  TabPane,\r\n} from \"react-bootstrap\";\r\n\r\nimport \"./PreviousExam.css\";\r\n\r\nconst ExamInfo = (props) => {\r\n  var months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  var days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  const mcqExamData = props.mcqExamData;\r\n  const cqExamData = props.cqExamData;\r\n  const onlyExamInfo = props.onlyExamInfo;\r\n  let mcq;\r\n  let cq;\r\n\r\n  console.log(\"mcqExamData\", mcqExamData);\r\n  console.log(\"cqExamData\", cqExamData);\r\n  console.log(\"onlyExamInfo\", onlyExamInfo);\r\n\r\n  if (mcqExamData) {\r\n    mcq = mcqExamData.mcqExam.mcqQuestions.map((questions) => {\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Box fontWeight=\"fontWeightBold\" m={1}>\r\n              {\" \"}\r\n              Question :{\" \"}\r\n            </Box>\r\n            <div className=\"card card-body bg-light\">\r\n              <Typography>{questions.mcqQuestionId.description}</Typography>\r\n              {/* <Alert variant=\"primary\"> */}\r\n              <Typography>{questions.mcqQuestionId.mainQuestion}</Typography>\r\n              {/* </Alert> */}\r\n            </div>\r\n\r\n            <CardContent>\r\n              {/* <Box fontWeight=\"fontWeightBold\" m={1}> Options :  </Box> */}\r\n              <MenuList>\r\n                {questions.mcqQuestionId.options.map((op) => {\r\n                  if (\r\n                    questions.mcqQuestionId.correctAnswers[0].answer ===\r\n                    op.option\r\n                  )\r\n                    return <Alert variant=\"success\">{op.option}</Alert>;\r\n\r\n                  return <MenuItem>{op.option}</MenuItem>;\r\n                })}\r\n              </MenuList>\r\n            </CardContent>\r\n          </Card>\r\n          <br></br>\r\n        </div>\r\n      );\r\n    });\r\n  } else if (cqExamData) {\r\n    cq = cqExamData.cqExam.cqQuestions.map((cqx, i) => {\r\n      console.log(cqExamData);\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Box fontWeight=\"fontWeightBold\" m={1}>\r\n              {\" \"}\r\n              Question : [ {`Marks : ${cqx.cqQuestionId.marks} || `}\r\n              {`Time : ${cqx.cqQuestionId.time / 60}  min  ${\r\n                cqx.cqQuestionId.time % 60\r\n              } sec `}\r\n              ]\r\n            </Box>\r\n\r\n            <div className=\"card card-body bg-light\">\r\n              <Typography>\r\n                {\" \"}\r\n                {cqx.cqQuestionId.description\r\n                  ? cqx.cqQuestionId.description\r\n                  : \"\"}\r\n              </Typography>\r\n\r\n              <Typography> {cqx.cqQuestionId.mainQuestion} </Typography>\r\n            </div>\r\n            <CardContent>\r\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                <Form.Label>\r\n                  <Box fontWeight=\"fontWeightBold\" m={1}>\r\n                    Ans :{\" \"}\r\n                  </Box>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  value={\r\n                    cqExamData.studentAnswers[i]\r\n                      ? cqExamData.studentAnswers[i].studentAnswer\r\n                      : \"\"\r\n                  }\r\n                  disabled\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                />\r\n              </Form.Group>\r\n            </CardContent>\r\n          </Card>\r\n          <br></br>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  if (onlyExamInfo) {\r\n    if (onlyExamInfo.mcqQuestions)\r\n      mcq = onlyExamInfo.mcqQuestions.map((questions) => {\r\n        return (\r\n          <div>\r\n            <Card>\r\n              <Box fontWeight=\"fontWeightBold\" m={1}>\r\n                {\" \"}\r\n                Question :{\" \"}\r\n              </Box>\r\n              <div className=\"card card-body bg-light\">\r\n                <Typography>{questions.mcqQuestionId.description}</Typography>\r\n                {/* <Alert variant=\"primary\"> */}\r\n                <Typography>{questions.mcqQuestionId.mainQuestion}</Typography>\r\n                {/* </Alert> */}\r\n              </div>\r\n\r\n              <CardContent>\r\n                {/* <Box fontWeight=\"fontWeightBold\" m={1}> Options :  </Box> */}\r\n                <MenuList>\r\n                  {questions.mcqQuestionId.options.map((op) => {\r\n                    if (\r\n                      questions.mcqQuestionId.correctAnswers[0].answer ===\r\n                      op.option\r\n                    )\r\n                      return <Alert variant=\"success\">{op.option}</Alert>;\r\n\r\n                    return <MenuItem>{op.option}</MenuItem>;\r\n                  })}\r\n                </MenuList>\r\n              </CardContent>\r\n            </Card>\r\n            <br></br>\r\n          </div>\r\n        );\r\n      });\r\n\r\n    if (onlyExamInfo.cqQuestions)\r\n      cq = onlyExamInfo.cqQuestions.map((questions) => {\r\n        return (\r\n          <div>\r\n            <Card>\r\n              <Box fontWeight=\"fontWeightBold\" m={1}>\r\n                {\" \"}\r\n                Question :{\" \"}\r\n              </Box>\r\n              <div className=\"card card-body bg-light\">\r\n                <Typography>{questions.cqQuestionId.description}</Typography>\r\n                {/* <Alert variant=\"primary\"> */}\r\n                <Typography>{questions.cqQuestionId.mainQuestion}</Typography>\r\n                {/* </Alert> */}\r\n              </div>\r\n\r\n              {/* <CardContent>\r\n              <MenuList>\r\n                {questions.mcqQuestionId.options.map((op) => {\r\n                  if (\r\n                    questions.mcqQuestionId.correctAnswers[0].answer ===\r\n                    op.option\r\n                  )\r\n                    return <Alert variant=\"success\">{op.option}</Alert>;\r\n\r\n                  return <MenuItem>{op.option}</MenuItem>;\r\n                })}\r\n              </MenuList>\r\n            </CardContent> */}\r\n            </Card>\r\n            <br></br>\r\n          </div>\r\n        );\r\n      });\r\n\r\n    return (\r\n      <Container fluid style={{ marginTop: \"5px\" }}>\r\n        <Alert variant=\"light\">\r\n          <h1 className=\"text-center\">Exam Name : {onlyExamInfo.name}</h1>\r\n        </Alert>\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Date</td>\r\n                      <td>\r\n                        {new Date(onlyExamInfo.date).getDate()}\r\n                        th {months[new Date(onlyExamInfo.date).getMonth()]},\r\n                        {new Date(onlyExamInfo.date).getFullYear()} (\r\n                        {days[new Date(onlyExamInfo.date).getDay()]})\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>At</td>\r\n                      <td>\r\n                        {new Date(onlyExamInfo.date).getHours() < 10\r\n                          ? \"0\" + new Date(onlyExamInfo.date).getHours()\r\n                          : new Date(onlyExamInfo.date).getHours()}\r\n                        :\r\n                        {new Date(onlyExamInfo.date).getMinutes() < 10\r\n                          ? \"0\" + new Date(onlyExamInfo.date).getMinutes()\r\n                          : new Date(onlyExamInfo.date).getMinutes()}{\" \"}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Row>\r\n              <Col></Col>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Total Marks</td>\r\n                      <td>{onlyExamInfo.totalMarks}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                      <td>Total Time</td>\r\n                      <td>{onlyExamInfo.totalTime} min</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Container>{mcq ? mcq : cq}</Container>\r\n      </Container>\r\n    );\r\n  } else\r\n    return (\r\n      <Container fluid style={{ marginTop: \"5px\" }}>\r\n        <Alert variant=\"light\">\r\n          <h1 className=\"text-center\">\r\n            Exam Name :{\" \"}\r\n            {mcqExamData ? mcqExamData.mcqExam.name : cqExamData.cqExam.name}\r\n          </h1>\r\n        </Alert>\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Date</td>\r\n                      <td>\r\n                        {new Date(\r\n                          mcqExamData\r\n                            ? mcqExamData.submitOn\r\n                            : cqExamData.submitOn\r\n                        ).getDate()}\r\n                        th{\" \"}\r\n                        {\r\n                          months[\r\n                            new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.submitOn\r\n                                : cqExamData.submitOn\r\n                            ).getMonth()\r\n                          ]\r\n                        }\r\n                        ,\r\n                        {new Date(\r\n                          mcqExamData\r\n                            ? mcqExamData.submitOn\r\n                            : cqExamData.submitOn\r\n                        ).getFullYear()}{\" \"}\r\n                        (\r\n                        {\r\n                          days[\r\n                            new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.submitOn\r\n                                : cqExamData.submitOn\r\n                            ).getDay()\r\n                          ]\r\n                        }\r\n                        )\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>At</td>\r\n                      <td>\r\n                        {new Date(\r\n                          mcqExamData\r\n                            ? mcqExamData.mcqExam.date\r\n                            : cqExamData.cqExam.date\r\n                        ).getHours() < 10\r\n                          ? \"0\" +\r\n                            new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.mcqExam.date\r\n                                : cqExamData.cqExam.date\r\n                            ).getHours()\r\n                          : new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.mcqExam.date\r\n                                : cqExamData.cqExam.date\r\n                            ).getHours()}\r\n                        :\r\n                        {new Date(\r\n                          mcqExamData\r\n                            ? mcqExamData.mcqExam.date\r\n                            : cqExamData.cqExam.date\r\n                        ).getMinutes() < 10\r\n                          ? \"0\" +\r\n                            new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.mcqExam.date\r\n                                : cqExamData.cqExam.date\r\n                            ).getMinutes()\r\n                          : new Date(\r\n                              mcqExamData\r\n                                ? mcqExamData.mcqExam.date\r\n                                : cqExamData.cqExam.date\r\n                            ).getMinutes()}{\" \"}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Row>\r\n              <Col></Col>\r\n              <Col>\r\n                <Table\r\n                  // variant=\"dark\"\r\n                  responsive\r\n                  hover\r\n                  bordered\r\n                  size=\"sm\"\r\n                  bsPrefix=\"table\"\r\n                >\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Total Marks</td>\r\n                      <td>\r\n                        {mcqExamData\r\n                          ? mcqExamData.mcqExam.totalMarks\r\n                          : cqExamData.cqExam.totalMarks}\r\n                      </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                      <td>Total Time</td>\r\n                      <td>\r\n                        {mcqExamData\r\n                          ? mcqExamData.mcqExam.totalTime\r\n                          : cqExamData.cqExam.totalTime}{\" \"}\r\n                        min\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Container className=\"scroll\">{mcq}</Container>\r\n      </Container>\r\n    );\r\n};\r\n\r\nexport default ExamInfo;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Timer\\Timer.js",["245","246"],"import { useRef, useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from '@material-ui/core/Button';\r\nimport \"./Timer.css\";\r\n\r\nconst Timer = (props) => {\r\n  const [timerDays, setTimerDays] = useState(\"00\");\r\n  const [timerHours, setTimerHours] = useState(\"00\");\r\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\r\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\r\n\r\n  //   console.log(props.deadline)\r\n  let interval = useRef();\r\n\r\n  const timer = (props) => {\r\n    const seconds = 1000;\r\n    const minutes = seconds * 60;\r\n    const hours = minutes * 60;\r\n    const days = hours * 24;\r\n    const deadline = new Date(props.deadline).getTime();\r\n\r\n    interval = setInterval(() => {\r\n      const now = new Date().getTime();\r\n      const timeLeft = deadline - now;\r\n      if (timeLeft < 0) {\r\n        clearInterval(interval.current);\r\n      } else {\r\n        setTimerDays(Math.floor(timeLeft / days));\r\n        setTimerHours(Math.floor((timeLeft % days) / hours));\r\n        setTimerMinutes(Math.floor((timeLeft % hours) / minutes));\r\n        setTimerSeconds(Math.floor((timeLeft % minutes) / seconds));\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    timer(props);\r\n    return () => {\r\n      clearInterval(interval.current);\r\n    };\r\n  });\r\n\r\n  if (timerDays === 0 && timerHours === 0 && timerMinutes === 0 && timerSeconds === 0)\r\n    return (\r\n      <Container className=\"enterExam\">\r\n        <Row className=\"d-flex justify-content-center enterHeading\">\r\n          <Col xs=\"auto\">\r\n            <h4>Your Exam is Running!</h4>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-center\">\r\n          <Col xs=\"auto\">\r\n            <Link\r\n              to={`/live-exam/${props.examID}`}\r\n              style={{ textDecoration: \"none\", color: \"black\" }}\r\n            >\r\n              <Button variant=\"contained\" color=\"primary\" disableElevation style={{backgroundColor: \"#3F7CAC\"}}>Enter Exam</Button>\r\n            </Link>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  else\r\n    return (\r\n      <div className=\"timer-container\">\r\n        <ul>\r\n          <li>\r\n            <span id=\"days\">{timerDays}</span> Days\r\n          </li>\r\n          <li>\r\n            <span id=\"hours\">{timerHours}</span> Hours\r\n          </li>\r\n          <li>\r\n            <span id=\"minutes\">{timerMinutes}</span> Minutes\r\n          </li>\r\n          <li>\r\n            <span id=\"seconds\">{timerSeconds}</span> Seconds\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Timer;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\MarkSheet.js",["247","248"],"import React from \"react\";\r\nimport {  Container } from \"react-bootstrap\";\r\n\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nconst MarkSheet = (props) => {\r\n  const mcqExamsData = props.mcqExamsData;\r\n  const cqExamsData = props.cqExamsData;\r\n\r\n  let tableBody;\r\n  let x = 1;\r\n\r\n  if (mcqExamsData) {\r\n    mcqExamsData.sort(function (a, b) {\r\n      return a.mark - b.mark;\r\n    });\r\n\r\n    console.log(\"Exam Data\", mcqExamsData);\r\n\r\n    tableBody = mcqExamsData.map((data) => {\r\n      console.log(data);\r\n      return (\r\n        <>\r\n          <tr>\r\n            <td>{x++}</td>\r\n            <td>\r\n              <span class=\"crown badge\" style={{ fontSize: \"20px\" }}>\r\n                {x == 2 ? \"👑\" : \"\"}\r\n              </span>\r\n              {`${data.student.firstName ? data.student.firstName : \"\"} ${\r\n                data.student.lastName ? data.student.lastName : \"\"\r\n              } ${data.student.username}`}\r\n            </td>\r\n            <td>{data.student.registrationNo}</td>\r\n\r\n            <td>\r\n              <a href={`mailto: ${data.student.email}`}>{data.student.email}</a>\r\n            </td>\r\n            <td>{data.solved}</td>\r\n            <td>{data.wrong}</td>\r\n            <td>{data.mark}</td>\r\n            <td>\r\n              <a href={`${data.student._id}`}>View</a>\r\n            </td>\r\n          </tr>\r\n        </>\r\n      );\r\n    });\r\n  } else if (cqExamsData) {\r\n    cqExamsData.sort(function (a, b) {\r\n      return a.mark - b.mark;\r\n    });\r\n\r\n    console.log(\"Exam Data\", cqExamsData);\r\n\r\n    tableBody = cqExamsData.map((data) => {\r\n      console.log(data);\r\n      return (\r\n        <>\r\n          <tr>\r\n            <td>{x++}</td>\r\n            <td>\r\n              <span class=\"crown badge\" style={{ fontSize: \"20px\" }}>\r\n                {x == 2 ? \"👑\" : \"\"}\r\n              </span>\r\n              {`${data.student.firstName ? data.student.firstName : \"\"} ${\r\n                data.student.lastName ? data.student.lastName : \"\"\r\n              } ${data.student.username}`}\r\n            </td>\r\n            <td>{data.student.registrationNo}</td>\r\n\r\n            <td>\r\n              <a href={`mailto: ${data.student.email}`}>{data.student.email}</a>\r\n            </td>\r\n            <td>{data.totalMarks}</td>\r\n            <td>{data.wrong}</td>\r\n            <td>{data.mark}</td>\r\n            <td>\r\n              <a href={`/examine/${data.cqExam._id}`}>View</a>\r\n            </td>\r\n          </tr>\r\n        </>\r\n      );\r\n    });\r\n  }\r\n\r\n  if (mcqExamsData || cqExamsData)\r\n    return (\r\n      <table\r\n        className=\"table table-hover table-striped table-light\"\r\n        style={{ textAlign: \"center\" }}\r\n      >\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Name</th>\r\n            <th>Registration No</th>\r\n            <th>Email</th>\r\n            <th>Solved</th>\r\n            <th>Wrong</th>\r\n            <th>Mark</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>{tableBody}</tbody>\r\n      </table>\r\n    );\r\n  else\r\n    return (\r\n      <Container>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <Alert variant=\"warning\">No Participants</Alert>\r\n        </div>\r\n      </Container>\r\n    );\r\n};\r\n\r\nexport default MarkSheet;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Exams.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Students.js",["249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268"],"import React from \"react\";\r\nimport { Col, Container, Row, Card, Alert, Table } from \"react-bootstrap\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { Box, CardContent, MenuList, Typography } from \"@material-ui/core\";\r\n\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  Spinner,\r\n  Jumbotron,\r\n  Tab,\r\n  TabContainer,\r\n  ListGroup,\r\n  TabContent,\r\n  TabPane,\r\n} from \"react-bootstrap\";\r\n\r\nconst Students = (props) => {\r\n  console.log(props.userInfo);\r\n  console.log(props.courseData);\r\n\r\n  let x = 1;\r\n  const tableBody = props.courseData.students.map((students) => {\r\n    return (\r\n      <>\r\n        <tr>\r\n          <td>{x++}</td>\r\n          {/* <td> */}\r\n          {/* <span class=\"crown badge\" style={{ fontSize: \"20px\" }}>\r\n              {x == 2 ? \"👑\" : \"\"}\r\n            </span> */}\r\n          {/* {students.student} */}\r\n          {/* </td> */}\r\n          {/*   <td>{exam.examType}</td>\r\n          <td>{exam.totalMarks}</td>\r\n          <td>{`${Math.round(exam.totalTime / 60)} min : ${\r\n            exam.totalTime % 60\r\n          } sec`}</td>\r\n          <td>{exam.when}</td>\r\n          <td>{exam.date.toString()}</td>\r\n          {props.userInfo.role === \"Teacher\" ? (\r\n            <td>\r\n              <Button href={`/profile/${tudents.student}`} variant=\"primary\">\r\n                Examine\r\n              </Button>\r\n            </td>\r\n          ) : (\r\n            null\r\n          )} */}\r\n\r\n          <td>\r\n            <Button href={`/profile/${students.student}`} variant=\"primary\">\r\n              Examine\r\n            </Button>\r\n          </td>\r\n\r\n          {/* <td>\r\n            <Button href={`/${exam.when}-exam/${exam._id}`} variant=\"info\">\r\n              View\r\n            </Button>\r\n          </td> */}\r\n        </tr>\r\n      </>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <table\r\n      className=\"table table-hover table-striped table-light\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <thead className=\"thead-dark\">\r\n        <tr>\r\n          <th>#</th>\r\n          {/* <th>Exam Name</th>\r\n          <th>Exam Type</th>\r\n          <th>Total Marks</th>\r\n          <th>Total Time</th>\r\n\r\n          <th>Condition</th>\r\n          <th>Date</th>\r\n          {props.userInfo.role === \"Teacher\" ? <th>Check</th> : null} */}\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>{tableBody}</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Students;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\ExamType.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\LiveExam\\Result.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\CreateExam.js",["269"],"import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Tabs } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { Toast } from \"react-bootstrap\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Question from \"./Question\";\r\nimport \"./CreateExam.scss\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default class CreateCourse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  questionIDs = [];\r\n  newTabIndex = 0;\r\n  quesNo = 2;\r\n  totalMarks = 0;\r\n  totalTime = 0;\r\n\r\n  addQuestion = (id, marks, time) => {\r\n    this.setState({\r\n      showToast: true,\r\n      examCreateMessage: \"Question Created Successfully\",\r\n    });\r\n\r\n    this.totalMarks += parseInt(marks, 10);\r\n    this.totalTime += time;\r\n\r\n    if (this.props.examType === \"CQ\")\r\n      this.questionIDs.push({\r\n        cqQuestionId: id,\r\n      });\r\n    else {\r\n      this.questionIDs.push({\r\n        mcqQuestionId: id,\r\n      });\r\n    }\r\n\r\n    console.log(\"mcq Question Id !\", id);\r\n    console.log(\"Mark !\", this.totalMarks);\r\n    console.log(\"Time!\", this.totalTime);\r\n  };\r\n\r\n  createExam = (date, examName) => {\r\n    console.log(\"Date \", date);\r\n    console.log(\"Name \", examName);\r\n\r\n    let data;\r\n\r\n    if (this.props.examType === \"CQ\")\r\n      data = JSON.stringify({\r\n        course: this.props.courseData._id,\r\n        cqQuestions: this.questionIDs,\r\n        totalTime: this.totalTime,\r\n        totalMarks: this.totalMarks,\r\n        date: date,\r\n        name: examName,\r\n      });\r\n    else\r\n      data = JSON.stringify({\r\n        course: this.props.courseData._id,\r\n        mcqQuestions: this.questionIDs,\r\n        totalTime: this.totalTime,\r\n        totalMarks: this.totalMarks,\r\n        date: date,\r\n        name: examName,\r\n      });\r\n\r\n    axios({\r\n      method: \"POST\",\r\n      url: `teacher/exam/${this.props.examType === \"CQ\" ? \"cq\" : \"mcq\"}/create`,\r\n\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n\r\n      data: data,\r\n    })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status === \"OK\") {\r\n          this.setState({\r\n            showToast: true,\r\n            examCreateMessage: \"Exam Created Successfully\",\r\n          });\r\n        } else\r\n          this.setState({\r\n            showToast: true,\r\n            examCreateMessage: \"Exam Created Successfully\",\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        this.setState({\r\n          showToast: true,\r\n          examCreateMessage: \"Something Went Wrong!\",\r\n        });\r\n      });\r\n  };\r\n\r\n  initialPanes = [\r\n    {\r\n      title: \"Question 1\",\r\n      content: (\r\n        <Question\r\n          onAdd={this.addQuestion}\r\n          createExam={this.createExam}\r\n          totalMarks={this.totalMarks}\r\n          totalTime={this.totalTime}\r\n          examType={this.props.examType}\r\n        />\r\n      ),\r\n      key: \"1\",\r\n      closable: false,\r\n    },\r\n  ];\r\n\r\n  state = {\r\n    activeKey: this.initialPanes[0].key,\r\n    panes: this.initialPanes,\r\n    showToast: false,\r\n    examCreateMessage: null,\r\n    create: true,\r\n  };\r\n\r\n  onChange = (activeKey) => {\r\n    this.setState({ activeKey });\r\n  };\r\n\r\n  onEdit = (targetKey, action) => {\r\n    this[action](targetKey);\r\n  };\r\n\r\n  add = () => {\r\n    const { panes } = this.state;\r\n    const activeKey = `question${this.newTabIndex++}`;\r\n    const newPanes = [...panes];\r\n    newPanes.push({\r\n      title: `Question ${this.quesNo++}`,\r\n      content: (\r\n        <Question\r\n          onAdd={this.addQuestion}\r\n          createExam={this.createExam}\r\n          totalMarks={this.totalMarks}\r\n          totalTime={this.totalTime}\r\n          examType={this.props.examType}\r\n        />\r\n      ),\r\n      key: activeKey,\r\n    });\r\n    this.setState({\r\n      panes: newPanes,\r\n      activeKey,\r\n    });\r\n  };\r\n\r\n  remove = (targetKey) => {\r\n    const { panes, activeKey } = this.state;\r\n    let newActiveKey = activeKey;\r\n    let lastIndex;\r\n    panes.forEach((pane, i) => {\r\n      if (pane.key === targetKey) {\r\n        lastIndex = i - 1;\r\n      }\r\n    });\r\n    const newPanes = panes.filter((pane) => pane.key !== targetKey);\r\n    if (newPanes.length && newActiveKey === targetKey) {\r\n      if (lastIndex >= 0) {\r\n        newActiveKey = newPanes[lastIndex].key;\r\n      } else {\r\n        newActiveKey = newPanes[0].key;\r\n      }\r\n    }\r\n    this.setState({\r\n      panes: newPanes,\r\n      activeKey: newActiveKey,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { panes, activeKey } = this.state;\r\n    return (\r\n      <Container fluid className=\"justify-content-center\">\r\n        <Toast\r\n          autohide\r\n          className=\"toast-modify\"\r\n          onClose={() => this.setState({ showToast: false })}\r\n          show={this.state.showToast}\r\n        >\r\n          <Toast.Header>\r\n            <img\r\n              src=\"holder.js/20x20?text=%20\"\r\n              className=\"rounded mr-2\"\r\n              alt=\"\"\r\n            />\r\n            <strong className=\"mr-auto\">Create Message</strong>\r\n            <small>just now</small>\r\n          </Toast.Header>\r\n          <Toast.Body>{this.state.examCreateMessage}</Toast.Body>\r\n        </Toast>\r\n        <Tabs\r\n          type=\"editable-card\"\r\n          onChange={this.onChange}\r\n          activeKey={activeKey}\r\n          onEdit={this.onEdit}\r\n        >\r\n          {panes.map((pane) => (\r\n            <TabPane tab={pane.title} key={pane.key} closable={pane.closable}>\r\n              {pane.content}\r\n            </TabPane>\r\n          ))}\r\n        </Tabs>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\Question.js",["270"],"import React, { useState } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Forms from \"../../Generic/Forms\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport axios from \"axios\";\r\nimport { Toast } from \"react-bootstrap\";\r\nimport \"./CreateExam.scss\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  textField: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  leftTextField: {\r\n    marginTop: theme.spacing(6),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    width: \"100%\",\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(10),\r\n    // backgroundColor: '#3F7CAC',\r\n  },\r\n}));\r\n\r\nconst leftStyles = makeStyles((theme) => ({\r\n  textField: {\r\n    marginTop: theme.spacing(3.5),\r\n  },\r\n  timeField: {\r\n    marginTop: theme.spacing(2.9),\r\n  },\r\n}));\r\n\r\nexport default function Question(props) {\r\n  const classes = useStyles();\r\n  const leftClasses = leftStyles();\r\n\r\n  let questionsCreated = 0;\r\n\r\n  const [values, setValues] = useState({\r\n    description: \"\",\r\n    question: null,\r\n    optA: null,\r\n    optB: null,\r\n    optC: null,\r\n    optD: null,\r\n    ans: null,\r\n    marks: null,\r\n    min: null,\r\n    sec: null,\r\n    date: Date.now(),\r\n    name: null,\r\n  });\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const [questionEditDisable, setQuestionEditDisable] = useState(false);\r\n\r\n  const [showToast, setShowToast] = useState(false);\r\n\r\n  console.log(\"questionEditDisable\", questionEditDisable);\r\n\r\n  const handleClickOpen = () => {\r\n    if (\r\n      (values.question &&\r\n        values.optA &&\r\n        values.optB &&\r\n        values.optC &&\r\n        values.optD &&\r\n        values.ans &&\r\n        values.marks &&\r\n        values.min &&\r\n        values.sec) ||\r\n      (values.question && values.marks && values.min && values.sec)\r\n    ) {\r\n      setOpen(true);\r\n    } else {\r\n      setShowToast(true);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const createExam = () => {\r\n    console.log(values.name);\r\n    if (values.name) {\r\n      props.createExam(values.date, values.name);\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    console.log(\"Triggered\", event.target.value);\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleQuestionAdd = (id) => {\r\n    props.onAdd(\r\n      id,\r\n      values.marks,\r\n      parseInt(values.min, 10) * 60 + parseInt(values.sec, 10)\r\n    );\r\n  };\r\n\r\n  function sendQuestion(e) {\r\n    e.preventDefault();\r\n\r\n    console.log(\"Form Values \", values);\r\n\r\n    axios({\r\n      method: \"POST\",\r\n      url: `teacher/question/${props.examType === \"CQ\" ? \"cq\" : \"mcq\"}/create`,\r\n\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      data: JSON.stringify({\r\n        description: values.description,\r\n        mainQuestion: values.question,\r\n        options: [\r\n          {\r\n            option: values.optA,\r\n          },\r\n          {\r\n            option: values.optB,\r\n          },\r\n          {\r\n            option: values.optC,\r\n          },\r\n          {\r\n            option: values.optD,\r\n          },\r\n        ],\r\n        correctAnswers: [\r\n          {\r\n            answer:\r\n              values.ans === \"A\"\r\n                ? values.optA\r\n                : values.ans === \"B\"\r\n                ? values.optB\r\n                : values.ans === \"C\"\r\n                ? values.optC\r\n                : values.optD,\r\n          },\r\n        ],\r\n        time: parseInt(values.min, 10) * 60 + parseInt(values.sec, 10),\r\n        marks: parseInt(values.marks, 10),\r\n      }),\r\n    })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status === \"OK\") {\r\n          handleQuestionAdd(response.data.result.data._id);\r\n          setQuestionEditDisable(true);\r\n          questionsCreated++;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  const mcq = (\r\n    <Row>\r\n      <Col xs={12} lg={6}>\r\n        <Col lg={12}>\r\n          <Row className=\"justify-content-flex-start\">\r\n            <Col xs={12}>\r\n              <Forms\r\n                id=\"description\"\r\n                type=\"textField\"\r\n                label=\"Description\"\r\n                labelWidth={80}\r\n                values={values.description}\r\n                handleChange={handleChange}\r\n                rows={4}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"justify-content-flex-start\">\r\n            <Col xs={12}>\r\n              <Forms\r\n                id=\"question\"\r\n                type=\"textField\"\r\n                label=\"Question\"\r\n                labelWidth={75}\r\n                values={values.question}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                rows={3}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"justify-content-flex-start\">\r\n            <Col xs={6}>\r\n              <Forms\r\n                id=\"optA\"\r\n                type=\"text\"\r\n                label=\"Option A\"\r\n                labelWidth={75}\r\n                values={values.optA}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n            <Col xs={6}>\r\n              <Forms\r\n                id=\"optB\"\r\n                type=\"text\"\r\n                label=\"Option B\"\r\n                labelWidth={75}\r\n                values={values.optB}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"justify-content-flex-start\">\r\n            <Col xs={6}>\r\n              <Forms\r\n                id=\"optC\"\r\n                type=\"text\"\r\n                label=\"Option C\"\r\n                labelWidth={75}\r\n                values={values.optC}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n            <Col xs={6}>\r\n              <Forms\r\n                id=\"optD\"\r\n                type=\"text\"\r\n                label=\"Option D\"\r\n                labelWidth={75}\r\n                values={values.optD}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Col>\r\n      <Col>\r\n        <Row className=\"justify-content-flex-start\">\r\n          <Col>\r\n            <FormControl\r\n              component=\"fieldset\"\r\n              className={classes.textField}\r\n              required\r\n            >\r\n              <FormLabel component=\"legend\">Select Correct Ans</FormLabel>\r\n              <RadioGroup\r\n                aria-label=\"ans\"\r\n                name=\"ans\"\r\n                value={values.ans}\r\n                onChange={handleChange(\"ans\")}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"A\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label=\"A\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"B\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label=\"B\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"C\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label=\"C\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"D\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label=\"D\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={4}>\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Marks\"\r\n              variant=\"outlined\"\r\n              value={values.marks}\r\n              onChange={handleChange(\"marks\")}\r\n              className={leftClasses.textField}\r\n              required\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-flex-start\">\r\n          <Col xs={4}>\r\n            <TextField\r\n              id=\"min\"\r\n              type=\"number\"\r\n              placeholder=\"00\"\r\n              label=\"Minutes\"\r\n              variant=\"outlined\"\r\n              value={values.min}\r\n              onChange={handleChange(\"min\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n          <Col xs={4}>\r\n            <TextField\r\n              id=\"sec\"\r\n              min=\"0\"\r\n              type=\"number\"\r\n              max=\"59\"\r\n              placeholder=\"00\"\r\n              label=\"Seconds\"\r\n              variant=\"outlined\"\r\n              value={values.sec}\r\n              onChange={handleChange(\"sec\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n  const cq = (\r\n    <Row className=\"justify-content-center\">\r\n      <Col xs={12} lg={6}>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <Forms\r\n              id=\"description\"\r\n              type=\"textField\"\r\n              label=\"Description\"\r\n              labelWidth={80}\r\n              values={values.description}\r\n              handleChange={handleChange}\r\n              rows={4}\r\n              classes={classes}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <Forms\r\n              id=\"question\"\r\n              type=\"textField\"\r\n              label=\"Question\"\r\n              labelWidth={75}\r\n              values={values.question}\r\n              handleChange={handleChange}\r\n              required={true}\r\n              rows={4}\r\n              classes={classes}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={12} sm={12} md={4}>\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Marks\"\r\n              variant=\"outlined\"\r\n              value={values.marks}\r\n              onChange={handleChange(\"marks\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n          <Col xs={12} sm={6} md={4}>\r\n            <TextField\r\n              id=\"min\"\r\n              type=\"number\"\r\n              placeholder=\"00\"\r\n              label=\"Minutes\"\r\n              variant=\"outlined\"\r\n              value={values.min}\r\n              onChange={handleChange(\"min\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n          <Col xs={12} sm={6} md={4}>\r\n            <TextField\r\n              id=\"sec\"\r\n              min=\"0\"\r\n              type=\"number\"\r\n              max=\"59\"\r\n              placeholder=\"00\"\r\n              label=\"Seconds\"\r\n              variant=\"outlined\"\r\n              value={values.sec}\r\n              onChange={handleChange(\"sec\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n  console.log(props.examType, \"exam type\");\r\n  return (\r\n    <Container fluid className=\"justify-content-flex-start\">\r\n      <Toast\r\n        className=\"toast-modify\"\r\n        autohide\r\n        onClose={() => setShowToast(false)}\r\n        show={showToast}\r\n      >\r\n        <Toast.Header>\r\n          <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\r\n          <strong className=\"mr-auto\">Alert Message</strong>\r\n          <small>just now</small>\r\n        </Toast.Header>\r\n        <Toast.Body>You Have To Create At Least One Question!</Toast.Body>\r\n      </Toast>\r\n      <Row className=\"justify-content-center\">\r\n        <Col xs=\"auto\">\r\n          <h3>Create Your Question Here</h3>\r\n        </Col>\r\n      </Row>\r\n      <form onSubmit={sendQuestion}>\r\n        {props.examType === \"CQ\" ? cq : mcq}\r\n        <Row className=\"justify-content-center\">\r\n          <ButtonGroup size=\"large\" color=\"primary\">\r\n            <Button\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              startIcon={<EditIcon />}\r\n            >\r\n              Edit\r\n            </Button>\r\n            <Button\r\n              disabled={questionEditDisable}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              startIcon={<SaveIcon />}\r\n              type=\"submit\"\r\n            >\r\n              Save\r\n            </Button>\r\n            <Button\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              startIcon={<LockIcon />}\r\n              onClick={handleClickOpen}\r\n            >\r\n              Lock Exam\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Row>\r\n      </form>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Lock This Exam</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            id=\"exam-name\"\r\n            type=\"text\"\r\n            label=\"Exam Name\"\r\n            value={values.name}\r\n            onChange={handleChange(\"name\")}\r\n            required={true}\r\n            classes={classes.textField}\r\n          />\r\n\r\n          <br />\r\n          <br />\r\n\r\n          <TextField\r\n            id=\"datetime-local\"\r\n            label=\"Schedule Exam\"\r\n            type=\"datetime-local\"\r\n            value={values.date}\r\n            onChange={handleChange(\"date\")}\r\n            defaultValue=\"2021-05-01T10:30\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n          <DialogContentText>\r\n            <br />\r\n            Total Marks: {props.totalMarks}\r\n            <br />\r\n            Total Time: {props.totalTime}\r\n            <br />\r\n            <br />\r\n            By clicking confirm this exam will be created as schedule.\r\n            <br />\r\n            <br />\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={createExam} color=\"primary\">\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Teacher.js",["271"],"import React from 'react';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport default function(props) {\r\n    const name = `${props.userInfo.firstName} ${props.userInfo.lastName}`\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <h1>Teacher Info</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Name</h5>\r\n          </Col>\r\n          <Col>\r\n            <h5>{name}</h5>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n        <Col>\r\n            <h5>Department</h5>\r\n          </Col>\r\n          <Col>\r\n            <h5>{props.userInfo.department}</h5>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>University</h5>\r\n          </Col>\r\n          <Col>\r\n            <h5>{props.userInfo.varsity}</h5>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n}","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Info.js",["272"],"import React from 'react';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport default function(props) {\r\n    const name = props.courseData.name;\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <h1>Course Info</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Name</h5>\r\n          </Col>\r\n          <Col>\r\n            <h5>{name}</h5>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n        <Col>\r\n            <h5>Department</h5>\r\n          </Col>\r\n          <Col>\r\n            <h5>{props.userInfo.department}</h5>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>University</h5>\r\n          </Col>\r\n          <Col>\r\n            <h5>{props.userInfo.varsity}</h5>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n}","E:\\Project 350\\WillChange\\client\\src\\Components\\Notifications\\Notification.js",["273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288"],{"ruleId":"289","severity":1,"message":"290","line":4,"column":8,"nodeType":"291","messageId":"292","endLine":4,"endColumn":22},{"ruleId":"289","severity":1,"message":"293","line":11,"column":8,"nodeType":"291","messageId":"292","endLine":11,"endColumn":14},{"ruleId":"289","severity":1,"message":"294","line":32,"column":9,"nodeType":"291","messageId":"292","endLine":32,"endColumn":17},{"ruleId":"289","severity":1,"message":"295","line":36,"column":7,"nodeType":"291","messageId":"292","endLine":36,"endColumn":16},{"ruleId":"289","severity":1,"message":"296","line":60,"column":9,"nodeType":"291","messageId":"292","endLine":60,"endColumn":26},{"ruleId":"297","replacedBy":"298"},{"ruleId":"299","replacedBy":"300"},{"ruleId":"289","severity":1,"message":"301","line":32,"column":10,"nodeType":"291","messageId":"292","endLine":32,"endColumn":18},{"ruleId":"289","severity":1,"message":"302","line":32,"column":20,"nodeType":"291","messageId":"292","endLine":32,"endColumn":31},{"ruleId":"289","severity":1,"message":"295","line":36,"column":7,"nodeType":"291","messageId":"292","endLine":36,"endColumn":16},{"ruleId":"289","severity":1,"message":"303","line":40,"column":23,"nodeType":"291","messageId":"292","endLine":40,"endColumn":37},{"ruleId":"304","severity":1,"message":"305","line":55,"column":16,"nodeType":"306","endLine":55,"endColumn":44},{"ruleId":"289","severity":1,"message":"307","line":61,"column":11,"nodeType":"291","messageId":"292","endLine":61,"endColumn":17},{"ruleId":"289","severity":1,"message":"308","line":99,"column":9,"nodeType":"291","messageId":"292","endLine":99,"endColumn":19},{"ruleId":"309","severity":1,"message":"310","line":179,"column":43,"nodeType":"311","endLine":179,"endColumn":66},{"ruleId":"289","severity":1,"message":"312","line":184,"column":7,"nodeType":"291","messageId":"292","endLine":184,"endColumn":8},{"ruleId":"289","severity":1,"message":"313","line":186,"column":5,"nodeType":"291","messageId":"292","endLine":186,"endColumn":20},{"ruleId":"314","severity":1,"message":"315","line":186,"column":42,"nodeType":"316","messageId":"317","endLine":186,"endColumn":44},{"ruleId":"318","severity":1,"message":"319","line":261,"column":32,"nodeType":"320","messageId":"321","endLine":261,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":324,"column":15,"nodeType":"311","endLine":324,"endColumn":36},{"ruleId":"322","severity":1,"message":"323","line":28,"column":3,"nodeType":"324","messageId":"321","endLine":28,"endColumn":7},{"ruleId":"325","severity":1,"message":"326","line":122,"column":30,"nodeType":"327","messageId":"328","endLine":122,"endColumn":52,"fix":"329"},{"ruleId":"325","severity":1,"message":"326","line":124,"column":30,"nodeType":"327","messageId":"328","endLine":124,"endColumn":43,"fix":"330"},{"ruleId":"289","severity":1,"message":"331","line":2,"column":17,"nodeType":"291","messageId":"292","endLine":2,"endColumn":23},{"ruleId":"304","severity":1,"message":"332","line":30,"column":6,"nodeType":"333","endLine":30,"endColumn":8,"suggestions":"334"},{"ruleId":"289","severity":1,"message":"335","line":3,"column":8,"nodeType":"291","messageId":"292","endLine":3,"endColumn":17},{"ruleId":"322","severity":1,"message":"323","line":27,"column":3,"nodeType":"324","messageId":"321","endLine":27,"endColumn":7},{"ruleId":"304","severity":1,"message":"305","line":40,"column":16,"nodeType":"306","endLine":40,"endColumn":44},{"ruleId":"289","severity":1,"message":"336","line":10,"column":8,"nodeType":"291","messageId":"292","endLine":10,"endColumn":25},{"ruleId":"289","severity":1,"message":"337","line":19,"column":10,"nodeType":"291","messageId":"292","endLine":19,"endColumn":24},{"ruleId":"289","severity":1,"message":"338","line":41,"column":9,"nodeType":"291","messageId":"292","endLine":41,"endColumn":16},{"ruleId":"289","severity":1,"message":"339","line":138,"column":15,"nodeType":"291","messageId":"292","endLine":138,"endColumn":22},{"ruleId":"304","severity":1,"message":"340","line":152,"column":6,"nodeType":"333","endLine":152,"endColumn":8,"suggestions":"341"},{"ruleId":"342","severity":1,"message":"343","line":426,"column":23,"nodeType":"344","endLine":426,"endColumn":55},{"ruleId":"289","severity":1,"message":"345","line":1,"column":27,"nodeType":"291","messageId":"292","endLine":1,"endColumn":36},{"ruleId":"289","severity":1,"message":"346","line":2,"column":26,"nodeType":"291","messageId":"292","endLine":2,"endColumn":35},{"ruleId":"322","severity":1,"message":"323","line":45,"column":3,"nodeType":"324","messageId":"321","endLine":45,"endColumn":7},{"ruleId":"289","severity":1,"message":"347","line":64,"column":10,"nodeType":"291","messageId":"292","endLine":64,"endColumn":22},{"ruleId":"289","severity":1,"message":"348","line":64,"column":24,"nodeType":"291","messageId":"292","endLine":64,"endColumn":39},{"ruleId":"289","severity":1,"message":"349","line":99,"column":7,"nodeType":"291","messageId":"292","endLine":99,"endColumn":11},{"ruleId":"289","severity":1,"message":"350","line":117,"column":10,"nodeType":"291","messageId":"292","endLine":117,"endColumn":23},{"ruleId":"289","severity":1,"message":"351","line":117,"column":25,"nodeType":"291","messageId":"292","endLine":117,"endColumn":41},{"ruleId":"289","severity":1,"message":"352","line":119,"column":10,"nodeType":"291","messageId":"292","endLine":119,"endColumn":21},{"ruleId":"289","severity":1,"message":"353","line":295,"column":11,"nodeType":"291","messageId":"292","endLine":295,"endColumn":24},{"ruleId":"314","severity":1,"message":"315","line":348,"column":51,"nodeType":"316","messageId":"317","endLine":348,"endColumn":53},{"ruleId":"318","severity":1,"message":"354","line":349,"column":15,"nodeType":"320","messageId":"321","endLine":349,"endColumn":17},{"ruleId":"289","severity":1,"message":"355","line":4,"column":3,"nodeType":"291","messageId":"292","endLine":4,"endColumn":9},{"ruleId":"289","severity":1,"message":"356","line":8,"column":3,"nodeType":"291","messageId":"292","endLine":8,"endColumn":8},{"ruleId":"289","severity":1,"message":"357","line":10,"column":3,"nodeType":"291","messageId":"292","endLine":10,"endColumn":10},{"ruleId":"289","severity":1,"message":"335","line":13,"column":3,"nodeType":"291","messageId":"292","endLine":13,"endColumn":12},{"ruleId":"289","severity":1,"message":"358","line":16,"column":3,"nodeType":"291","messageId":"292","endLine":16,"endColumn":15},{"ruleId":"289","severity":1,"message":"359","line":18,"column":3,"nodeType":"291","messageId":"292","endLine":18,"endColumn":13},{"ruleId":"289","severity":1,"message":"360","line":19,"column":3,"nodeType":"291","messageId":"292","endLine":19,"endColumn":10},{"ruleId":"289","severity":1,"message":"361","line":31,"column":8,"nodeType":"291","messageId":"292","endLine":31,"endColumn":24},{"ruleId":"318","severity":1,"message":"319","line":92,"column":34,"nodeType":"320","messageId":"321","endLine":92,"endColumn":36},{"ruleId":"318","severity":1,"message":"319","line":117,"column":34,"nodeType":"320","messageId":"321","endLine":117,"endColumn":36},{"ruleId":"304","severity":1,"message":"362","line":133,"column":6,"nodeType":"333","endLine":133,"endColumn":8,"suggestions":"363"},{"ruleId":"289","severity":1,"message":"355","line":4,"column":3,"nodeType":"291","messageId":"292","endLine":4,"endColumn":9},{"ruleId":"289","severity":1,"message":"356","line":8,"column":3,"nodeType":"291","messageId":"292","endLine":8,"endColumn":8},{"ruleId":"289","severity":1,"message":"357","line":10,"column":3,"nodeType":"291","messageId":"292","endLine":10,"endColumn":10},{"ruleId":"289","severity":1,"message":"335","line":13,"column":3,"nodeType":"291","messageId":"292","endLine":13,"endColumn":12},{"ruleId":"289","severity":1,"message":"364","line":15,"column":3,"nodeType":"291","messageId":"292","endLine":15,"endColumn":6},{"ruleId":"289","severity":1,"message":"358","line":16,"column":3,"nodeType":"291","messageId":"292","endLine":16,"endColumn":15},{"ruleId":"289","severity":1,"message":"365","line":17,"column":3,"nodeType":"291","messageId":"292","endLine":17,"endColumn":12},{"ruleId":"289","severity":1,"message":"359","line":18,"column":3,"nodeType":"291","messageId":"292","endLine":18,"endColumn":13},{"ruleId":"289","severity":1,"message":"360","line":19,"column":3,"nodeType":"291","messageId":"292","endLine":19,"endColumn":10},{"ruleId":"289","severity":1,"message":"366","line":26,"column":8,"nodeType":"291","messageId":"292","endLine":26,"endColumn":17},{"ruleId":"289","severity":1,"message":"367","line":28,"column":8,"nodeType":"291","messageId":"292","endLine":28,"endColumn":16},{"ruleId":"289","severity":1,"message":"361","line":31,"column":8,"nodeType":"291","messageId":"292","endLine":31,"endColumn":24},{"ruleId":"289","severity":1,"message":"368","line":36,"column":3,"nodeType":"291","messageId":"292","endLine":36,"endColumn":11},{"ruleId":"289","severity":1,"message":"369","line":41,"column":8,"nodeType":"291","messageId":"292","endLine":41,"endColumn":16},{"ruleId":"289","severity":1,"message":"370","line":76,"column":3,"nodeType":"291","messageId":"292","endLine":76,"endColumn":7},{"ruleId":"289","severity":1,"message":"371","line":90,"column":9,"nodeType":"291","messageId":"292","endLine":90,"endColumn":17},{"ruleId":"318","severity":1,"message":"319","line":97,"column":34,"nodeType":"320","messageId":"321","endLine":97,"endColumn":36},{"ruleId":"304","severity":1,"message":"332","line":112,"column":6,"nodeType":"333","endLine":112,"endColumn":8,"suggestions":"372"},{"ruleId":"314","severity":1,"message":"373","line":40,"column":35,"nodeType":"316","messageId":"374","endLine":40,"endColumn":37},{"ruleId":"314","severity":1,"message":"373","line":42,"column":40,"nodeType":"316","messageId":"374","endLine":42,"endColumn":42},{"ruleId":"318","severity":1,"message":"319","line":44,"column":29,"nodeType":"320","messageId":"321","endLine":44,"endColumn":31},{"ruleId":"314","severity":1,"message":"373","line":49,"column":41,"nodeType":"316","messageId":"374","endLine":49,"endColumn":43},{"ruleId":"318","severity":1,"message":"319","line":51,"column":29,"nodeType":"320","messageId":"321","endLine":51,"endColumn":31},{"ruleId":"289","severity":1,"message":"331","line":1,"column":17,"nodeType":"291","messageId":"292","endLine":1,"endColumn":23},{"ruleId":"289","severity":1,"message":"375","line":15,"column":3,"nodeType":"291","messageId":"292","endLine":15,"endColumn":7},{"ruleId":"289","severity":1,"message":"367","line":16,"column":3,"nodeType":"291","messageId":"292","endLine":16,"endColumn":11},{"ruleId":"289","severity":1,"message":"338","line":45,"column":9,"nodeType":"291","messageId":"292","endLine":45,"endColumn":16},{"ruleId":"304","severity":1,"message":"376","line":53,"column":6,"nodeType":"333","endLine":53,"endColumn":8,"suggestions":"377"},{"ruleId":"289","severity":1,"message":"378","line":97,"column":10,"nodeType":"291","messageId":"292","endLine":97,"endColumn":21},{"ruleId":"289","severity":1,"message":"345","line":1,"column":27,"nodeType":"291","messageId":"292","endLine":1,"endColumn":36},{"ruleId":"289","severity":1,"message":"379","line":33,"column":10,"nodeType":"291","messageId":"292","endLine":33,"endColumn":15},{"ruleId":"289","severity":1,"message":"380","line":35,"column":9,"nodeType":"291","messageId":"292","endLine":35,"endColumn":21},{"ruleId":"289","severity":1,"message":"355","line":7,"column":3,"nodeType":"291","messageId":"292","endLine":7,"endColumn":9},{"ruleId":"289","severity":1,"message":"356","line":8,"column":3,"nodeType":"291","messageId":"292","endLine":8,"endColumn":8},{"ruleId":"289","severity":1,"message":"357","line":10,"column":3,"nodeType":"291","messageId":"292","endLine":10,"endColumn":10},{"ruleId":"289","severity":1,"message":"335","line":11,"column":3,"nodeType":"291","messageId":"292","endLine":11,"endColumn":12},{"ruleId":"289","severity":1,"message":"364","line":12,"column":3,"nodeType":"291","messageId":"292","endLine":12,"endColumn":6},{"ruleId":"289","severity":1,"message":"358","line":13,"column":3,"nodeType":"291","messageId":"292","endLine":13,"endColumn":15},{"ruleId":"289","severity":1,"message":"365","line":14,"column":3,"nodeType":"291","messageId":"292","endLine":14,"endColumn":12},{"ruleId":"289","severity":1,"message":"359","line":15,"column":3,"nodeType":"291","messageId":"292","endLine":15,"endColumn":13},{"ruleId":"289","severity":1,"message":"360","line":16,"column":3,"nodeType":"291","messageId":"292","endLine":16,"endColumn":10},{"ruleId":"289","severity":1,"message":"381","line":2,"column":27,"nodeType":"291","messageId":"292","endLine":2,"endColumn":33},{"ruleId":"304","severity":1,"message":"382","line":42,"column":30,"nodeType":"291","endLine":42,"endColumn":37},{"ruleId":"318","severity":1,"message":"319","line":32,"column":20,"nodeType":"320","messageId":"321","endLine":32,"endColumn":22},{"ruleId":"318","severity":1,"message":"319","line":68,"column":20,"nodeType":"320","messageId":"321","endLine":68,"endColumn":22},{"ruleId":"289","severity":1,"message":"383","line":2,"column":10,"nodeType":"291","messageId":"292","endLine":2,"endColumn":13},{"ruleId":"289","severity":1,"message":"384","line":2,"column":15,"nodeType":"291","messageId":"292","endLine":2,"endColumn":24},{"ruleId":"289","severity":1,"message":"385","line":2,"column":26,"nodeType":"291","messageId":"292","endLine":2,"endColumn":29},{"ruleId":"289","severity":1,"message":"386","line":2,"column":31,"nodeType":"291","messageId":"292","endLine":2,"endColumn":35},{"ruleId":"289","severity":1,"message":"387","line":2,"column":37,"nodeType":"291","messageId":"292","endLine":2,"endColumn":42},{"ruleId":"289","severity":1,"message":"388","line":2,"column":44,"nodeType":"291","messageId":"292","endLine":2,"endColumn":49},{"ruleId":"289","severity":1,"message":"367","line":3,"column":8,"nodeType":"291","messageId":"292","endLine":3,"endColumn":16},{"ruleId":"289","severity":1,"message":"389","line":4,"column":10,"nodeType":"291","messageId":"292","endLine":4,"endColumn":13},{"ruleId":"289","severity":1,"message":"390","line":4,"column":15,"nodeType":"291","messageId":"292","endLine":4,"endColumn":26},{"ruleId":"289","severity":1,"message":"368","line":4,"column":28,"nodeType":"291","messageId":"292","endLine":4,"endColumn":36},{"ruleId":"289","severity":1,"message":"391","line":4,"column":38,"nodeType":"291","messageId":"292","endLine":4,"endColumn":48},{"ruleId":"289","severity":1,"message":"356","line":8,"column":3,"nodeType":"291","messageId":"292","endLine":8,"endColumn":8},{"ruleId":"289","severity":1,"message":"392","line":9,"column":3,"nodeType":"291","messageId":"292","endLine":9,"endColumn":7},{"ruleId":"289","severity":1,"message":"357","line":10,"column":3,"nodeType":"291","messageId":"292","endLine":10,"endColumn":10},{"ruleId":"289","severity":1,"message":"335","line":11,"column":3,"nodeType":"291","messageId":"292","endLine":11,"endColumn":12},{"ruleId":"289","severity":1,"message":"364","line":12,"column":3,"nodeType":"291","messageId":"292","endLine":12,"endColumn":6},{"ruleId":"289","severity":1,"message":"358","line":13,"column":3,"nodeType":"291","messageId":"292","endLine":13,"endColumn":15},{"ruleId":"289","severity":1,"message":"365","line":14,"column":3,"nodeType":"291","messageId":"292","endLine":14,"endColumn":12},{"ruleId":"289","severity":1,"message":"359","line":15,"column":3,"nodeType":"291","messageId":"292","endLine":15,"endColumn":13},{"ruleId":"289","severity":1,"message":"360","line":16,"column":3,"nodeType":"291","messageId":"292","endLine":16,"endColumn":10},{"ruleId":"393","severity":1,"message":"394","line":13,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":4},{"ruleId":"289","severity":1,"message":"397","line":174,"column":11,"nodeType":"291","messageId":"292","endLine":174,"endColumn":27},{"ruleId":"398","severity":1,"message":"399","line":6,"column":1,"nodeType":"400","endLine":41,"endColumn":2},{"ruleId":"398","severity":1,"message":"399","line":6,"column":1,"nodeType":"400","endLine":41,"endColumn":2},{"ruleId":"289","severity":1,"message":"331","line":1,"column":38,"nodeType":"291","messageId":"292","endLine":1,"endColumn":44},{"ruleId":"289","severity":1,"message":"401","line":2,"column":10,"nodeType":"291","messageId":"292","endLine":2,"endColumn":14},{"ruleId":"289","severity":1,"message":"402","line":3,"column":8,"nodeType":"291","messageId":"292","endLine":3,"endColumn":14},{"ruleId":"289","severity":1,"message":"403","line":4,"column":8,"nodeType":"291","messageId":"292","endLine":4,"endColumn":11},{"ruleId":"289","severity":1,"message":"404","line":5,"column":8,"nodeType":"291","messageId":"292","endLine":5,"endColumn":18},{"ruleId":"289","severity":1,"message":"405","line":6,"column":8,"nodeType":"291","messageId":"292","endLine":6,"endColumn":13},{"ruleId":"289","severity":1,"message":"367","line":7,"column":8,"nodeType":"291","messageId":"292","endLine":7,"endColumn":16},{"ruleId":"289","severity":1,"message":"375","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":12},{"ruleId":"289","severity":1,"message":"406","line":9,"column":10,"nodeType":"291","messageId":"292","endLine":9,"endColumn":19},{"ruleId":"289","severity":1,"message":"407","line":10,"column":10,"nodeType":"291","messageId":"292","endLine":10,"endColumn":16},{"ruleId":"289","severity":1,"message":"408","line":11,"column":10,"nodeType":"291","messageId":"292","endLine":11,"endColumn":20},{"ruleId":"289","severity":1,"message":"357","line":12,"column":10,"nodeType":"291","messageId":"292","endLine":12,"endColumn":17},{"ruleId":"289","severity":1,"message":"409","line":15,"column":10,"nodeType":"291","messageId":"292","endLine":15,"endColumn":18},{"ruleId":"289","severity":1,"message":"387","line":16,"column":8,"nodeType":"291","messageId":"292","endLine":16,"endColumn":13},{"ruleId":"289","severity":1,"message":"307","line":25,"column":15,"nodeType":"291","messageId":"292","endLine":25,"endColumn":21},{"ruleId":"314","severity":1,"message":"315","line":88,"column":42,"nodeType":"316","messageId":"317","endLine":88,"endColumn":44},"no-unused-vars","'socketIOClient' is defined but never used.","Identifier","unusedVar","'Layout' is defined but never used.","'ENDPOINT' is assigned a value but never used.","'socketRef' is assigned a value but never used.","'createCourseModal' is assigned a value but never used.","no-native-reassign",["410"],"no-negated-in-lhs",["411"],"'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'setsnackbarMsg' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userdata' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'socket' is assigned a value but never used.","'joinCourse' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'x' is assigned a value but never used.","'notificationsUI' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","no-useless-computed-key","Unnecessarily computed property [\"error\"] found.","Property","unnecessarilyComputedProperty",{"range":"412","text":"413"},{"range":"414","text":"413"},"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["415"],"'Jumbotron' is defined but never used.","'DialogContentText' is defined but never used.","'LinearProgress' is defined but never used.","'classes' is assigned a value but never used.","'timeout' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'index', and 'submitAnswers'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSeconds' needs the current value of 'index'.",["416"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'TextField' is defined but never used.","'snackbarOpen' is assigned a value but never used.","'setSnackbarOpen' is assigned a value but never used.","'days' is assigned a value but never used.","'timerDeadline' is assigned a value but never used.","'setTimerDeadLine' is assigned a value but never used.","'snackbarMsg' is assigned a value but never used.","'reloadHandler' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Button' is defined but never used.","'Modal' is defined but never used.","'Spinner' is defined but never used.","'TabContainer' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'CircularProgress' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'role'. Either include them or remove the dependency array.",["417"],"'Tab' is defined but never used.","'ListGroup' is defined but never used.","'MarkSheet' is defined but never used.","'MenuItem' is defined but never used.","'MenuList' is defined but never used.","'ExamInfo' is defined but never used.","'role' is assigned a value but never used.","'examType' is assigned a value but never used.",["418"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","'Menu' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'props.userInfo'. Either include them or remove the dependency array.",["419"],"'isApiLoaded' is assigned a value but never used.","'value' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Router' is defined but never used.","The ref value 'interval.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'interval.current' to a variable inside the effect, and use that variable in the cleanup function.","'Col' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Card' is defined but never used.","'Alert' is defined but never used.","'Table' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'Form' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'questionsCreated' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Link' is defined but never used.","'Navbar' is defined but never used.","'Nav' is defined but never used.","'IconButton' is defined but never used.","'Badge' is defined but never used.","'FaUserAlt' is defined but never used.","'FaBell' is defined but never used.","'useHistory' is defined but never used.","'Snackbar' is defined but never used.","no-global-assign","no-unsafe-negation",[3094,3103],"\"error\"",[3163,3172],{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"420","fix":"426"},{"desc":"427","fix":"428"},"Update the dependencies array to be: [id]",{"range":"429","text":"430"},"Update the dependencies array to be: [id, index, submitAnswers]",{"range":"431","text":"432"},"Update the dependencies array to be: [id, role]",{"range":"433","text":"434"},{"range":"435","text":"430"},"Update the dependencies array to be: [id, props.userInfo]",{"range":"436","text":"437"},[850,852],"[id]",[4431,4433],"[id, index, submitAnswers]",[3186,3188],"[id, role]",[2184,2186],[1090,1092],"[id, props.userInfo]"]