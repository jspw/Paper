[{"E:\\Project 350\\WillChange\\client\\src\\index.js":"1","E:\\Project 350\\WillChange\\client\\src\\reportWebVitals.js":"2","E:\\Project 350\\WillChange\\client\\src\\Containers\\App.js":"3","E:\\Project 350\\WillChange\\client\\src\\Components\\Layout\\Layout.js":"4","E:\\Project 350\\WillChange\\client\\src\\Components\\Authentication\\SignIn.js":"5","E:\\Project 350\\WillChange\\client\\src\\Components\\Authentication\\SignUp.js":"6","E:\\Project 350\\WillChange\\client\\src\\Components\\Navbar\\Navbar.js":"7","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Course.js":"8","E:\\Project 350\\WillChange\\client\\src\\Components\\Home\\Home.js":"9","E:\\Project 350\\WillChange\\client\\src\\Components\\UpcomingExam\\UpcomingExam.js":"10","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\PreviousExam.js":"11","E:\\Project 350\\WillChange\\client\\src\\Components\\Generic\\Forms.js":"12","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Sidebar.js":"13","E:\\Project 350\\WillChange\\client\\src\\Components\\Timer\\Timer.js":"14","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\MarkSheet.js":"15","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\ExamInfo.js":"16","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\CreateExam.js":"17","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\Question.js":"18","E:\\Project 350\\WillChange\\client\\src\\Components\\LiveExam\\LiveExam.js":"19","E:\\Project 350\\WillChange\\client\\src\\Components\\Exam\\Exam.js":"20","E:\\Project 350\\WillChange\\client\\src\\Components\\LiveExam\\Result.js":"21","E:\\Project 350\\WillChange\\client\\src\\Components\\Generic\\Loader.js":"22","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\ExamType.js":"23","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Students.js":"24","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Exams.js":"25","E:\\Project 350\\WillChange\\client\\src\\Components\\Profile\\Profile.js":"26"},{"size":604,"mtime":1611851509922,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1611586567836,"results":"29","hashOfConfig":"28"},{"size":3787,"mtime":1612999670500,"results":"30","hashOfConfig":"28"},{"size":2812,"mtime":1612912100934,"results":"31","hashOfConfig":"28"},{"size":4305,"mtime":1612648460035,"results":"32","hashOfConfig":"28"},{"size":9510,"mtime":1612632223425,"results":"33","hashOfConfig":"28"},{"size":5331,"mtime":1612999670580,"results":"34","hashOfConfig":"28"},{"size":958,"mtime":1612979418696,"results":"35","hashOfConfig":"28"},{"size":18887,"mtime":1612999670612,"results":"36","hashOfConfig":"28"},{"size":3671,"mtime":1612998009068,"results":"37","hashOfConfig":"28"},{"size":13223,"mtime":1612998071058,"results":"38","hashOfConfig":"28"},{"size":7205,"mtime":1612988760058,"results":"39","hashOfConfig":"28"},{"size":4416,"mtime":1612998842665,"results":"40","hashOfConfig":"28"},{"size":2742,"mtime":1612995531483,"results":"41","hashOfConfig":"28"},{"size":3196,"mtime":1612979418703,"results":"42","hashOfConfig":"28"},{"size":13847,"mtime":1612979418702,"results":"43","hashOfConfig":"28"},{"size":5528,"mtime":1612946971804,"results":"44","hashOfConfig":"28"},{"size":15393,"mtime":1612946971804,"results":"45","hashOfConfig":"28"},{"size":14699,"mtime":1612967091530,"results":"46","hashOfConfig":"28"},{"size":3254,"mtime":1612764301992,"results":"47","hashOfConfig":"28"},{"size":1198,"mtime":1612912215331,"results":"48","hashOfConfig":"28"},{"size":536,"mtime":1612900218747,"results":"49","hashOfConfig":"28"},{"size":2959,"mtime":1612911586010,"results":"50","hashOfConfig":"28"},{"size":2380,"mtime":1612979418700,"results":"51","hashOfConfig":"28"},{"size":4527,"mtime":1612999187372,"results":"52","hashOfConfig":"28"},{"size":7237,"mtime":1612992265070,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1vw26ma",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Project 350\\WillChange\\client\\src\\index.js",[],["119","120"],"E:\\Project 350\\WillChange\\client\\src\\reportWebVitals.js",[],"E:\\Project 350\\WillChange\\client\\src\\Containers\\App.js",["121","122","123","124","125"],"E:\\Project 350\\WillChange\\client\\src\\Components\\Layout\\Layout.js",["126"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Modal,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nconst Layout = (props) => {\r\n  const [showModal, setShowModal] = useState(true);\r\n\r\n  const handleCloseModal = () => setShowModal(false);\r\n  const handleShowModal = () => setShowModal(true);\r\n\r\n  const SelectForm = () => {\r\n    let items = [];\r\n\r\n    if (props.universityInfo) {\r\n      props.universityInfo.forEach((element) => {\r\n        if (element.shortform === props.userInfo.varsity) {\r\n          element.departments.forEach((dept) => {\r\n            // console.log(dept);\r\n            items.push({\r\n              id: dept._id,\r\n              value: dept.shortform,\r\n            });\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    const menuItems = items.map((item, i) => {\r\n      // console.log(items);\r\n      return (\r\n        <MenuItem key={i} value={item.id}>\r\n          {item.value}\r\n        </MenuItem>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <FormControl variant=\"outlined\" fullWidth required>\r\n        <InputLabel>{props.label}</InputLabel>\r\n        <Select value={props.values} label={props.label}>\r\n          <MenuItem disabled>\r\n            <em>{props.label}</em>\r\n          </MenuItem>\r\n          {menuItems}\r\n        </Select>\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  const createCourseModal = (\r\n    <Modal\r\n      show={showModal}\r\n      onHide={handleCloseModal}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Create Course</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form>\r\n          <Row>\r\n            <Col>\r\n              <Form.Control placeholder=\"Course Name\" />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control placeholder=\"Code\" />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Control\r\n                readOnly\r\n                defaultValue={\r\n                  props.userInfo ? props.userInfo.varsity : \"Loading\"\r\n                }\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <SelectForm />\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleCloseModal}>\r\n          Close\r\n        </Button>\r\n        <Button variant=\"primary\">Understood</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <Button onClick={handleShowModal}>Create Course </Button>;\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Authentication\\SignIn.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Authentication\\SignUp.js",["127","128","129"],"import React, { useState } from \"react\";\r\nimport { Container, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Forms from \"../Generic/Forms\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport \"./SignIn.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst apiDomain = \"http://localhost:8080/\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    // margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    // width: \"15vw\",\r\n    // margin: theme.spacing(1),\r\n    paddingRight: theme.spacing(1),\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  shadows: [\"none\"],\r\n}));\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    role: \"\",\r\n    designation: \"\",\r\n    university: \"\",\r\n    department: \"\",\r\n    session: \"\",\r\n    regNo: \"\",\r\n    result: \"\",\r\n    error: \"\",\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"get\",\r\n  //     url: apiDomain + \"university/all\",\r\n  //   })\r\n  //     .then((response) => {\r\n  //       // console.log(\"All Universites..\");\r\n\r\n  //       // console.log(response.data);\r\n\r\n  //       const data = response.data;\r\n\r\n  //       if (data.status === \"OK\") {\r\n  //         setUniversities(data.result.data);\r\n  //       }\r\n  //     })\r\n  //     .catch((error) => console.log(error));\r\n  // }, []);\r\n\r\n  // console.log(\"API CALL DATA\", universities);\r\n  let history = useHistory();\r\n\r\n  const obj = {\r\n    role: values.role,\r\n    username: values.username,\r\n    email: values.email,\r\n    password: values.password,\r\n    repassword: values.confirmPassword,\r\n    firstName: values.firstName,\r\n    lastName: values.lastName,\r\n    department: values.department,\r\n    registrationNo: parseInt(values.regNo, 10),\r\n    session: values.session,\r\n    varsity: values.university,\r\n    designation: values.designation,\r\n  };\r\n\r\n  const body = JSON.stringify(obj);\r\n\r\n  const handleSignUp = (e) => {\r\n    // console.log('hello')\r\n    fetchData();\r\n    e.preventDefault();\r\n  };\r\n  const fetchData = async () => {\r\n    let endpoint;\r\n    if (values.role === \"Teacher\") endpoint = \"auth/create-teacher\";\r\n    else endpoint = \"auth/create-student\";\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: body,\r\n    };\r\n\r\n    const response = await fetch(`${apiDomain}${endpoint}`, requestOptions);\r\n\r\n    const data = await response.json();\r\n\r\n    console.log(\"API data\",data);\r\n\r\n    if (data.status === \"FAILED\")\r\n      setValues({ ...values, [\"error\"]: data.result });\r\n    else {\r\n      setValues({ ...values, [\"error\"]: \"\" });\r\n      const userdata = {\r\n        token: data.result.jwt.token,\r\n        role: data.result.data.role.toLowerCase(),\r\n        id: data.result.data.id,\r\n      };\r\n\r\n      console.log(userdata);\r\n\r\n      localStorage.setItem(\"data\", JSON.stringify(userdata));\r\n      history.push(\"/\");\r\n      window.location.reload();\r\n    }\r\n    \r\n  };\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n  // if (universities)\r\n  return (\r\n    <Container>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item className={classes.textField}>\r\n            <h2>Hello There!!</h2>\r\n            <p>Lets Sign Up to continue</p>\r\n          </Grid>\r\n        </Grid>\r\n        {values.error !== \"\" ? (\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            className={classes.root}\r\n          >\r\n            <Alert elevation={0} severity=\"error\">\r\n              {values.error}\r\n            </Alert>\r\n          </Grid>\r\n        ) : null}\r\n        <form onSubmit={handleSignUp}>\r\n          <Grid item xs={12}>\r\n            <Forms\r\n              id=\"role\"\r\n              type=\"select\"\r\n              label=\"Role\"\r\n              classes={classes}\r\n              values={values.role}\r\n              handleChange={handleChange}\r\n            />\r\n          </Grid>\r\n          <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"university\"\r\n                type=\"select\"\r\n                label=\"University\"\r\n                labelWidth={117}\r\n                classes={classes}\r\n                values={values.university}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                selectedUniversity={values.university}\r\n                id=\"department\"\r\n                type=\"select\"\r\n                label=\"Department\"\r\n                labelWidth={117}\r\n                classes={classes}\r\n                values={values.department}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          {values.role !== \"Teacher\" ? (\r\n            <Grid container justify=\"center\" alignItems=\"center\">\r\n              <Grid item xs={12} sm={6}>\r\n                <Forms\r\n                  id=\"session\"\r\n                  type=\"select\"\r\n                  label=\"Session\"\r\n                  labelWidth={117}\r\n                  classes={classes}\r\n                  values={values.session}\r\n                  handleChange={handleChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Forms\r\n                  id=\"regNo\"\r\n                  type=\"text\"\r\n                  label=\"Registration No\"\r\n                  labelWidth={120}\r\n                  classes={classes}\r\n                  values={values.regNo}\r\n                  handleChange={handleChange}\r\n                  required={true}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          ) : (\r\n            <Grid item xs={12}>\r\n              <Forms\r\n                id=\"designation\"\r\n                type=\"select\"\r\n                label=\"Designation\"\r\n                labelWidth={117}\r\n                classes={classes}\r\n                values={values.designation}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n          )}\r\n          <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"firstName\"\r\n                type=\"text\"\r\n                label=\"First Name\"\r\n                labelWidth={78}\r\n                classes={classes}\r\n                values={values.firstName}\r\n                handleChange={handleChange}\r\n                required={false}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"lastName\"\r\n                type=\"text\"\r\n                label=\"Last Name\"\r\n                labelWidth={78}\r\n                classes={classes}\r\n                values={values.lastName}\r\n                handleChange={handleChange}\r\n                required={false}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"username\"\r\n                type=\"text\"\r\n                label=\"Username\"\r\n                labelWidth={84}\r\n                classes={classes}\r\n                values={values.username}\r\n                handleChange={handleChange}\r\n                required={true}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"email\"\r\n                type=\"text\"\r\n                label=\"Email Address\"\r\n                labelWidth={110}\r\n                classes={classes}\r\n                values={values.email}\r\n                handleChange={handleChange}\r\n                required={true}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                labelWidth={80}\r\n                classes={classes}\r\n                values={values.password}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Forms\r\n                id=\"confirmPassword\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                labelWidth={140}\r\n                classes={classes}\r\n                values={values.confirmPassword}\r\n                handleChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.textField}>\r\n            <Button variant=\"contained\" value=\"Sign Up\" type=\"submit\" fullWidth>\r\n              Sign Up\r\n            </Button>\r\n          </Grid>\r\n        </form>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n  // else return <h1>Loading</h1>;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Navbar\\Navbar.js",["130","131","132"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport { FaUserAlt } from \"react-icons/fa\";\r\nimport { FaBell } from \"react-icons/fa\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nlet navElements;\r\n\r\nexport default function Navigation(props) {\r\n  let history = useHistory();\r\n  const [showSign, setShowSign] = useState(true);\r\n  const navChange = () => setShowSign(false);\r\n\r\n  const [notifications, setnotifications] = useState(null);\r\n\r\n  if (props.notifications) setnotifications(props.notifications);\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const isMenuOpen = Boolean(anchorEl);\r\n\r\n  const [anchor, setAnchor] = React.useState(null);\r\n  const isNotificationOpen = Boolean(anchor);\r\n\r\n  const handleProfileMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleNotificationMenuOpen = (event) => {\r\n    setAnchor(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    setAnchor(null);\r\n  };\r\n\r\n  const handleSignout = () => {\r\n    localStorage.clear();\r\n    // props.login.isLogin = \"Failed\";\r\n    window.location.reload();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const renderProfileMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      id=\"profile-menu\"\r\n      keepMounted\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\",\r\n      }}\r\n      transformOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"center\",\r\n      }}\r\n      style={{ width: \"340px\" }}\r\n    >\r\n      <MenuItem style={{textDecoration: \"none\", color: \"black\"}} component={Link} to=\"/profile\" onClick={handleMenuClose} /*style={{width: \"340px\"}}*/>\r\n        Profile\r\n      </MenuItem>\r\n      <MenuItem onClick={handleMenuClose}>My Schedule</MenuItem>\r\n      <MenuItem onClick={handleMenuClose} onClick={handleSignout}>\r\n        Sign Out\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const renderNotificationMenu = (\r\n    <Menu\r\n      anchorEl={anchor}\r\n      id=\"notification menu\"\r\n      open={isNotificationOpen}\r\n      onClose={handleMenuClose}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\",\r\n      }}\r\n      transformOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"center\",\r\n      }}\r\n    >\r\n      <MenuItem onClick={handleMenuClose}>\r\n        {notifications ? notifications : \"No Notifications\"}\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  console.log(\"Login status\", props.loginStatus);\r\n\r\n  if (props.loginStatus == null) {\r\n    navElements = (\r\n      <>\r\n        <Spinner animation=\"grow\" />\r\n      </>\r\n    );\r\n  } else if (props.loginStatus == \"OK\") {\r\n    navElements = (\r\n      <>\r\n        <IconButton\r\n          aria-label=\"show 17 new notifications\"\r\n          color=\"inherit\"\r\n          onClick={handleNotificationMenuOpen}\r\n        >\r\n          <Badge badgeContent={17} color=\"secondary\">\r\n            <FaBell style={{ color: \"white\" }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <IconButton\r\n          edge=\"end\"\r\n          aria-label=\"account of current user\"\r\n          // aria-controls={menuId}\r\n          aria-haspopup=\"true\"\r\n          onClick={handleProfileMenuOpen}\r\n          color=\"inherit\"\r\n        >\r\n          <FaUserAlt style={{ color: \"white\" }} />\r\n        </IconButton>\r\n        {/* <MenuItem onClick={handleSignout}>Signout</MenuItem> */}\r\n        {renderNotificationMenu}\r\n        {renderProfileMenu}\r\n      </>\r\n    );\r\n  } else {\r\n    navElements = (\r\n      <>\r\n        <Link to=\"signUp\" onClick={navChange}>\r\n          <MenuItem> Sign Up</MenuItem>\r\n        </Link>\r\n        <Link to=\"signIn\" onClick={navChange}>\r\n          <MenuItem>Sign In</MenuItem>\r\n        </Link>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Navbar bg=\"\" style={{ backgroundColor: \"#010302\" }} variant=\"dark\">\r\n      <Navbar.Brand href=\"/\" className={showSign ? null : \"m-auto\"}>\r\n        <>\r\n          <img\r\n            src={\"/static/paper.png\"}\r\n            width={\"38\"}\r\n            height={\"38\"}\r\n            className={\"d-inline-block align-top\"}\r\n            className=\"nav__logo\"\r\n            alt={\"logo\"}\r\n          />\r\n          <span className=\"nav__heading\" style={{ fontSize: \"122%\" }}>\r\n            paper\r\n          </span>\r\n        </>\r\n      </Navbar.Brand>\r\n      {showSign ? <Nav className=\"ml-auto\">{navElements}</Nav> : null}\r\n    </Navbar>\r\n  );\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Course.js",["133","134"],"import axios from \"axios\";\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport \"./Course.scss\";\r\nimport LinearIndeterminate from '../Generic/Loader';\r\n\r\nexport default function Course(props) {\r\n  let { id } = useParams();\r\n\r\n  const [courseData, setCourseData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (props.userInfo)\r\n      axios\r\n        .get(`${props.userInfo.role.toLowerCase()}/course/${id}`)\r\n        .then((response) => {\r\n          const data = response.data;\r\n          console.log(data);\r\n          if (data.status === \"OK\") setCourseData(data.result.data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n  }, []);\r\n\r\n  if (courseData) return <div className=\"course\"><Sidebar courseData={courseData} /></div>;\r\n  else return <LinearIndeterminate></LinearIndeterminate>;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Home\\Home.js",["135","136","137","138","139","140","141","142","143","144","145","146","147","148"],"import React, { useState } from \"react\";\r\nimport { Grid, Snackbar, TextField } from \"@material-ui/core\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport SubjectIcon from \"@material-ui/icons/Subject\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AssignmentTurnedInOutlinedIcon from \"@material-ui/icons/AssignmentTurnedInOutlined\";\r\nimport Timer from \"../Timer/Timer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LinearIndeterminate from \"../Generic/Loader\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Forms from \"../Generic/Forms\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FaRegCheckCircle } from \"react-icons/fa\";\r\nimport \"./Home.scss\";\r\nimport axios from \"axios\";\r\n// import Alert from \"@material-ui/lab/Alert\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    // margin: theme.spacing(1),\r\n  },\r\n  textField: {\r\n    // width: \"15vw\",\r\n    // margin: theme.spacing(1),\r\n    paddingRight: theme.spacing(1),\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  shadows: [\"none\"],\r\n}));\r\n\r\nexport default function Home(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  let history = useHistory();\r\n\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState({\r\n    courseName: \"\",\r\n    courseCode: \"\",\r\n    university: \"\",\r\n    department: \"\",\r\n  });\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n  var months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  var days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  let courseUI;\r\n  let upcomingExams = [];\r\n  let upcomingExamsUI;\r\n  let mostUpcomingExamUI;\r\n  let previousExams = [];\r\n  let previousExamsUI;\r\n  let ongoingExams = [];\r\n\r\n  const [timerDeadline, setTimerDeadLine] = useState(Date.now());\r\n\r\n  const [snackbarMsg, setsnackbarMsg] = useState(null);\r\n\r\n  const handleSnackbarClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  const createCourse = () => {\r\n    // const dept = document.getElementById(\"department\").innerHTML);\r\n\r\n    if (\r\n      values.university &&\r\n      values.department &&\r\n      values.courseCode &&\r\n      values.courseName\r\n    ) {\r\n      axios({\r\n        method: \"POST\",\r\n        url: `teacher/course/create`,\r\n\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n\r\n        data: JSON.stringify({\r\n          name: values.courseName,\r\n          code: values.courseCode,\r\n          department: {\r\n            name: `${document.getElementById(\"department\").innerHTML}`,\r\n            id: values.department,\r\n          },\r\n          varsity: {\r\n            name: `${document.getElementById(\"university\").innerHTML}`,\r\n            id: values.department,\r\n          },\r\n        }),\r\n      })\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          if (response.data.status === \"OK\") {\r\n            handleClose();\r\n            setsnackbarMsg(\"Course Created Successfully\");\r\n            setSnackbarOpen(true);\r\n\r\n            setTimeout(function () {\r\n              history.push(\"/\");\r\n              window.location.reload();\r\n            }, 5000);\r\n          } else {\r\n            setsnackbarMsg(\"Course Creation Failed!\");\r\n            setSnackbarOpen(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setsnackbarMsg(\"Course Creation Failed!\");\r\n          setSnackbarOpen(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  if (props.userInfo) {\r\n    if (props.userInfo.courses.length > 0) {\r\n      courseUI = props.userInfo.courses.map((course, k) => {\r\n        // console.log(items);\r\n        return (\r\n          <Grid key={k} container alignitems=\"flex-start\" className=\"sideExams\">\r\n            <Grid item>\r\n              <SubjectIcon style={{ fontSize: \"27px\" }} />\r\n            </Grid>\r\n            <Grid item xs className=\"examName\">\r\n              <Link\r\n                to={`/course/${course.course._id}`}\r\n                style={{ textDecoration: \"none\", color: \"black\" }}\r\n              >\r\n                <span>{course.course.name}</span>\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      });\r\n    }\r\n\r\n    props.userInfo.courses.forEach((course, i) => {\r\n      const date = new Date();\r\n\r\n      if (course.course.cqExams) {\r\n        course.course.cqExams.forEach((exam, j) => {\r\n          console.log(course.course);\r\n          if (\r\n            new Date(exam.examId.date).getTime() + exam.examId.totalTime * 60 <\r\n            date.getTime()\r\n          )\r\n            previousExams.push({\r\n              _id: exam.examId._id,\r\n              name: exam.examId.name,\r\n              courseName: course.course.name,\r\n              date: new Date(exam.examId.date),\r\n              totalMarks: exam.examId.totalMarks,\r\n              totalTime: exam.examId.totalTime,\r\n              createdBy:\r\n                course.course.createdBy.firstName +\r\n                course.course.createdBy.lastName +\r\n                course.course.createdBy.username,\r\n            });\r\n          else {\r\n            upcomingExams.push({\r\n              _id: exam.examId._id,\r\n              name: exam.examId.name,\r\n              courseName: course.course.name,\r\n              date: new Date(exam.examId.date),\r\n              totalMarks: exam.examId.totalMarks,\r\n              totalTime: exam.examId.totalTime,\r\n              createdBy:\r\n                course.course.createdBy.firstName +\r\n                \" \" +\r\n                course.course.createdBy.lastName +\r\n                \" \" +\r\n                course.course.createdBy.username,\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      if (course.course.mcqExams) {\r\n        course.course.mcqExams.forEach((exam, j) => {\r\n          if (\r\n            new Date(exam.examId.date).getTime() + exam.examId.totalTime * 60 <\r\n            date.getTime()\r\n          )\r\n            previousExams.push({\r\n              _id: exam.examId._id,\r\n              name: exam.examId.name,\r\n              courseName: course.course.name,\r\n              date: new Date(exam.examId.date),\r\n              totalMarks: exam.examId.totalMarks,\r\n              totalTime: exam.examId.totalTime,\r\n              createdBy:\r\n                course.course.createdBy.firstName +\r\n                \" \" +\r\n                course.course.createdBy.lastName +\r\n                \" \" +\r\n                course.course.createdBy.username,\r\n            });\r\n          else {\r\n            upcomingExams.push({\r\n              _id: exam.examId._id,\r\n              name: exam.examId.name,\r\n              courseName: course.course.name,\r\n              date: new Date(exam.examId.date),\r\n              totalMarks: exam.examId.totalMarks,\r\n              totalTime: exam.examId.totalTime,\r\n              createdBy:\r\n                course.course.createdBy.firstName +\r\n                \" \" +\r\n                course.course.createdBy.lastName +\r\n                \" \" +\r\n                course.course.createdBy.username,\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    upcomingExams.sort(function (a, b) {\r\n      return a.date.getTime() - b.date.getTime();\r\n    });\r\n    previousExams.sort(function (a, b) {\r\n      return b.date.getTime() - a.date.getTime();\r\n    });\r\n\r\n    ongoingExams.sort(function (a, b) {\r\n      return a.date.getTime() - b.date.getTime();\r\n    });\r\n\r\n    const reloadHandler = (event) => {\r\n      event.preventDefault();\r\n    };\r\n    let examSchedule;\r\n    if (upcomingExams.length > 0) {\r\n      examSchedule = `${\r\n        new Date(upcomingExams[0].date).getHours() < 10\r\n          ? \"0\" + new Date(upcomingExams[0].date).getHours()\r\n          : new Date(upcomingExams[0].date).getHours()\r\n      }:${\r\n        new Date(upcomingExams[0].date).getMinutes() < 10\r\n          ? \"0\" + new Date(upcomingExams[0].date).getMinutes()\r\n          : new Date(upcomingExams[0].date).getMinutes()\r\n      }\r\n      ${new Date(upcomingExams[0].date).getDate()}th ${\r\n        months[new Date(upcomingExams[0].date).getMonth()]\r\n      },\r\n      ${new Date(upcomingExams[0].date).getFullYear()}`;\r\n\r\n      mostUpcomingExamUI = (\r\n        <Container fluid key={upcomingExams[0]._id} alignitems=\"flex-start\">\r\n          <Row className=\"examHeading d-flex justify-content-between\">\r\n            <Col xs=\"auto\">\r\n              <span className=\"examName\">\r\n                <b>{upcomingExams[0].name}</b>\r\n              </span>\r\n            </Col>\r\n            <Col xs=\"auto\" className=\"examSchedule\">\r\n              <p>{examSchedule}</p>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"infos\">\r\n            <Col>\r\n              <span>Course: {upcomingExams[0].courseName}</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"infos\">\r\n            <Col>\r\n              <p>Host: {upcomingExams[0].createdBy}</p>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"infos\">\r\n            <Col>\r\n              <span>Total Marks: {upcomingExams[0].totalMarks}</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"infos\">\r\n            <Col>\r\n              <span>Total Time: {upcomingExams[0].totalTime}</span>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      );\r\n      upcomingExamsUI = upcomingExams.map((ex, i) => {\r\n        if (i != 0)\r\n          return (\r\n            <>\r\n              <Container\r\n                fluid\r\n                key={ex._id}\r\n                alignitems=\"flex-start\"\r\n                className=\"upcoming__next\"\r\n              >\r\n                <Link to={`/upcoming-exam/${ex._id}`} style={{textDecoration: \"none\", color: \"black\"}}>\r\n                  <Row className=\"examHeading d-flex justify-content-between\">\r\n                    <Col xs=\"auto\">\r\n                      <span className=\"examName\">\r\n                        <b>{ex.name}</b>\r\n                      </span>\r\n                    </Col>\r\n                    <Col xs=\"auto\" className=\"examSchedule\">\r\n                      <p>\r\n                        {new Date(ex.date).getHours() < 10\r\n                          ? \"0\" + new Date(ex.date).getHours()\r\n                          : new Date(ex.date).getHours()}\r\n                        :\r\n                        {new Date(ex.date).getMinutes() < 10\r\n                          ? \"0\" + new Date(ex.date).getMinutes()\r\n                          : new Date(ex.date).getMinutes()}{\" \"}\r\n                        {new Date(ex.date).getDate()}\r\n                        th {months[new Date(ex.date).getMonth()]},\r\n                        {new Date(ex.date).getFullYear()}\r\n                      </p>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col style={{paddingBottom: \"10px\"}}>{ex.courseName}</Col>\r\n                  </Row>\r\n                </Link>\r\n              </Container>\r\n            </>\r\n          );\r\n      });\r\n    }\r\n\r\n    if (previousExams)\r\n      previousExamsUI = previousExams.map((ex, i) => {\r\n        return (\r\n          <Grid\r\n            key={ex._id}\r\n            container\r\n            alignitems=\"flex-start\"\r\n            className=\"sideExams\"\r\n          >\r\n            <Grid item>\r\n              <AssignmentTurnedInOutlinedIcon style={{ fontSize: \"27px\" }} />\r\n            </Grid>\r\n            <Grid item xs className=\"examName\">\r\n              <Link\r\n                to={`/previous-exam/${ex._id}`}\r\n                style={{ textDecoration: \"none\", color: \"black\" }}\r\n              >\r\n                <span>{ex.name}</span>\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <p>\r\n                {new Date(ex.date).getHours() < 10\r\n                  ? \"0\" + new Date(ex.date).getHours()\r\n                  : new Date(ex.date).getHours()}\r\n                :\r\n                {new Date(ex.date).getMinutes() < 10\r\n                  ? \"0\" + new Date(ex.date).getMinutes()\r\n                  : new Date(ex.date).getMinutes()}{\" \"}\r\n                {new Date(ex.date).getDate()}\r\n                th {months[new Date(ex.date).getMonth()]},\r\n                {new Date(ex.date).getFullYear()}\r\n              </p>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      });\r\n  }\r\n  if (props.userInfo) {\r\n    const role = props.userInfo.role;\r\n    // console.log(role)\r\n    return (\r\n      // <Container fluid style={{ marginTop: \"10px\", height: \"100vh\" }}>\r\n      <Grid container justify=\"space-between\" alignItems=\"flex-start\">\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={2}\r\n          className=\"leftside\"\r\n          style={{ float: \"left\", paddingTop: \"10px\", paddingLeft: \"10px\" }}\r\n        >\r\n          <Grid container justify=\"space-between\">\r\n            <Grid item>\r\n              <h4 className=\"leftHeading\">My Courses</h4>\r\n            </Grid>\r\n            {role === \"Teacher\" ? (\r\n              <Grid item>\r\n                <AddIcon onClick={handleClickOpen} style={{ fontSize: \"35px\", color: \"#234058\", cursor: \"pointer\" }}/>\r\n                <Dialog\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  aria-labelledby=\"form-dialog-title\"\r\n                >\r\n                  <DialogTitle id=\"form-dialog-title\">\r\n                    Create New Course\r\n                  </DialogTitle>\r\n                  <DialogContent>\r\n                    <Forms\r\n                      id=\"university\"\r\n                      type=\"select\"\r\n                      label=\"University\"\r\n                      labelWidth={117}\r\n                      classes={classes}\r\n                      values={values.university}\r\n                      handleChange={handleChange}\r\n                    />\r\n                    <Forms\r\n                      selectedUniversity={values.university}\r\n                      id=\"department\"\r\n                      type=\"select\"\r\n                      label=\"Department\"\r\n                      labelWidth={117}\r\n                      classes={classes}\r\n                      values={values.department}\r\n                      handleChange={handleChange}\r\n                    />\r\n                    <Forms\r\n                      id=\"courseName\"\r\n                      type=\"text\"\r\n                      label=\"Course Name\"\r\n                      labelWidth={78}\r\n                      classes={classes}\r\n                      values={values.firstName}\r\n                      handleChange={handleChange}\r\n                      required={false}\r\n                    />\r\n                    <Forms\r\n                      id=\"courseCode\"\r\n                      type=\"text\"\r\n                      label=\"Course Code\"\r\n                      labelWidth={78}\r\n                      classes={classes}\r\n                      values={values.firstName}\r\n                      handleChange={handleChange}\r\n                      required={false}\r\n                    />\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClose} color=\"default\">\r\n                      Cancel\r\n                    </Button>\r\n                    <Button onClick={createCourse} color=\"primary\">\r\n                      Create\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n              </Grid>\r\n            ) : null}\r\n          </Grid>\r\n          <Grid item>\r\n            <hr />\r\n          </Grid>\r\n          {courseUI}\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={6}\r\n          className=\"upcoming\"\r\n          style={{ padding: \"10px\" }}\r\n        >\r\n          <Grid container justify=\"space-between\" alignitems=\"flex-start\">\r\n            <Grid item>\r\n              <h4 className=\"centerHeading\">Upcoming Exams</h4>\r\n            </Grid>\r\n            <Grid item>\r\n              <InfoOutlinedIcon\r\n                style={{ fontSize: \"35px\", color: \"#234058\" }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <hr />\r\n          </Grid>\r\n          <div className=\"upcoming__first\">\r\n            {mostUpcomingExamUI}\r\n\r\n            {upcomingExams.length > 0 ? (\r\n              <Timer\r\n                examID={upcomingExams[0]._id}\r\n                deadline={upcomingExams[0].date}\r\n              />\r\n            ) : (\r\n              <>\r\n                <Grid container justify=\"center\">\r\n                  <Grid item xs=\"auto\" style={{ marginTop: \"10%\" }}>\r\n                    <FaRegCheckCircle\r\n                      style={{ fontSize: \"50px\", color: \"#234058\" }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"center\" style={{ marginTop: \"2%\" }}>\r\n                  <Grid item xs=\"auto\">\r\n                    <h3 style={{ textAlign: \"center\" }}>\r\n                      You're All Caught Up!\r\n                    </h3>\r\n                    <p style={{ textAlign: \"center\", fontSize: \"20px\" }}>\r\n                      No Upcoming Exams\r\n                    </p>\r\n                  </Grid>\r\n                </Grid>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div>{upcomingExamsUI}</div>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={3}\r\n          className=\"rightside\"\r\n          style={{ padding: \"10px\" }}\r\n        >\r\n          <Grid container justify=\"space-between\" alignitems=\"flex-start\">\r\n            <Grid item>\r\n              <h4 className=\"rightHeading\">Previous Exams</h4>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <hr />\r\n          </Grid>\r\n          {previousExamsUI}\r\n        </Grid>\r\n      </Grid>\r\n      // </Container>\r\n    );\r\n  } else return <LinearIndeterminate />;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\UpcomingExam\\UpcomingExam.js",["149","150","151","152","153"],"import React from \"react\";\r\nimport Timer from \"../Timer/Timer\";\r\nimport {\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Alert,\r\n  Table,\r\n} from \"react-bootstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst UpcomingExam = (props) => {\r\n  var months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  var days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  const { id } = useParams();\r\n\r\n  console.log(props.userInfo);\r\n  // console.log(id);\r\n\r\n  let examInfo;\r\n  props.userInfo.courses.map((course) => {\r\n    //   console.log(course);\r\n    course.course.cqExams.map((exam) => {\r\n      //   console.log(exam.examId._id);\r\n      if (exam.examId._id == id) {\r\n        //   console.log(exam);\r\n        examInfo = exam.examId;\r\n      }\r\n    });\r\n    course.course.mcqExams.map((exam) => {\r\n      //   console.log(exam.examId._id);\r\n      if (exam.examId._id == id) examInfo = exam.examId;\r\n    });\r\n  });\r\n\r\n  console.log(examInfo);\r\n\r\n  return (\r\n    <Container style={{backgroundColor: \"white\", paddingBottom: \"3%\"}}>\r\n      <Alert variant=\"primary\">\r\n        <p className=\"text-center\">Exam Has Not Started Yet</p>\r\n      </Alert>\r\n      {/* <Alert variant=\"light\"> */}\r\n      <h1 className=\"text-center\">{examInfo.name}</h1>\r\n      {/* </Alert> */}\r\n\r\n      <Row>\r\n        <Col>\r\n          <Row>\r\n            <Col>\r\n              <Table\r\n                // variant=\"dark\"\r\n                responsive\r\n                hover\r\n                bordered\r\n                size=\"sm\"\r\n                bsPrefix=\"table\"\r\n              >\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Time</td>\r\n                    <td>\r\n                      {new Date(examInfo.date).getHours() < 10\r\n                        ? \"0\" + new Date(examInfo.date).getHours()\r\n                        : new Date(examInfo.date).getHours()}\r\n                      :\r\n                      {new Date(examInfo.date).getMinutes() < 10\r\n                        ? \"0\" + new Date(examInfo.date).getMinutes()\r\n                        : new Date(examInfo.date).getMinutes()}{\" \"}\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Date</td>\r\n                    <td>\r\n                      {new Date(examInfo.date).getDate()}th{\" \"}\r\n                      {months[new Date(examInfo.date).getMonth()]},\r\n                      {new Date(examInfo.date).getFullYear()} (\r\n                      {days[new Date(examInfo.date).getDay()]})\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n\r\n        <Col>\r\n          <Row>\r\n            <Col></Col>\r\n            <Col>\r\n              <Table\r\n                // variant=\"dark\"\r\n                responsive\r\n                hover\r\n                bordered\r\n                size=\"sm\"\r\n                bsPrefix=\"table\"\r\n              >\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Total Marks</td>\r\n                    <td>{examInfo.totalMarks}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Total Time</td>\r\n                    <td>{examInfo.totalTime} min</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <Timer deadline={examInfo.date} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpcomingExam;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\PreviousExam.js",["154","155","156","157","158","159","160","161","162","163","164"],"E:\\Project 350\\WillChange\\client\\src\\Components\\Generic\\Forms.js",["165"],"E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Sidebar.js",["166","167"],"E:\\Project 350\\WillChange\\client\\src\\Components\\Timer\\Timer.js",["168","169"],"E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\MarkSheet.js",["170"],"import React from \"react\";\r\n\r\nconst MarkSheet = (props) => {\r\n  const mcqExamsData = props.mcqExamsData;\r\n  let x = 1;\r\n\r\n  const tableBody = mcqExamsData.map((data) => {\r\n    console.log(data);\r\n    return (\r\n      <>\r\n        <tr>\r\n          <td>{x++}</td>\r\n          <td>\r\n            <span class=\"crown badge\" style={{ fontSize: \"20px\" }}>\r\n              {x == 2 ? \"👑\" : \"\"}\r\n            </span>\r\n            {`${data.student.firstName} ${data.student.lastName} ${data.student.username}`}\r\n          </td>\r\n          <td>{data.student.registrationNo}</td>\r\n\r\n          <td>\r\n            <a href={`mailto: ${data.student.email}`}>{data.student.email}</a>\r\n          </td>\r\n          <td>{data.solved}</td>\r\n          <td>{data.wrong}</td>\r\n          <td>{data.mark}</td>\r\n          <td>\r\n            <a href={`${data.student._id}`}>View</a>\r\n          </td>\r\n        </tr>\r\n      </>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <table\r\n      className=\"table table-hover table-striped table-light\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <thead className=\"thead-dark\">\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Name</th>\r\n          <th>Registration No</th>\r\n          <th>Email</th>\r\n          <th>Solved</th>\r\n          <th>Wrong</th>\r\n          <th>Mark</th>\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>{tableBody}</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default MarkSheet;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\PreviousExam\\ExamInfo.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\CreateExam.js",["171"],"import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Tabs } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { Toast } from \"react-bootstrap\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Question from \"./Question\";\r\nimport \"./CreateExam.scss\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default class CreateCourse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  questionIDs = [];\r\n  newTabIndex = 0;\r\n  quesNo = 2;\r\n  totalMarks = 0;\r\n  totalTime = 0;\r\n\r\n  addQuestion = (id, marks, time) => {\r\n    this.setState({\r\n      showToast: true,\r\n      examCreateMessage: \"Question Created Successfully\",\r\n    });\r\n\r\n    this.totalMarks += parseInt(marks, 10);\r\n    this.totalTime += time;\r\n\r\n    if (this.props.examType === \"CQ\")\r\n      this.questionIDs.push({\r\n        cqQuestionId: id,\r\n      });\r\n    else {\r\n      this.questionIDs.push({\r\n        mcqQuestionId: id,\r\n      });\r\n    }\r\n\r\n    console.log(\"mcq Question Id !\", id);\r\n    console.log(\"Mark !\", this.totalMarks);\r\n    console.log(\"Time!\", this.totalTime);\r\n  };\r\n\r\n  createExam = (date, examName) => {\r\n    console.log(\"Date \", date);\r\n    console.log(\"Name \", examName);\r\n\r\n    let data;\r\n\r\n    if (this.props.examType === \"CQ\")\r\n      data = JSON.stringify({\r\n        course: this.props.courseData._id,\r\n        cqQuestions: this.questionIDs,\r\n        totalTime: this.totalTime,\r\n        totalMarks: this.totalMarks,\r\n        date: date,\r\n        name: examName,\r\n      });\r\n    else\r\n      data = JSON.stringify({\r\n        course: this.props.courseData._id,\r\n        mcqQuestions: this.questionIDs,\r\n        totalTime: this.totalTime,\r\n        totalMarks: this.totalMarks,\r\n        date: date,\r\n        name: examName,\r\n      });\r\n\r\n    axios({\r\n      method: \"POST\",\r\n      url: `teacher/exam/${this.props.examType === \"CQ\" ? \"cq\" : \"mcq\"}/create`,\r\n\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n\r\n      data: data,\r\n    })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status === \"OK\") {\r\n          this.setState({\r\n            showToast: true,\r\n            examCreateMessage: \"Exam Created Successfully\",\r\n          });\r\n        } else\r\n          this.setState({\r\n            showToast: true,\r\n            examCreateMessage: \"Exam Created Successfully\",\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        this.setState({\r\n          showToast: true,\r\n          examCreateMessage: \"Something Went Wrong!\",\r\n        });\r\n      });\r\n  };\r\n\r\n  initialPanes = [\r\n    {\r\n      title: \"Question 1\",\r\n      content: (\r\n        <Question\r\n          onAdd={this.addQuestion}\r\n          createExam={this.createExam}\r\n          totalMarks={this.totalMarks}\r\n          totalTime={this.totalTime}\r\n          examType={this.props.examType}\r\n        />\r\n      ),\r\n      key: \"1\",\r\n      closable: false,\r\n    },\r\n  ];\r\n\r\n  state = {\r\n    activeKey: this.initialPanes[0].key,\r\n    panes: this.initialPanes,\r\n    showToast: false,\r\n    examCreateMessage: null,\r\n    create: true,\r\n  };\r\n\r\n  onChange = (activeKey) => {\r\n    this.setState({ activeKey });\r\n  };\r\n\r\n  onEdit = (targetKey, action) => {\r\n    this[action](targetKey);\r\n  };\r\n\r\n  add = () => {\r\n    const { panes } = this.state;\r\n    const activeKey = `question${this.newTabIndex++}`;\r\n    const newPanes = [...panes];\r\n    newPanes.push({\r\n      title: `Question ${this.quesNo++}`,\r\n      content: (\r\n        <Question\r\n          onAdd={this.addQuestion}\r\n          createExam={this.createExam}\r\n          totalMarks={this.totalMarks}\r\n          totalTime={this.totalTime}\r\n          examType={this.props.examType}\r\n        />\r\n      ),\r\n      key: activeKey,\r\n    });\r\n    this.setState({\r\n      panes: newPanes,\r\n      activeKey,\r\n    });\r\n  };\r\n\r\n  remove = (targetKey) => {\r\n    const { panes, activeKey } = this.state;\r\n    let newActiveKey = activeKey;\r\n    let lastIndex;\r\n    panes.forEach((pane, i) => {\r\n      if (pane.key === targetKey) {\r\n        lastIndex = i - 1;\r\n      }\r\n    });\r\n    const newPanes = panes.filter((pane) => pane.key !== targetKey);\r\n    if (newPanes.length && newActiveKey === targetKey) {\r\n      if (lastIndex >= 0) {\r\n        newActiveKey = newPanes[lastIndex].key;\r\n      } else {\r\n        newActiveKey = newPanes[0].key;\r\n      }\r\n    }\r\n    this.setState({\r\n      panes: newPanes,\r\n      activeKey: newActiveKey,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { panes, activeKey } = this.state;\r\n    return (\r\n      <Container fluid className=\"justify-content-center\">\r\n        <Toast\r\n          autohide\r\n          className=\"toast-modify\"\r\n          onClose={() => this.setState({ showToast: false })}\r\n          show={this.state.showToast}\r\n        >\r\n          <Toast.Header>\r\n            <img\r\n              src=\"holder.js/20x20?text=%20\"\r\n              className=\"rounded mr-2\"\r\n              alt=\"\"\r\n            />\r\n            <strong className=\"mr-auto\">Create Message</strong>\r\n            <small>just now</small>\r\n          </Toast.Header>\r\n          <Toast.Body>{this.state.examCreateMessage}</Toast.Body>\r\n        </Toast>\r\n        <Tabs\r\n          type=\"editable-card\"\r\n          onChange={this.onChange}\r\n          activeKey={activeKey}\r\n          onEdit={this.onEdit}\r\n        >\r\n          {panes.map((pane) => (\r\n            <TabPane tab={pane.title} key={pane.key} closable={pane.closable}>\r\n              {pane.content}\r\n            </TabPane>\r\n          ))}\r\n        </Tabs>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\Question.js",["172"],"import React, { useState } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Forms from \"../../Generic/Forms\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport axios from \"axios\";\r\nimport { Toast } from \"react-bootstrap\";\r\nimport \"./CreateExam.scss\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  textField: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  leftTextField: {\r\n    marginTop: theme.spacing(6),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    width: \"100%\",\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(10),\r\n    // backgroundColor: '#3F7CAC',\r\n  },\r\n}));\r\n\r\nconst leftStyles = makeStyles((theme) => ({\r\n  textField: {\r\n    marginTop: theme.spacing(3.5),\r\n  },\r\n  timeField: {\r\n    marginTop: theme.spacing(2.9),\r\n  },\r\n}));\r\n\r\nexport default function Question(props) {\r\n  const classes = useStyles();\r\n  const leftClasses = leftStyles();\r\n\r\n  let questionsCreated = 0;\r\n\r\n  const [values, setValues] = useState({\r\n    description: \"\",\r\n    question: null,\r\n    optA: null,\r\n    optB: null,\r\n    optC: null,\r\n    optD: null,\r\n    ans: null,\r\n    marks: null,\r\n    min: null,\r\n    sec: null,\r\n    date: Date.now(),\r\n    name: null,\r\n  });\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const [questionEditDisable, setQuestionEditDisable] = useState(false);\r\n\r\n  const [showToast, setShowToast] = useState(false);\r\n\r\n  console.log(\"questionEditDisable\", questionEditDisable);\r\n\r\n  const handleClickOpen = () => {\r\n    if (\r\n      values.question &&\r\n      values.optA &&\r\n      values.optB &&\r\n      values.optC &&\r\n      values.optD &&\r\n      values.ans &&\r\n      values.marks &&\r\n      values.min &&\r\n      values.sec\r\n    ) {\r\n      setOpen(true);\r\n    } else {\r\n      setShowToast(true);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const createExam = () => {\r\n    console.log(values.name);\r\n    if (values.name) {\r\n      props.createExam(values.date, values.name);\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    console.log(\"Triggered\", event.target.value);\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleQuestionAdd = (id) => {\r\n    props.onAdd(\r\n      id,\r\n      values.marks,\r\n      parseInt(values.min, 10) * 60 + parseInt(values.sec, 10)\r\n    );\r\n  };\r\n\r\n  function sendQuestion(e) {\r\n    e.preventDefault();\r\n\r\n    console.log(\"Form Values \", values);\r\n\r\n    axios({\r\n      method: \"POST\",\r\n      url: \"teacher/question/mcq/create\",\r\n\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      data: JSON.stringify({\r\n        description: values.description,\r\n        mainQuestion: values.question,\r\n        options: [\r\n          {\r\n            option: values.optA,\r\n          },\r\n          {\r\n            option: values.optB,\r\n          },\r\n          {\r\n            option: values.optC,\r\n          },\r\n          {\r\n            option: values.optD,\r\n          },\r\n        ],\r\n        correctAnswers: [\r\n          {\r\n            answer:\r\n              values.ans === \"A\"\r\n                ? values.optA\r\n                : values.ans === \"B\"\r\n                ? values.optB\r\n                : values.ans === \"C\"\r\n                ? values.optC\r\n                : values.optD,\r\n          },\r\n        ],\r\n        time: parseInt(values.min, 10) * 60 + parseInt(values.sec, 10),\r\n        marks: parseInt(values.marks, 10),\r\n      }),\r\n    })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status === \"OK\") {\r\n          handleQuestionAdd(response.data.result.data._id);\r\n          setQuestionEditDisable(true);\r\n          questionsCreated++;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n  const mcq = (\r\n    <Row>\r\n      <Col xs={12} lg={6}>\r\n        <Col lg={12}>\r\n          <Row className=\"justify-content-flex-start\">\r\n            <Col xs={12}>\r\n              <Forms\r\n                id=\"description\"\r\n                type=\"textField\"\r\n                label=\"Description\"\r\n                labelWidth={80}\r\n                values={values.description}\r\n                handleChange={handleChange}\r\n                rows={4}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"justify-content-flex-start\">\r\n            <Col xs={12}>\r\n              <Forms\r\n                id=\"question\"\r\n                type=\"textField\"\r\n                label=\"Question\"\r\n                labelWidth={75}\r\n                values={values.question}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                rows={3}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"justify-content-flex-start\">\r\n            <Col xs={6}>\r\n              <Forms\r\n                id=\"optA\"\r\n                type=\"text\"\r\n                label=\"Option A\"\r\n                labelWidth={75}\r\n                values={values.optA}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n            <Col xs={6}>\r\n              <Forms\r\n                id=\"optB\"\r\n                type=\"text\"\r\n                label=\"Option B\"\r\n                labelWidth={75}\r\n                values={values.optB}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"justify-content-flex-start\">\r\n            <Col xs={6}>\r\n              <Forms\r\n                id=\"optC\"\r\n                type=\"text\"\r\n                label=\"Option C\"\r\n                labelWidth={75}\r\n                values={values.optC}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n            <Col xs={6}>\r\n              <Forms\r\n                id=\"optD\"\r\n                type=\"text\"\r\n                label=\"Option D\"\r\n                labelWidth={75}\r\n                values={values.optD}\r\n                handleChange={handleChange}\r\n                required={true}\r\n                classes={classes}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Col>\r\n      <Col>\r\n        <Row className=\"justify-content-flex-start\">\r\n          <Col>\r\n            <FormControl\r\n              component=\"fieldset\"\r\n              className={classes.textField}\r\n              required\r\n            >\r\n              <FormLabel component=\"legend\">Select Correct Ans</FormLabel>\r\n              <RadioGroup\r\n                aria-label=\"ans\"\r\n                name=\"ans\"\r\n                value={values.ans}\r\n                onChange={handleChange(\"ans\")}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"A\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label=\"A\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"B\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label=\"B\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"C\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label=\"C\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"D\"\r\n                  control={<Radio color=\"primary\" />}\r\n                  label=\"D\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={4}>\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Marks\"\r\n              variant=\"outlined\"\r\n              value={values.marks}\r\n              onChange={handleChange(\"marks\")}\r\n              className={leftClasses.textField}\r\n              required\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-flex-start\">\r\n          <Col xs={4}>\r\n            <TextField\r\n              id=\"min\"\r\n              type=\"number\"\r\n              placeholder=\"00\"\r\n              label=\"Minutes\"\r\n              variant=\"outlined\"\r\n              value={values.min}\r\n              onChange={handleChange(\"min\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n          <Col xs={4}>\r\n            <TextField\r\n              id=\"sec\"\r\n              min=\"0\"\r\n              type=\"number\"\r\n              max=\"59\"\r\n              placeholder=\"00\"\r\n              label=\"Seconds\"\r\n              variant=\"outlined\"\r\n              value={values.sec}\r\n              onChange={handleChange(\"sec\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n  const cq = (\r\n    <Row className=\"justify-content-center\">\r\n      <Col xs={12} lg={6}>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <Forms\r\n              id=\"description\"\r\n              type=\"textField\"\r\n              label=\"Description\"\r\n              labelWidth={80}\r\n              values={values.description}\r\n              handleChange={handleChange}\r\n              rows={4}\r\n              classes={classes}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <Forms\r\n              id=\"question\"\r\n              type=\"textField\"\r\n              label=\"Question\"\r\n              labelWidth={75}\r\n              values={values.question}\r\n              handleChange={handleChange}\r\n              required={true}\r\n              rows={4}\r\n              classes={classes}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={12} sm={12} md={4}>\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Marks\"\r\n              variant=\"outlined\"\r\n              value={values.marks}\r\n              onChange={handleChange(\"marks\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n          <Col xs={12} sm={6} md={4}>\r\n            <TextField\r\n              id=\"min\"\r\n              type=\"number\"\r\n              placeholder=\"00\"\r\n              label=\"Minutes\"\r\n              variant=\"outlined\"\r\n              value={values.min}\r\n              onChange={handleChange(\"min\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n          <Col xs={12} sm={6} md={4}>\r\n            <TextField\r\n              id=\"sec\"\r\n              min=\"0\"\r\n              type=\"number\"\r\n              max=\"59\"\r\n              placeholder=\"00\"\r\n              label=\"Seconds\"\r\n              variant=\"outlined\"\r\n              value={values.sec}\r\n              onChange={handleChange(\"sec\")}\r\n              className={classes.textField}\r\n              required\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n  console.log(props.examType, \"exam type\");\r\n  return (\r\n    <Container fluid className=\"justify-content-flex-start\">\r\n      <Toast\r\n        className=\"toast-modify\"\r\n        autohide\r\n        onClose={() => setShowToast(false)}\r\n        show={showToast}\r\n      >\r\n        <Toast.Header>\r\n          <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\r\n          <strong className=\"mr-auto\">Alert Message</strong>\r\n          <small>just now</small>\r\n        </Toast.Header>\r\n        <Toast.Body>You Have To Create At Least One Question!</Toast.Body>\r\n      </Toast>\r\n      <Row className=\"justify-content-center\">\r\n        <Col xs=\"auto\">\r\n          <h3>Create Your Question Here</h3>\r\n        </Col>\r\n      </Row>\r\n      <form onSubmit={sendQuestion}>\r\n        {props.examType === \"CQ\" ? cq : mcq}\r\n        <Row className=\"justify-content-center\">\r\n          <ButtonGroup size=\"large\" color=\"primary\">\r\n            <Button\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              startIcon={<EditIcon />}\r\n            >\r\n              Edit\r\n            </Button>\r\n            <Button\r\n              disabled={questionEditDisable}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              startIcon={<SaveIcon />}\r\n              type=\"submit\"\r\n            >\r\n              Save\r\n            </Button>\r\n            <Button\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              startIcon={<LockIcon />}\r\n              onClick={handleClickOpen}\r\n            >\r\n              Lock Exam\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Row>\r\n      </form>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Lock This Exam</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            id=\"exam-name\"\r\n            type=\"text\"\r\n            label=\"Exam Name\"\r\n            value={values.name}\r\n            onChange={handleChange(\"name\")}\r\n            required={true}\r\n            classes={classes.textField}\r\n          />\r\n\r\n          <br />\r\n          <br />\r\n\r\n          <TextField\r\n            id=\"datetime-local\"\r\n            label=\"Schedule Exam\"\r\n            type=\"datetime-local\"\r\n            value={values.date}\r\n            onChange={handleChange(\"date\")}\r\n            defaultValue=\"2021-05-01T10:30\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n          <DialogContentText>\r\n            <br />\r\n            Total Marks: {props.totalMarks}\r\n            <br />\r\n            Total Time: {props.totalTime}\r\n            <br />\r\n            <br />\r\n            By clicking confirm this exam will be created as schedule.\r\n            <br />\r\n            <br />\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={createExam} color=\"primary\">\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\LiveExam\\LiveExam.js",["173","174","175","176","177","178","179","180","181","182","183","184"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LinearIndeterminate from \"../Generic/Loader\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LinearProgress,\r\n  makeStyles,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\n// import Alert from \"@material-ui/lab/Alert\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport Result from \"./Result\";\r\nimport \"./LiveExam.scss\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function LiveExam(props) {\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [index, setIndex] = React.useState(0);\r\n\r\n  const [examinfo, setExamInfo] = useState(null);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [seconds, setSeconds] = useState(1);\r\n\r\n  const [windowChange, setwindowChange] = useState(0);\r\n\r\n  const studentAnswers = [];\r\n\r\n  const [result, setResult] = useState(0);\r\n\r\n  const intervalRef = useRef();\r\n  const [disableNextButton, setdisableNextButton] = useState(false);\r\n\r\n  const [openFeedback, setOpenFeedback] = useState(false);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n\r\n  const [answer, setAnswer] = useState('');\r\n\r\n  const handleAnswer = (event) => {\r\n    setAnswer(event.target.value);\r\n  }\r\n\r\n  const handleFeedbackOpen = () => {\r\n    setOpenFeedback(true);\r\n  };\r\n\r\n  const handleFeedbackClose = () => {\r\n    setOpenFeedback(false);\r\n  };\r\n\r\n  const handleFeedback = (event) => {\r\n    setFeedback(event.target.value);\r\n  };\r\n  // console.log(feedback);\r\n  // const [totalExamTime, setTotalExamTime] = useState(0);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const submitAnswers = () => {\r\n    // setResult(\"Loading\");\r\n    axios({\r\n      method: \"POST\",\r\n      url: `student/exam/mcq/submit/${id}`,\r\n\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      data: JSON.stringify({\r\n        studentAnswers: studentAnswers,\r\n        feedback: feedback,\r\n        windowChanged: windowChange,\r\n      }),\r\n    })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status === \"OK\") {\r\n          setResult(response.data.result.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds((seconds) => seconds - 1);\r\n    }, 1000);\r\n    intervalRef.current = interval;\r\n\r\n    axios\r\n      .get(`student/exam/${id}`)\r\n      .then((response) => {\r\n        setExamInfo(response.data.result.data);\r\n        console.log(\"examinfo\", response.data.result.data);\r\n        setSeconds(\r\n          response.data.result.data.mcqQuestions[index].mcqQuestionId.time\r\n        );\r\n\r\n        let examTimeEndAfter = 0;\r\n\r\n        examTimeEndAfter =\r\n          Math.round(\r\n            new Date(response.data.result.data.date).getTime() / 1000\r\n          ) +\r\n          response.data.result.data.totalTime -\r\n          Math.round(Date.now() / 1000);\r\n\r\n        console.log(examTimeEndAfter);\r\n\r\n        if (examTimeEndAfter > 0) examTimeEndAfter = examTimeEndAfter * 1000;\r\n        else examTimeEndAfter = 0;\r\n\r\n        console.log(examTimeEndAfter);\r\n\r\n        const timeout = setTimeout(() => {\r\n          clearInterval(intervalRef.current);\r\n          setdisableNextButton(true);\r\n          submitAnswers();\r\n          // alert(\"Exam Timeout!\");\r\n        }, examTimeEndAfter);\r\n\r\n        // const timer = setTimeout(() => {\r\n        //   // setCount(\"Timeout called!\");\r\n        //   // clearInterval(intervalRef.current);\r\n        //   alert(\"Hello\");\r\n        //   console.log(\"Timeout worked after \", examTimeEndAfter);\r\n        //   // submitAnswers();\r\n        // }, examTimeEndAfter * 1000);\r\n        // return () => {\r\n        //   clearTimeout(timer);\r\n        // };\r\n\r\n        // return () => clearTimeout(timeout);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  if (examinfo) {\r\n    const nextQuestion = (event) => {\r\n      console.log(\r\n        \"Ans : \",\r\n        index,\r\n        value,\r\n        examinfo.mcqQuestions[index].mcqQuestionId._id\r\n      );\r\n      studentAnswers.push({\r\n        mcqQuestion: examinfo.mcqQuestions[index].mcqQuestionId._id,\r\n        studentAnswer: value,\r\n      });\r\n\r\n      if (index + 1 < examinfo.mcqQuestions.length) {\r\n        console.log(\"Index\", index + 1, examinfo.mcqQuestions.length);\r\n        setSeconds(\r\n          (seconds) => examinfo.mcqQuestions[index + 1].mcqQuestionId.time\r\n        );\r\n        setIndex(index + 1);\r\n      } else {\r\n        submitAnswers();\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n\r\n    if (seconds < 0) nextQuestion();\r\n\r\n    document.addEventListener(\"visibilitychange\", function () {\r\n      // document.title = document.hidden ? \"I'm am cheating\" : \"I'm here\";\r\n      // var mp3_url =\r\n      //   \"https://media.geeksforgeeks.org/wp-content/uploads/20190531135120/beep.mp3\";\r\n\r\n      // new Audio(mp3_url).play();\r\n      setwindowChange((windowChange) => windowChange + 1);\r\n      handleClick();\r\n    });\r\n    if (result) {\r\n      return <Result result={result} />;\r\n    } else\r\n      return (\r\n        <div>\r\n          <Snackbar\r\n            open={open}\r\n            onClose={handleClose}\r\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\r\n            // anchorPosition ={ { right: 10, top: 100 }}\r\n          >\r\n            <Alert onClose={handleClose} severity=\"warning\">\r\n              Please Don't Leave Tab During Exam!\r\n            </Alert>\r\n          </Snackbar>\r\n          <Container fluid className=\"root \">\r\n            <Row className=\"justify-content-center\">\r\n              <Col xs={7} className=\"exam\">\r\n                <Row className=\"exam__title justify-content-center\">\r\n                  <Col xs=\"auto\">\r\n                    <h4>{examinfo.name}</h4>\r\n                  </Col>\r\n                </Row>\r\n                {examinfo.mcqQuestions[index].mcqQuestionId.description ? (\r\n                  <Row className=\"exam__description\">\r\n                    <Col>\r\n                      <h5>\r\n                        {examinfo.mcqQuestions[index].mcqQuestionId.description}\r\n                      </h5>\r\n                    </Col>\r\n                  </Row>\r\n                ) : null}\r\n                <Row className=\"d-flex justify-content-between exam__question\">\r\n                  <Col>\r\n                    <h5>\r\n                      {examinfo.mcqQuestions[index].mcqQuestionId.mainQuestion}\r\n                    </h5>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                    <p style={{ fontSize: \"1vw\" }}>\r\n                      Marks: {examinfo.mcqQuestions[index].mcqQuestionId.marks}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"exam__options\">\r\n                  <Col xs={12}>\r\n                    {/* <FormControl component=\"fieldset\" fullWidth>\r\n                      <RadioGroup\r\n                        aria-label=\"ans\"\r\n                        name=\"ans\"\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                      >\r\n                        <Row className=\"option\" xs={12}>\r\n                          <Col xs={12}>\r\n                            <FormControlLabel\r\n                              value={\r\n                                examinfo.mcqQuestions[index].mcqQuestionId\r\n                                  .options[0].option\r\n                              }\r\n                              control={<Radio color=\"primary\" />}\r\n                              label={\r\n                                examinfo.mcqQuestions[index].mcqQuestionId\r\n                                  .options[0].option\r\n                              }\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"option\">\r\n                          <Col xs={12}>\r\n                            <FormControlLabel\r\n                              value={\r\n                                examinfo.mcqQuestions[index].mcqQuestionId\r\n                                  .options[1].option\r\n                              }\r\n                              control={<Radio color=\"primary\" />}\r\n                              label={\r\n                                examinfo.mcqQuestions[index].mcqQuestionId\r\n                                  .options[1].option\r\n                              }\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"option\">\r\n                          <Col xs={12}>\r\n                            <FormControlLabel\r\n                              value={\r\n                                examinfo.mcqQuestions[index].mcqQuestionId\r\n                                  .options[2].option\r\n                              }\r\n                              control={<Radio color=\"primary\" />}\r\n                              label={\r\n                                examinfo.mcqQuestions[index].mcqQuestionId\r\n                                  .options[2].option\r\n                              }\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"option\">\r\n                          <Col xs={12}>\r\n                            <FormControlLabel\r\n                              value={\r\n                                examinfo.mcqQuestions[index].mcqQuestionId\r\n                                  .options[3].option\r\n                              }\r\n                              control={<Radio color=\"primary\" />}\r\n                              label={\r\n                                examinfo.mcqQuestions[index].mcqQuestionId\r\n                                  .options[3].option\r\n                              }\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </RadioGroup>\r\n                    </FormControl> */}\r\n                    <TextField\r\n                      id=\"ans\"\r\n                      label=\"Answer\"\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      fullWidth\r\n                      multiline\r\n                      rows={5}\r\n                      variant=\"standard\"\r\n                      value={answer}\r\n                      onChange={handleAnswer}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"feedback\">\r\n                  <Col>\r\n                    <p>\r\n                      Something wrong with this question?\r\n                      <a onClick={handleFeedbackOpen}>\r\n                        <b> Give Feedback</b>\r\n                      </a>\r\n                    </p>\r\n                    <Dialog\r\n                      open={openFeedback}\r\n                      onClose={handleClose}\r\n                      aria-labelledby=\"form-dialog-title\"\r\n                    >\r\n                      <DialogContent>\r\n                        <DialogTitle>\r\n                          Let your teacher know what is wrong\r\n                        </DialogTitle>\r\n                        <TextField\r\n                          autoFocus\r\n                          margin=\"dense\"\r\n                          id=\"feedback\"\r\n                          label=\"Feedback\"\r\n                          fullWidth\r\n                          multiline\r\n                          rows={3}\r\n                          variant=\"outlined\"\r\n                          value={feedback}\r\n                          onChange={handleFeedback}\r\n                        />\r\n                      </DialogContent>\r\n                      <DialogActions>\r\n                        <Button onClick={handleFeedbackClose} color=\"default\">\r\n                          Cancel\r\n                        </Button>\r\n                        <Button onClick={handleFeedbackClose} color=\"primary\">\r\n                          Send\r\n                        </Button>\r\n                      </DialogActions>\r\n                    </Dialog>\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"exam__buttons d-flex justify-content-between\">\r\n                  <Col>\r\n                    <span className=\"timer\">\r\n                      <b>\r\n                        {/* <div id=\"countdown\"></div> */}\r\n                        {seconds == 0 ? \"Exam Finished!\" : seconds}\r\n                      </b>\r\n                    </span>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={nextQuestion}\r\n                      disableElevation\r\n                      disabled={disableNextButton}\r\n                      style={{ backgroundColor: \"#3F7CAC\" }}\r\n                      // disabled={\r\n                      //   index + 1 == examinfo.mcqQuestions.length && true\r\n                      // }\r\n                    >\r\n                      Next\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      );\r\n  } else return <LinearIndeterminate />;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Exam\\Exam.js",["185","186","187","188","189"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CircularProgress,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  Menu,\r\n  MenuItem,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > * + *\": {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Exam(props) {\r\n  // const { match } = props;\r\n\r\n  // console.log(\"Exam id\",match);\r\n  console.log(\"props... \", props);\r\n\r\n  let { id } = useParams();\r\n  console.log(\"ID\", id);\r\n\r\n  const [examData, setExamData] = useState(null);\r\n\r\n  const [timer, setTimer] = useState(null);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (props.userInfo)\r\n      axios.get(`${props.userInfo.role}/exam/${id}`).then((response) => {\r\n        const data = response.data;\r\n        setExamData(data.result.data);\r\n      });\r\n  }, []);\r\n\r\n  console.log(\"Exam Data\", examData);\r\n\r\n  let examQuestionUi;\r\n\r\n  if (examData && examData.mcqQuestions) {\r\n    examQuestionUi = examData.mcqQuestions.map((question) => {\r\n      return (\r\n        <Card>\r\n          <CardContent>\r\n            <Typography>{question.mcqQuestionId.description}</Typography>\r\n\r\n            <Typography>{question.mcqQuestionId.mainQuestion}</Typography>\r\n\r\n            <List>\r\n              {question.mcqQuestionId.options.map((options) => {\r\n                return (\r\n                  <ListItem>\r\n                    <CardActions Button>{options.option}</CardActions>\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </CardContent>\r\n          <Divider />\r\n        </Card>\r\n      );\r\n    });\r\n  } else if (examData && examData.cqQuestions) {\r\n    examQuestionUi = examData.cqQuestions.map((question) => {\r\n      return (\r\n        <Card>\r\n          <CardContent>\r\n            <Typography>{question.cqQuestionId.description}</Typography>\r\n\r\n            <Typography>{question.cqQuestionId.mainQuestion}</Typography>\r\n            <TextField\r\n              id=\"outlined-textarea\"\r\n              label=\"Ans\"\r\n              placeholder=\"Write here\"\r\n              multiline\r\n              variant=\"outlined\"\r\n            />\r\n          </CardContent>\r\n          <Divider />\r\n        </Card>\r\n      );\r\n    });\r\n  }\r\n\r\n  let x = 0;\r\n\r\n  if (examData)\r\n    setInterval(() => {\r\n      const date = new Date();\r\n      setTimer(date.getSeconds());\r\n    }, 1000);\r\n\r\n  if (examData)\r\n    return (\r\n      <Container>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={8}>\r\n            <Paper>\r\n              <Typography variant=\"h2\" component=\"h2\">\r\n                {examData.name}\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Paper>\r\n              {\" \"}\r\n              <h3>{timer}</h3>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid>{examQuestionUi}</Grid>\r\n        <Button onClick={() => x++}>Next</Button>\r\n      </Container>\r\n    );\r\n  else return <CircularProgress />;\r\n}\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\LiveExam\\Result.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Generic\\Loader.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\CreateExam\\ExamType.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Students.js",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"import React from \"react\";\r\nimport { Col, Container, Row, Card, Alert, Table } from \"react-bootstrap\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { Box, CardContent, MenuList, Typography } from \"@material-ui/core\";\r\n\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Form,\r\n  Spinner,\r\n  Jumbotron,\r\n  Tab,\r\n  TabContainer,\r\n  ListGroup,\r\n  TabContent,\r\n  TabPane,\r\n} from \"react-bootstrap\";\r\n\r\nconst Students = (props) => {\r\n  console.log(props.userInfo);\r\n  console.log(props.courseData);\r\n\r\n  let x = 1;\r\n  const tableBody = props.courseData.students.map((students) => {\r\n    return (\r\n      <>\r\n        <tr>\r\n          <td>{x++}</td>\r\n          {/* <td> */}\r\n          {/* <span class=\"crown badge\" style={{ fontSize: \"20px\" }}>\r\n              {x == 2 ? \"👑\" : \"\"}\r\n            </span> */}\r\n          {/* {students.student} */}\r\n          {/* </td> */}\r\n          {/*   <td>{exam.examType}</td>\r\n          <td>{exam.totalMarks}</td>\r\n          <td>{`${Math.round(exam.totalTime / 60)} min : ${\r\n            exam.totalTime % 60\r\n          } sec`}</td>\r\n          <td>{exam.when}</td>\r\n          <td>{exam.date.toString()}</td>\r\n          {props.userInfo.role === \"Teacher\" ? (\r\n            <td>\r\n              <Button href={`/profile/${tudents.student}`} variant=\"primary\">\r\n                Examine\r\n              </Button>\r\n            </td>\r\n          ) : (\r\n            null\r\n          )} */}\r\n\r\n          <td>\r\n            <Button href={`/profile/${students.student}`} variant=\"primary\">\r\n              Examine\r\n            </Button>\r\n          </td>\r\n\r\n          {/* <td>\r\n            <Button href={`/${exam.when}-exam/${exam._id}`} variant=\"info\">\r\n              View\r\n            </Button>\r\n          </td> */}\r\n        </tr>\r\n      </>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <table\r\n      className=\"table table-hover table-striped table-light\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <thead className=\"thead-dark\">\r\n        <tr>\r\n          <th>#</th>\r\n          {/* <th>Exam Name</th>\r\n          <th>Exam Type</th>\r\n          <th>Total Marks</th>\r\n          <th>Total Time</th>\r\n\r\n          <th>Condition</th>\r\n          <th>Date</th>\r\n          {props.userInfo.role === \"Teacher\" ? <th>Check</th> : null} */}\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>{tableBody}</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Students;\r\n","E:\\Project 350\\WillChange\\client\\src\\Components\\Course\\Exams.js",[],"E:\\Project 350\\WillChange\\client\\src\\Components\\Profile\\Profile.js",["210","211"],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":4,"column":8,"nodeType":"218","messageId":"219","endLine":4,"endColumn":22},{"ruleId":"216","severity":1,"message":"220","line":29,"column":9,"nodeType":"218","messageId":"219","endLine":29,"endColumn":17},{"ruleId":"216","severity":1,"message":"221","line":31,"column":10,"nodeType":"218","messageId":"219","endLine":31,"endColumn":23},{"ruleId":"216","severity":1,"message":"222","line":31,"column":25,"nodeType":"218","messageId":"219","endLine":31,"endColumn":41},{"ruleId":"216","severity":1,"message":"223","line":33,"column":7,"nodeType":"218","messageId":"219","endLine":33,"endColumn":16},{"ruleId":"216","severity":1,"message":"224","line":60,"column":9,"nodeType":"218","messageId":"219","endLine":60,"endColumn":26},{"ruleId":"225","severity":1,"message":"226","line":26,"column":3,"nodeType":"227","messageId":"228","endLine":26,"endColumn":7},{"ruleId":"229","severity":1,"message":"230","line":120,"column":30,"nodeType":"231","messageId":"232","endLine":120,"endColumn":52,"fix":"233"},{"ruleId":"229","severity":1,"message":"230","line":122,"column":30,"nodeType":"231","messageId":"232","endLine":122,"endColumn":43,"fix":"234"},{"ruleId":"235","severity":1,"message":"236","line":73,"column":43,"nodeType":"237","endLine":73,"endColumn":66},{"ruleId":"238","severity":1,"message":"239","line":109,"column":32,"nodeType":"240","messageId":"228","endLine":109,"endColumn":34},{"ruleId":"235","severity":1,"message":"236","line":158,"column":13,"nodeType":"237","endLine":158,"endColumn":34},{"ruleId":"216","severity":1,"message":"241","line":2,"column":17,"nodeType":"218","messageId":"219","endLine":2,"endColumn":23},{"ruleId":"242","severity":1,"message":"243","line":25,"column":6,"nodeType":"244","endLine":25,"endColumn":8,"suggestions":"245"},{"ruleId":"216","severity":1,"message":"246","line":2,"column":16,"nodeType":"218","messageId":"219","endLine":2,"endColumn":24},{"ruleId":"216","severity":1,"message":"247","line":2,"column":26,"nodeType":"218","messageId":"219","endLine":2,"endColumn":35},{"ruleId":"216","severity":1,"message":"248","line":27,"column":10,"nodeType":"218","messageId":"219","endLine":27,"endColumn":15},{"ruleId":"225","severity":1,"message":"226","line":45,"column":3,"nodeType":"227","messageId":"228","endLine":45,"endColumn":7},{"ruleId":"216","severity":1,"message":"249","line":59,"column":10,"nodeType":"218","messageId":"219","endLine":59,"endColumn":22},{"ruleId":"216","severity":1,"message":"250","line":94,"column":7,"nodeType":"218","messageId":"219","endLine":94,"endColumn":11},{"ruleId":"216","severity":1,"message":"251","line":112,"column":10,"nodeType":"218","messageId":"219","endLine":112,"endColumn":23},{"ruleId":"216","severity":1,"message":"252","line":112,"column":25,"nodeType":"218","messageId":"219","endLine":112,"endColumn":41},{"ruleId":"216","severity":1,"message":"253","line":114,"column":10,"nodeType":"218","messageId":"219","endLine":114,"endColumn":21},{"ruleId":"216","severity":1,"message":"254","line":116,"column":9,"nodeType":"218","messageId":"219","endLine":116,"endColumn":28},{"ruleId":"216","severity":1,"message":"255","line":124,"column":9,"nodeType":"218","messageId":"219","endLine":124,"endColumn":21},{"ruleId":"216","severity":1,"message":"256","line":290,"column":11,"nodeType":"218","messageId":"219","endLine":290,"endColumn":24},{"ruleId":"257","severity":1,"message":"258","line":343,"column":51,"nodeType":"259","messageId":"260","endLine":343,"endColumn":53},{"ruleId":"238","severity":1,"message":"261","line":344,"column":15,"nodeType":"240","messageId":"228","endLine":344,"endColumn":17},{"ruleId":"257","severity":1,"message":"262","line":44,"column":39,"nodeType":"259","messageId":"263","endLine":44,"endColumn":41},{"ruleId":"257","severity":1,"message":"262","line":46,"column":38,"nodeType":"259","messageId":"263","endLine":46,"endColumn":40},{"ruleId":"238","severity":1,"message":"239","line":48,"column":27,"nodeType":"240","messageId":"228","endLine":48,"endColumn":29},{"ruleId":"257","severity":1,"message":"262","line":53,"column":39,"nodeType":"259","messageId":"263","endLine":53,"endColumn":41},{"ruleId":"238","severity":1,"message":"239","line":55,"column":27,"nodeType":"240","messageId":"228","endLine":55,"endColumn":29},{"ruleId":"216","severity":1,"message":"264","line":4,"column":3,"nodeType":"218","messageId":"219","endLine":4,"endColumn":9},{"ruleId":"216","severity":1,"message":"265","line":8,"column":3,"nodeType":"218","messageId":"219","endLine":8,"endColumn":8},{"ruleId":"216","severity":1,"message":"266","line":10,"column":3,"nodeType":"218","messageId":"219","endLine":10,"endColumn":10},{"ruleId":"216","severity":1,"message":"267","line":13,"column":3,"nodeType":"218","messageId":"219","endLine":13,"endColumn":12},{"ruleId":"216","severity":1,"message":"268","line":16,"column":3,"nodeType":"218","messageId":"219","endLine":16,"endColumn":15},{"ruleId":"216","severity":1,"message":"269","line":18,"column":3,"nodeType":"218","messageId":"219","endLine":18,"endColumn":13},{"ruleId":"216","severity":1,"message":"270","line":19,"column":3,"nodeType":"218","messageId":"219","endLine":19,"endColumn":10},{"ruleId":"216","severity":1,"message":"271","line":31,"column":8,"nodeType":"218","messageId":"219","endLine":31,"endColumn":24},{"ruleId":"238","severity":1,"message":"239","line":86,"column":34,"nodeType":"240","messageId":"228","endLine":86,"endColumn":36},{"ruleId":"238","severity":1,"message":"239","line":111,"column":34,"nodeType":"240","messageId":"228","endLine":111,"endColumn":36},{"ruleId":"242","severity":1,"message":"272","line":127,"column":6,"nodeType":"244","endLine":127,"endColumn":8,"suggestions":"273"},{"ruleId":"216","severity":1,"message":"274","line":97,"column":10,"nodeType":"218","messageId":"219","endLine":97,"endColumn":21},{"ruleId":"216","severity":1,"message":"275","line":21,"column":10,"nodeType":"218","messageId":"219","endLine":21,"endColumn":15},{"ruleId":"216","severity":1,"message":"276","line":23,"column":9,"nodeType":"218","messageId":"219","endLine":23,"endColumn":21},{"ruleId":"216","severity":1,"message":"277","line":2,"column":27,"nodeType":"218","messageId":"219","endLine":2,"endColumn":33},{"ruleId":"242","severity":1,"message":"278","line":42,"column":30,"nodeType":"218","endLine":42,"endColumn":37},{"ruleId":"238","severity":1,"message":"239","line":15,"column":18,"nodeType":"240","messageId":"228","endLine":15,"endColumn":20},{"ruleId":"279","severity":1,"message":"280","line":13,"column":3,"nodeType":"281","messageId":"282","endLine":15,"endColumn":4},{"ruleId":"216","severity":1,"message":"283","line":173,"column":11,"nodeType":"218","messageId":"219","endLine":173,"endColumn":27},{"ruleId":"216","severity":1,"message":"284","line":2,"column":8,"nodeType":"218","messageId":"219","endLine":2,"endColumn":13},{"ruleId":"216","severity":1,"message":"285","line":3,"column":8,"nodeType":"218","messageId":"219","endLine":3,"endColumn":18},{"ruleId":"216","severity":1,"message":"286","line":4,"column":8,"nodeType":"218","messageId":"219","endLine":4,"endColumn":24},{"ruleId":"216","severity":1,"message":"287","line":5,"column":8,"nodeType":"218","messageId":"219","endLine":5,"endColumn":19},{"ruleId":"216","severity":1,"message":"288","line":10,"column":8,"nodeType":"218","messageId":"219","endLine":10,"endColumn":25},{"ruleId":"216","severity":1,"message":"289","line":20,"column":3,"nodeType":"218","messageId":"219","endLine":20,"endColumn":17},{"ruleId":"216","severity":1,"message":"290","line":45,"column":9,"nodeType":"218","messageId":"219","endLine":45,"endColumn":16},{"ruleId":"216","severity":1,"message":"276","line":99,"column":9,"nodeType":"218","messageId":"219","endLine":99,"endColumn":21},{"ruleId":"216","severity":1,"message":"291","line":158,"column":15,"nodeType":"218","messageId":"219","endLine":158,"endColumn":22},{"ruleId":"242","severity":1,"message":"292","line":185,"column":6,"nodeType":"244","endLine":185,"endColumn":8,"suggestions":"293"},{"ruleId":"294","severity":1,"message":"295","line":356,"column":23,"nodeType":"296","endLine":356,"endColumn":55},{"ruleId":"238","severity":1,"message":"239","line":398,"column":34,"nodeType":"240","messageId":"228","endLine":398,"endColumn":36},{"ruleId":"216","severity":1,"message":"241","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":23},{"ruleId":"216","severity":1,"message":"297","line":15,"column":3,"nodeType":"218","messageId":"219","endLine":15,"endColumn":7},{"ruleId":"216","severity":1,"message":"298","line":16,"column":3,"nodeType":"218","messageId":"219","endLine":16,"endColumn":11},{"ruleId":"216","severity":1,"message":"290","line":45,"column":9,"nodeType":"218","messageId":"219","endLine":45,"endColumn":16},{"ruleId":"242","severity":1,"message":"243","line":53,"column":6,"nodeType":"244","endLine":53,"endColumn":8,"suggestions":"299"},{"ruleId":"216","severity":1,"message":"300","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":13},{"ruleId":"216","severity":1,"message":"301","line":2,"column":15,"nodeType":"218","messageId":"219","endLine":2,"endColumn":24},{"ruleId":"216","severity":1,"message":"302","line":2,"column":26,"nodeType":"218","messageId":"219","endLine":2,"endColumn":29},{"ruleId":"216","severity":1,"message":"303","line":2,"column":31,"nodeType":"218","messageId":"219","endLine":2,"endColumn":35},{"ruleId":"216","severity":1,"message":"248","line":2,"column":37,"nodeType":"218","messageId":"219","endLine":2,"endColumn":42},{"ruleId":"216","severity":1,"message":"304","line":2,"column":44,"nodeType":"218","messageId":"219","endLine":2,"endColumn":49},{"ruleId":"216","severity":1,"message":"298","line":3,"column":8,"nodeType":"218","messageId":"219","endLine":3,"endColumn":16},{"ruleId":"216","severity":1,"message":"305","line":4,"column":10,"nodeType":"218","messageId":"219","endLine":4,"endColumn":13},{"ruleId":"216","severity":1,"message":"306","line":4,"column":15,"nodeType":"218","messageId":"219","endLine":4,"endColumn":26},{"ruleId":"216","severity":1,"message":"307","line":4,"column":28,"nodeType":"218","messageId":"219","endLine":4,"endColumn":36},{"ruleId":"216","severity":1,"message":"308","line":4,"column":38,"nodeType":"218","messageId":"219","endLine":4,"endColumn":48},{"ruleId":"216","severity":1,"message":"265","line":8,"column":3,"nodeType":"218","messageId":"219","endLine":8,"endColumn":8},{"ruleId":"216","severity":1,"message":"309","line":9,"column":3,"nodeType":"218","messageId":"219","endLine":9,"endColumn":7},{"ruleId":"216","severity":1,"message":"266","line":10,"column":3,"nodeType":"218","messageId":"219","endLine":10,"endColumn":10},{"ruleId":"216","severity":1,"message":"267","line":11,"column":3,"nodeType":"218","messageId":"219","endLine":11,"endColumn":12},{"ruleId":"216","severity":1,"message":"310","line":12,"column":3,"nodeType":"218","messageId":"219","endLine":12,"endColumn":6},{"ruleId":"216","severity":1,"message":"268","line":13,"column":3,"nodeType":"218","messageId":"219","endLine":13,"endColumn":15},{"ruleId":"216","severity":1,"message":"311","line":14,"column":3,"nodeType":"218","messageId":"219","endLine":14,"endColumn":12},{"ruleId":"216","severity":1,"message":"269","line":15,"column":3,"nodeType":"218","messageId":"219","endLine":15,"endColumn":13},{"ruleId":"216","severity":1,"message":"270","line":16,"column":3,"nodeType":"218","messageId":"219","endLine":16,"endColumn":10},{"ruleId":"216","severity":1,"message":"267","line":3,"column":8,"nodeType":"218","messageId":"219","endLine":3,"endColumn":17},{"ruleId":"225","severity":1,"message":"226","line":26,"column":5,"nodeType":"227","messageId":"228","endLine":26,"endColumn":9},"no-native-reassign",["312"],"no-negated-in-lhs",["313"],"no-unused-vars","'socketIOClient' is defined but never used.","Identifier","unusedVar","'ENDPOINT' is assigned a value but never used.","'notifications' is assigned a value but never used.","'setnotifications' is assigned a value but never used.","'socketRef' is assigned a value but never used.","'createCourseModal' is assigned a value but never used.","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected","no-useless-computed-key","Unnecessarily computed property [\"error\"] found.","Property","unnecessarilyComputedProperty",{"range":"314","text":"315"},{"range":"316","text":"315"},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'props.userInfo'. Either include them or remove the dependency array.","ArrayExpression",["317"],"'Snackbar' is defined but never used.","'TextField' is defined but never used.","'Alert' is defined but never used.","'snackbarOpen' is assigned a value but never used.","'days' is assigned a value but never used.","'timerDeadline' is assigned a value but never used.","'setTimerDeadLine' is assigned a value but never used.","'snackbarMsg' is assigned a value but never used.","'handleSnackbarClose' is assigned a value but never used.","'createCourse' is assigned a value but never used.","'reloadHandler' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Expected '!==' and instead saw '!='.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'Button' is defined but never used.","'Modal' is defined but never used.","'Spinner' is defined but never used.","'Jumbotron' is defined but never used.","'TabContainer' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'CircularProgress' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'role'. Either include them or remove the dependency array.",["318"],"'isApiLoaded' is assigned a value but never used.","'value' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Router' is defined but never used.","The ref value 'interval.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'interval.current' to a variable inside the effect, and use that variable in the cleanup function.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'questionsCreated' is assigned a value but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'FormControl' is defined but never used.","'DialogContentText' is defined but never used.","'LinearProgress' is defined but never used.","'classes' is assigned a value but never used.","'timeout' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'index', and 'submitAnswers'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSeconds' needs the current value of 'index'.",["319"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Menu' is defined but never used.","'MenuItem' is defined but never used.",["320"],"'Col' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Card' is defined but never used.","'Table' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'MenuList' is defined but never used.","'Typography' is defined but never used.","'Form' is defined but never used.","'Tab' is defined but never used.","'ListGroup' is defined but never used.","no-global-assign","no-unsafe-negation",[2995,3004],"\"error\"",[3064,3073],{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"321","fix":"327"},"Update the dependencies array to be: [id, props.userInfo]",{"range":"328","text":"329"},"Update the dependencies array to be: [id, role]",{"range":"330","text":"331"},"Update the dependencies array to be: [id, index, submitAnswers]",{"range":"332","text":"333"},{"range":"334","text":"329"},[766,768],"[id, props.userInfo]",[3081,3083],"[id, role]",[5254,5256],"[id, index, submitAnswers]",[1090,1092]]