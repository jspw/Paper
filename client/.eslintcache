[{"/home/jspw/Documents/Projects/Paper/client/src/index.js":"1","/home/jspw/Documents/Projects/Paper/client/src/reportWebVitals.js":"2","/home/jspw/Documents/Projects/Paper/client/src/Containers/App.js":"3","/home/jspw/Documents/Projects/Paper/client/src/Components/Layout/Layout.js":"4","/home/jspw/Documents/Projects/Paper/client/src/Components/Authentication/SignIn.js":"5","/home/jspw/Documents/Projects/Paper/client/src/Components/Profile/Profile.js":"6","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Course.js":"7","/home/jspw/Documents/Projects/Paper/client/src/Components/Exam/Exam.js":"8","/home/jspw/Documents/Projects/Paper/client/src/Components/UpcomingExam/UpcomingExam.js":"9","/home/jspw/Documents/Projects/Paper/client/src/Components/404/Error404.js":"10","/home/jspw/Documents/Projects/Paper/client/src/Components/Notifications/Notification.js":"11","/home/jspw/Documents/Projects/Paper/client/src/Components/Navbar/Navbar.js":"12","/home/jspw/Documents/Projects/Paper/client/src/Components/Authentication/SignUp.js":"13","/home/jspw/Documents/Projects/Paper/client/src/Components/PreviousExam/PreviousExam.js":"14","/home/jspw/Documents/Projects/Paper/client/src/Components/PreviousExam/Examine.js":"15","/home/jspw/Documents/Projects/Paper/client/src/Components/Home/Home.js":"16","/home/jspw/Documents/Projects/Paper/client/src/Components/LiveExam/LiveExam.js":"17","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Sidebar.js":"18","/home/jspw/Documents/Projects/Paper/client/src/Components/PreviousExam/MarkSheet.js":"19","/home/jspw/Documents/Projects/Paper/client/src/Components/Generic/Loader.js":"20","/home/jspw/Documents/Projects/Paper/client/src/Components/Generic/Forms.js":"21","/home/jspw/Documents/Projects/Paper/client/src/Components/Timer/Timer.js":"22","/home/jspw/Documents/Projects/Paper/client/src/Components/PreviousExam/ExamInfo.js":"23","/home/jspw/Documents/Projects/Paper/client/src/Components/LiveExam/Result.js":"24","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Info.js":"25","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Teacher.js":"26","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Exams.js":"27","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Students.js":"28","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/CreateExam/ExamType.js":"29","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/CreateExam/CreateExam.js":"30","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/CreateExam/Question.js":"31"},{"size":582,"mtime":1612986795083,"results":"32","hashOfConfig":"33"},{"size":362,"mtime":1611434180840,"results":"34","hashOfConfig":"33"},{"size":4270,"mtime":1613089043364,"results":"35","hashOfConfig":"33"},{"size":2701,"mtime":1612942178175,"results":"36","hashOfConfig":"33"},{"size":4198,"mtime":1613029845290,"results":"37","hashOfConfig":"33"},{"size":7776,"mtime":1613089043364,"results":"38","hashOfConfig":"33"},{"size":1034,"mtime":1612987197886,"results":"39","hashOfConfig":"33"},{"size":3118,"mtime":1612748682822,"results":"40","hashOfConfig":"33"},{"size":3621,"mtime":1613081745223,"results":"41","hashOfConfig":"33"},{"size":714,"mtime":1613012721054,"results":"42","hashOfConfig":"33"},{"size":4101,"mtime":1613089043364,"results":"43","hashOfConfig":"33"},{"size":9798,"mtime":1613158719324,"results":"44","hashOfConfig":"33"},{"size":9675,"mtime":1613029845286,"results":"45","hashOfConfig":"33"},{"size":13421,"mtime":1613377244396,"results":"46","hashOfConfig":"33"},{"size":12502,"mtime":1613409159598,"results":"47","hashOfConfig":"33"},{"size":20210,"mtime":1613078788426,"results":"48","hashOfConfig":"33"},{"size":17066,"mtime":1613256499108,"results":"49","hashOfConfig":"33"},{"size":4835,"mtime":1613034623518,"results":"50","hashOfConfig":"33"},{"size":4136,"mtime":1613409496218,"results":"51","hashOfConfig":"33"},{"size":511,"mtime":1612852176912,"results":"52","hashOfConfig":"33"},{"size":6926,"mtime":1613002385454,"results":"53","hashOfConfig":"33"},{"size":2651,"mtime":1613034790270,"results":"54","hashOfConfig":"33"},{"size":13535,"mtime":1613013310296,"results":"55","hashOfConfig":"33"},{"size":1780,"mtime":1613082509331,"results":"56","hashOfConfig":"33"},{"size":879,"mtime":1613034623514,"results":"57","hashOfConfig":"33"},{"size":914,"mtime":1613034623518,"results":"58","hashOfConfig":"33"},{"size":4670,"mtime":1613089137089,"results":"59","hashOfConfig":"33"},{"size":2287,"mtime":1612972660959,"results":"60","hashOfConfig":"33"},{"size":2869,"mtime":1612942178171,"results":"61","hashOfConfig":"33"},{"size":5312,"mtime":1613076313803,"results":"62","hashOfConfig":"33"},{"size":15066,"mtime":1613077099726,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1m3t5pz",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"66"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"66"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"66"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"66"},"/home/jspw/Documents/Projects/Paper/client/src/index.js",[],["149","150"],"/home/jspw/Documents/Projects/Paper/client/src/reportWebVitals.js",[],"/home/jspw/Documents/Projects/Paper/client/src/Containers/App.js",["151","152","153","154"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport socketIOClient from \"socket.io-client\";\nimport Navigation from \"../Components/Navbar/Navbar\";\nimport SignIn from \"../Components/Authentication/SignIn\";\nimport SignUp from \"../Components/Authentication/SignUp\";\nimport Home from \"../Components/Home/Home\";\nimport Profile from \"../Components/Profile/Profile\";\nimport axios from \"axios\";\nimport Layout from \"../Components/Layout/Layout\";\nimport Course from \"../Components/Course/Course\";\nimport Exam from \"../Components/Exam/Exam\";\nimport LiveExam from \"../Components/LiveExam/LiveExam\";\nimport PreviousExam from \"../Components/PreviousExam/PreviousExam\";\nimport UpcomingExam from \"../Components/UpcomingExam/UpcomingExam\";\nimport Examine from \"../Components/PreviousExam/Examine\";\nimport Error404 from \"../Components/404/Error404\";\nimport Notifications from \"../Components/Notifications/Notification\";\nimport \"./App.css\";\n\nlet userdata = localStorage.getItem(\"data\");\nuserdata = JSON.parse(userdata);\n\nfunction App() {\n  const [loginStatus, setloginStatus] = useState(null);\n\n  const [universityInfo, setUniversityInfo] = useState(null);\n\n  const [userInfo, setUserInfo] = useState(null);\n\n  const ENDPOINT = \"http://127.0.0.1:8080/\";\n\n  const [notifications, setnotifications] = useState(null);\n\n  let socketRef = useRef(null);\n\n  useEffect(() => {\n    if (userdata) {\n      axios\n        .get(`${userdata.role}/user/${userdata.id}`)\n        .then((result) => {\n          setloginStatus(result.data.status);\n          setUserInfo(result.data.result.data);\n          localStorage.setItem(\"data\", JSON.stringify(result.data.result.data));\n          console.log(\"UserInfo api call\", result);\n        })\n        .catch((error) => {\n          console.log(error);\n          setloginStatus(\"Failed\");\n          console.log(\"Error api call\", error);\n        });\n    } else setloginStatus(\"Failed\");\n    axios\n      .get(\"/notifications\")\n      .then((result) => {\n        console.log(\"Notifications \", result.data.result.data);\n        setnotifications(result.data.result.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    axios\n      .get(\"university/all\")\n      .then((response) => {\n        const data = response.data;\n\n        if (data.status === \"OK\") {\n          setUniversityInfo(data.result.data.universities);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navigation\n          loginStatus={loginStatus}\n          notifications={notifications}\n          userInfo={userInfo}\n        />\n\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={() => (\n              <Home universityInfo={universityInfo} userInfo={userInfo} />\n            )}\n          />\n          <Route path=\"/notifications\" exact component={Notifications}/>\n          <Route path=\"/examine/:id\" exact render={() => <Examine />} />\n          <Route\n            path=\"/profile\"\n            exact\n            render={() => <Profile userInfo={userInfo} />}\n          />\n\n          <Route path=\"/signUp\" exact component={SignUp} />\n          <Route path=\"/signIn\" exact component={SignIn} />\n          <Route\n            path=\"/course/:id\"\n            render={() => (\n              <Course universityInfo={universityInfo} userInfo={userInfo} />\n            )}\n          />\n\n          <Route\n            path=\"/live-exam/:id\"\n            exact\n            render={() => <LiveExam userInfo={userInfo} />}\n          />\n\n          <Route\n            path=\"/exam/:id\"\n            exact\n            render={() => <Exam userInfo={userInfo} />}\n          />\n          <Route\n            path=\"/previous-exam/:id\"\n            exact\n            render={() => <PreviousExam userInfo={userInfo} />}\n          />\n          <Route\n            path=\"/upcoming-exam/:id\"\n            exact\n            render={() => <UpcomingExam userInfo={userInfo} />}\n          />\n\n          <Route path=\"*\" exact={true} component={Error404} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Layout/Layout.js",["155"],"import React, { useState } from \"react\";\nimport {\n  Button,\n  Col,\n  Container,\n  Row,\n  Modal,\n  Form,\n} from \"react-bootstrap\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst Layout = (props) => {\n  const [showModal, setShowModal] = useState(true);\n\n  const handleCloseModal = () => setShowModal(false);\n  const handleShowModal = () => setShowModal(true);\n\n  const SelectForm = () => {\n    let items = [];\n\n    if (props.universityInfo) {\n      props.universityInfo.forEach((element) => {\n        if (element.shortform === props.userInfo.varsity) {\n          element.departments.forEach((dept) => {\n            // console.log(dept);\n            items.push({\n              id: dept._id,\n              value: dept.shortform,\n            });\n          });\n        }\n      });\n    }\n\n    const menuItems = items.map((item, i) => {\n      // console.log(items);\n      return (\n        <MenuItem key={i} value={item.id}>\n          {item.value}\n        </MenuItem>\n      );\n    });\n\n    return (\n      <FormControl variant=\"outlined\" fullWidth required>\n        <InputLabel>{props.label}</InputLabel>\n        <Select value={props.values} label={props.label}>\n          <MenuItem disabled>\n            <em>{props.label}</em>\n          </MenuItem>\n          {menuItems}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  const createCourseModal = (\n    <Modal\n      show={showModal}\n      onHide={handleCloseModal}\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>Create Course</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Row>\n            <Col>\n              <Form.Control placeholder=\"Course Name\" />\n            </Col>\n            <Col>\n              <Form.Control placeholder=\"Code\" />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Control\n                readOnly\n                defaultValue={\n                  props.userInfo ? props.userInfo.varsity : \"Loading\"\n                }\n              />\n            </Col>\n            <Col>\n              <SelectForm />\n            </Col>\n          </Row>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleCloseModal}>\n          Close\n        </Button>\n        <Button variant=\"primary\">Understood</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n\n  return (\n    <Container>\n      <Button onClick={handleShowModal}>Create Course </Button>;\n    </Container>\n  );\n};\n\nexport default Layout;\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Authentication/SignIn.js",[],"/home/jspw/Documents/Projects/Paper/client/src/Components/Profile/Profile.js",["156","157","158"],"import React, { useState, useEffect } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Forms from \"../Generic/Forms\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport \"./Profile.scss\";\nimport { LinearProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  margin: {\n    // margin: theme.spacing(1),\n  },\n  textField: {\n    // width: \"15vw\",\n    // margin: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  shadows: [\"none\"],\n}));\n\nexport default function Profile(props) {\n  let userdata;\n\n  useEffect(() => {\n    userdata = localStorage.getItem(\"data\");\n    userdata = JSON.parse(userdata);\n    // if (userdata) userdata = userdata;\n  }, []);\n\n  console.log(props.userInfo);\n  const classes = useStyles();\n\n  const [values, setValues] = useState({\n    password: \"\",\n    confirmPassword: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    error: \"\",\n  });\n  console.log(values.firstName);\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  if (props.userInfo)\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Row className=\"userName\">\n              <Col>\n                <h3>{props.userInfo.firstName + ' ' + props.userInfo.lastName}</h3>\n                <p>{props.userInfo.role}</p>\n              </Col>\n            </Row>\n            <Row className=\"about\">\n              <Col>\n                <h4>About</h4>\n                <hr />\n                <form>\n                  <Row>\n                    <Col>\n                      <Forms\n                        id=\"firstName\"\n                        type=\"textField\"\n                        label=\"First Name\"\n                        labelWidth={78}\n                        classes={classes}\n                        handleChange={handleChange}\n                        required={false}\n                        defaultValue={props.userInfo.firstName}\n                      />\n                    </Col>\n                    <Col>\n                      <Forms\n                        id=\"lastName\"\n                        type=\"textField\"\n                        label=\"Last Name\"\n                        labelWidth={78}\n                        classes={classes}\n                        defaultValue={props.userInfo.lastName}\n                        handleChange={handleChange}\n                        required={false}\n                      />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col>\n                      <Forms\n                        id=\"regNo\"\n                        type=\"textField\"\n                        label=\"Registration No\"\n                        labelWidth={120}\n                        classes={classes}\n                        defaultValue={props.userInfo.registrationNo}\n                        handleChange={handleChange}\n                        disabled={true}\n                      />\n                    </Col>\n                    <Col>\n                      <Forms\n                        id=\"session\"\n                        type=\"textField\"\n                        label=\"Session\"\n                        labelWidth={117}\n                        classes={classes}\n                        handleChange={handleChange}\n                        defaultValue={props.userInfo.session}\n                        disabled={true}\n                      />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col>\n                      <Forms\n                        id=\"university\"\n                        type=\"textField\"\n                        label=\"University\"\n                        labelWidth={117}\n                        classes={classes}\n                        handleChange={handleChange}\n                        defaultValue={props.userInfo.varsity}\n                        disabled={true}\n                      />\n                    </Col>\n                    <Col>\n                      <Forms\n                        id=\"department\"\n                        type=\"textField\"\n                        label=\"Department\"\n                        labelWidth={120}\n                        classes={classes}\n                        defaultValue={props.userInfo.department}\n                        handleChange={handleChange}\n                        disabled={true}\n                      />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col>\n                      <Forms\n                        id=\"designation\"\n                        type=\"textField\"\n                        label=\"Designation\"\n                        labelWidth={117}\n                        classes={classes}\n                        handleChange={handleChange}\n                        defaultValue={\n                          props.userInfo.role === \"Student\"\n                            ? props.userInfo.role\n                            : props.userInfo.designation\n                        }\n                        disabled={true}\n                      />\n                    </Col>\n                    <Col>\n                      <Forms\n                        id=\"email\"\n                        type=\"textField\"\n                        label=\"Email Address\"\n                        labelWidth={120}\n                        classes={classes}\n                        defaultValue={props.userInfo.email}\n                        handleChange={handleChange}\n                        disabled={true}\n                      />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col>\n                      <Forms\n                        id=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        labelWidth={80}\n                        classes={classes}\n                        values={values.password}\n                        handleChange={handleChange}\n                      />\n                    </Col>\n                    <Col>\n                      <Forms\n                        id=\"confirmPassword\"\n                        label=\"Confirm Password\"\n                        type=\"password\"\n                        labelWidth={140}\n                        classes={classes}\n                        values={values.confirmPassword}\n                        handleChange={handleChange}\n                      />\n                    </Col>\n                  </Row>\n                  <Row className=\"justify-content-center\">\n                    <Col xs=\"auto\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        startIcon={<SaveIcon />}\n                        type=\"submit\"\n                        style={{\n                          marginTop: \"15%\",\n                          marginBottom: \"10%\",\n                          backgroundColor: \"#3F7CAC\",\n                        }}\n                      >\n                        Save Changes\n                      </Button>\n                    </Col>\n                  </Row>\n                </form>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    );\n  else return <LinearProgress />;\n}\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Course.js",["159","160"],"import axios from \"axios\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Sidebar from \"./Sidebar\";\nimport \"./Course.scss\";\nimport LinearIndeterminate from \"../Generic/Loader\";\n\nlet userdata = localStorage.getItem(\"data\");\nuserdata = JSON.parse(userdata);\n\nexport default function Course(props) {\n  let { id } = useParams();\n\n  const [courseData, setCourseData] = useState(null);\n\n  console.log(userdata);\n\n  useEffect(() => {\n    if (userdata)\n      axios\n        .get(`${userdata.role}/course/${id}`)\n        .then((response) => {\n          const data = response.data;\n          console.log(data);\n          if (data.status === \"OK\") setCourseData(data.result.data);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n  }, []);\n\n  if (courseData)\n    return (\n      <div className=\"course\">\n        <Sidebar courseData={courseData} userInfo={userdata} />\n      </div>\n    );\n  else return <LinearIndeterminate></LinearIndeterminate>;\n}\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Exam/Exam.js",["161","162","163","164","165"],"import React, { useRef, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CircularProgress,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  makeStyles,\n  Menu,\n  MenuItem,\n  Paper,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    \"& > * + *\": {\n      marginLeft: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function Exam(props) {\n  // const { match } = props;\n\n  // console.log(\"Exam id\",match);\n  console.log(\"props... \", props);\n\n  let { id } = useParams();\n  console.log(\"ID\", id);\n\n  const [examData, setExamData] = useState(null);\n\n  const [timer, setTimer] = useState(null);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (props.userInfo)\n      axios.get(`${props.userInfo.role}/exam/${id}`).then((response) => {\n        const data = response.data;\n        setExamData(data.result.data);\n      });\n  }, []);\n\n  console.log(\"Exam Data\", examData);\n\n  let examQuestionUi;\n\n  if (examData && examData.mcqQuestions) {\n    examQuestionUi = examData.mcqQuestions.map((question) => {\n      return (\n        <Card>\n          <CardContent>\n            <Typography>{question.mcqQuestionId.description}</Typography>\n\n            <Typography>{question.mcqQuestionId.mainQuestion}</Typography>\n\n            <List>\n              {question.mcqQuestionId.options.map((options) => {\n                return (\n                  <ListItem>\n                    <CardActions Button>{options.option}</CardActions>\n                  </ListItem>\n                );\n              })}\n            </List>\n          </CardContent>\n          <Divider />\n        </Card>\n      );\n    });\n  } else if (examData && examData.cqQuestions) {\n    examQuestionUi = examData.cqQuestions.map((question) => {\n      return (\n        <Card>\n          <CardContent>\n            <Typography>{question.cqQuestionId.description}</Typography>\n\n            <Typography>{question.cqQuestionId.mainQuestion}</Typography>\n            <TextField\n              id=\"outlined-textarea\"\n              label=\"Ans\"\n              placeholder=\"Write here\"\n              multiline\n              variant=\"outlined\"\n            />\n          </CardContent>\n          <Divider />\n        </Card>\n      );\n    });\n  }\n\n  let x = 0;\n\n  if (examData)\n    setInterval(() => {\n      const date = new Date();\n      setTimer(date.getSeconds());\n    }, 1000);\n\n  if (examData)\n    return (\n      <Container>\n        <Grid container spacing={3}>\n          <Grid item xs={8}>\n            <Paper>\n              <Typography variant=\"h2\" component=\"h2\">\n                {examData.name}\n              </Typography>\n            </Paper>\n          </Grid>\n          <Grid item xs={4}>\n            <Paper>\n              {\" \"}\n              <h3>{timer}</h3>\n            </Paper>\n          </Grid>\n        </Grid>\n\n        <Grid>{examQuestionUi}</Grid>\n        <Button onClick={() => x++}>Next</Button>\n      </Container>\n    );\n  else return <CircularProgress />;\n}\n","/home/jspw/Documents/Projects/Paper/client/src/Components/UpcomingExam/UpcomingExam.js",["166","167","168","169","170"],"import React from \"react\";\nimport Timer from \"../Timer/Timer\";\nimport { Col, Container, Row, Alert, Table } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\n\nconst UpcomingExam = (props) => {\n  var months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  var days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  const { id } = useParams();\n\n  let userdata;\n  userdata = localStorage.getItem(\"data\");\n  userdata = JSON.parse(userdata);\n\n  let examInfo;\n  if (userdata)\n    userdata.courses.map((course) => {\n      //   console.log(course);\n      course.course.cqExams.map((exam) => {\n        //   console.log(exam.examId._id);\n        if (exam.examId._id == id) {\n          //   console.log(exam);\n          examInfo = exam.examId;\n        }\n      });\n      course.course.mcqExams.map((exam) => {\n        //   console.log(exam.examId._id);\n        if (exam.examId._id == id) examInfo = exam.examId;\n      });\n    });\n\n  console.log(examInfo);\n\n  return (\n    <Container style={{ backgroundColor: \"white\", paddingBottom: \"3%\" }}>\n      <Alert variant=\"primary\">\n        <p className=\"text-center\">Exam Has Not Started Yet</p>\n      </Alert>\n      {/* <Alert variant=\"light\"> */}\n      <h1 className=\"text-center\">{examInfo.name}</h1>\n      {/* </Alert> */}\n\n      <Row>\n        <Col>\n          <Row>\n            <Col>\n              <Table\n                // variant=\"dark\"\n                responsive\n                hover\n                bordered\n                size=\"sm\"\n                bsPrefix=\"table\"\n              >\n                <tbody>\n                  <tr>\n                    <td>Time</td>\n                    <td>\n                      {new Date(examInfo.date).getHours() < 10\n                        ? \"0\" + new Date(examInfo.date).getHours()\n                        : new Date(examInfo.date).getHours()}\n                      :\n                      {new Date(examInfo.date).getMinutes() < 10\n                        ? \"0\" + new Date(examInfo.date).getMinutes()\n                        : new Date(examInfo.date).getMinutes()}{\" \"}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Date</td>\n                    <td>\n                      {new Date(examInfo.date).getDate()}th{\" \"}\n                      {months[new Date(examInfo.date).getMonth()]},\n                      {new Date(examInfo.date).getFullYear()} (\n                      {days[new Date(examInfo.date).getDay()]})\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </Col>\n\n        <Col>\n          <Row>\n            <Col></Col>\n            <Col>\n              <Table\n                // variant=\"dark\"\n                responsive\n                hover\n                bordered\n                size=\"sm\"\n                bsPrefix=\"table\"\n              >\n                <tbody>\n                  <tr>\n                    <td>Total Marks</td>\n                    <td>{examInfo.totalMarks}</td>\n                  </tr>\n                  <tr>\n                    <td>Total Time</td>\n                    <td>{examInfo.totalTime} min</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n      <Timer deadline={examInfo.date} examID={examInfo._id} />\n    </Container>\n  );\n};\n\nexport default UpcomingExam;\n","/home/jspw/Documents/Projects/Paper/client/src/Components/404/Error404.js",[],"/home/jspw/Documents/Projects/Paper/client/src/Components/Notifications/Notification.js",["171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Badge from \"@material-ui/core/Badge\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport { FaUserAlt } from \"react-icons/fa\";\nimport { FaBell } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\nimport { Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nconst ENDPOINT = \"http://localhost:8080\";\n\nexport default function Notifications(params) {\n\n    const [notifies, setnotifies] = useState(null);\n\n\n    useEffect(() => {\n        const socket = socketIOClient(ENDPOINT);\n        axios\n          .get(\"/notifications\")\n          .then((result) => {\n            console.log(\"Notifications \", result.data.result.data);\n            setnotifies(result.data.result.data);\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n    \n        // if (userdata) {\n        // console.log(userdata.department);\n        // socket.on(userdata.department, (data, error) => {\n        //   // setResponse(data);\n        //   console.log(\"data from socket\", data);\n        //   console.log(\"data from socket\", error);\n        //   if (userdata.role === \"Student\") {\n        //     const bal = notifies;\n        //     bal.push(data);\n        //     // setnotifies(data);\n    \n        //     if (userdata.role === \"Teacher\") {\n        //       if (data.type === \"course\")\n        //         setsnackbarMsg(`New Course ${data.name} Invitation For You.`);\n        //       else if (data.type === `exam`)\n        //         setsnackbarMsg(`A new exam  ${data.name} is set to your course.`);\n        //       else if (data.type === `result`)\n        //         setsnackbarMsg(\n        //           `Your CQ Exam (${data.name}) result has been published.`\n        //         );\n        //     }\n        //   }\n        // });\n        // }\n      }, []);\n\n      const joinCourse = (courseID) => {\n\n    console.log(courseID);\n    \n        axios({\n          method: \"POST\",\n          url: `student/course/add`,\n    \n          headers: { \"Content-Type\": \"application/json\" },\n          data: JSON.stringify({\n            course: courseID,\n          }),\n        })\n          .then((response) => {\n            console.log(response.data);\n            if (response.data.status === \"OK\") {\n            //   window.location.reload();\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      };\n\n      let notificationsUI ;\n    if (notifies)\n    notificationsUI = notifies.map((not) => {\n        if (not.type === \"course\")\n          return (\n            <div>\n              You are invited to a new course {not.name}.<br></br>\n              <div className=\"btn-group btn-group-sm\">\n                <button\n                  type=\"button\"\n                  class=\"btn btn-primary\"\n                  onClick={() => joinCourse(not.typeID)}\n                >\n                  Join\n                </button>\n                <p> </p>\n                <button type=\"button\" class=\"btn btn-warning\">\n                  Reject\n                </button>\n              </div>\n            </div>\n          );\n        else if (not.type === \"exam\") {\n          return (\n            <div>\n              <a href={`/course/${not.typeID}`}>\n                A new exam is created {not.name}.\n              </a>\n            </div>\n          );\n        } else if (not.type === \"result\") {\n          return (\n            <div>\n              <a href={`/course/${not.typeID}`}>\n                Your CQ Exam {not.name} result has been published.\n              </a>\n            </div>\n          );\n        }\n      });\n\n      if(notifies){\n          return (notificationsUI)\n      }\n  \n    return (<h1>Loading</h1>)\n}","/home/jspw/Documents/Projects/Paper/client/src/Components/Navbar/Navbar.js",["187","188","189","190","191","192","193","194","195","196","197","198","199","200"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Badge from \"@material-ui/core/Badge\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport { FaUserAlt } from \"react-icons/fa\";\nimport { FaBell } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport socketIOClient from \"socket.io-client\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport axios from \"axios\";\nimport { Button, makeStyles, Snackbar } from \"@material-ui/core\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport AddRoundedIcon from \"@material-ui/icons/AddRounded\";\nconst ENDPOINT = \"http://localhost:8080\";\n\nlet navElements;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function Navigation(props) {\n  const classes = useStyles();\n  let history = useHistory();\n  const [showSign, setShowSign] = useState(true);\n  const navChange = () => setShowSign(false);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const isMenuOpen = Boolean(anchorEl);\n\n  const [anchor, setAnchor] = React.useState(null);\n  const isNotificationOpen = Boolean(anchor);\n\n  const [response, setResponse] = useState([]);\n\n  const [notifies, setnotifies] = useState([]);\n\n  let socketRef = useRef(null);\n\n  const [opensnack, setopensnack] = React.useState(false);\n\n  const [snackbarMsg, setsnackbarMsg] = useState(false);\n\n  const handleSnackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setopensnack(false);\n  };\n\n  console.log(notifies);\n\n  let userdata;\n\n  useEffect(() => {\n    userdata = localStorage.getItem(\"data\");\n    userdata = JSON.parse(userdata);\n    // if (userdata) userdata = userdata;\n  }, []);\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n\n    axios\n      .get(\"/notifications\")\n      .then((result) => {\n        console.log(\"Notifications \", result.data.result.data);\n        setnotifies(result.data.result.data.reverse());\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    if (userdata) {\n      console.log(userdata.department);\n      socket.on(userdata.department, (data, error) => {\n        // setResponse(data);\n        console.log(\"data from socket\", data);\n        console.log(\"data from socket\", error);\n\n        if (userdata.role === \"Student\") {\n          if (data.type === \"course\") {\n            setopensnack(true);\n            setsnackbarMsg(`New Course '${data.name}' Invitation For You.`);\n            setTimeout(function () {\n              window.location.reload();\n            }, 2000);\n          } else if (data.type === `exam`) {\n            setopensnack(true);\n            setsnackbarMsg(`A new exam  '${data.name}' is set to your course.`);\n            setTimeout(function () {  \n              window.location.reload();\n            }, 2000);\n          } else if (data.type === `result`) {\n            setopensnack(true);\n            setsnackbarMsg(\n              `Your CQ Exam '${data.name}' result has been published.`\n            );\n            setTimeout(function () {\n              window.location.reload();\n            }, 2000);\n          }\n        }\n      });\n    }\n  }, []);\n\n  const joinCourse = (courseID) => {\n    handleMenuClose();\n    axios({\n      method: \"POST\",\n      url: `student/course/add`,\n\n      headers: { \"Content-Type\": \"application/json\" },\n      data: JSON.stringify({\n        course: courseID,\n      }),\n    })\n      .then((response) => {\n        console.log(response.data);\n        if (response.data.status === \"OK\") {\n          setTimeout(function () {\n            window.location.reload();\n          }, 1000);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const handleProfileMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleNotificationMenuOpen = (event) => {\n    setAnchor(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    setAnchor(null);\n  };\n\n  const handleSignout = () => {\n    // props.login.isLogin = \"Failed\";\n    localStorage.clear();\n\n    history.push(\"/signIn\");\n    window.location.reload();\n  };\n  let notificationsUI;\n\n  const renderProfileMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      id=\"profile-menu\"\n      keepMounted\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n      getContentAnchorEl={null}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}\n      transformOrigin={{\n        vertical: \"top\",\n        horizontal: \"center\",\n      }}\n      style={{ width: \"340px\" }}\n    >\n      <MenuItem\n        style={{ textDecoration: \"none\", color: \"black\" }}\n        component={Link}\n        to=\"/profile\"\n        onClick={handleMenuClose} /*style={{width: \"340px\"}}*/\n      >\n        Profile\n      </MenuItem>\n      <MenuItem onClick={handleMenuClose}>My Schedule</MenuItem>\n      <MenuItem onClick={handleMenuClose} onClick={handleSignout}>\n        Sign Out\n      </MenuItem>\n    </Menu>\n  );\n  let x = 0;\n  if (notifies.length > 0)\n    notificationsUI = notifies.map((not) => {\n      if (not.type === \"course\")\n        return (\n          <MenuItem>\n            <Grid item sm={10}>\n              You are invited to a new course {not.name}\n            </Grid>\n\n            <Grid item sm={2}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => joinCourse(not.typeID)}\n                href={`/course/${not.typeID}`}\n                // startIcon={<AddRoundedIcon />}\n              >\n                Join\n              </Button>\n            </Grid>\n          </MenuItem>\n        );\n      else if (not.type === \"exam\") {\n        return (\n          <MenuItem>\n            <Grid item sm={10}>\n              A new exam is created '{not.name}'.\n            </Grid>\n\n            <Grid item sm={2}>\n              <Button\n                variant=\"contained\"\n                // color=\"primary\"\n                href={`/previous-exam/${not.typeID}`}\n              >\n                View\n              </Button>\n            </Grid>\n          </MenuItem>\n        );\n      } else if (not.type === \"result\") {\n        return (\n          <MenuItem>\n            <Grid item sm={10}>\n              Your CQ Exam '{not.name}' result has been published.\n            </Grid>\n\n            <Grid item sm={2}>\n              <Button variant=\"contained\" href={`/previous-exam/${not.typeID}`}>\n                View\n              </Button>\n            </Grid>\n          </MenuItem>\n        );\n      }\n    });\n\n  let renderNotificationMenu;\n\n  renderNotificationMenu = (\n    // <Link to=\"/notifications\">\n    <Menu\n      anchorEl={anchor}\n      id={`{notification menu}{x++}`}\n      open={isNotificationOpen}\n      // onClick={}\n      onClose={handleMenuClose}\n      getContentAnchorEl={null}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}\n      transformOrigin={{\n        vertical: \"top\",\n        horizontal: \"center\",\n      }}\n    >\n      {/* <button className=\"btn\">View</button> */}\n      {notifies ? notificationsUI : <MenuItem>No Notifications</MenuItem>}\n    </Menu>\n    // </Link>\n  );\n\n  if (props.loginStatus == null) {\n    navElements = (\n      <>\n        <Spinner animation=\"grow\" />\n      </>\n    );\n  } else if (props.loginStatus == \"OK\") {\n    navElements = (\n      <>\n        <IconButton\n          aria-label=\"show 17 new notifications\"\n          color=\"inherit\"\n          onClick={handleNotificationMenuOpen}\n        >\n          <Badge\n            badgeContent={notifies ? notifies.length : 0}\n            color=\"secondary\"\n          >\n            <FaBell style={{ color: \"white\" }} />\n          </Badge>\n        </IconButton>\n        <IconButton\n          edge=\"end\"\n          aria-label=\"account of current user\"\n          // aria-controls={menuId}\n          aria-haspopup=\"true\"\n          onClick={handleProfileMenuOpen}\n          color=\"inherit\"\n        >\n          <FaUserAlt style={{ color: \"white\" }} />\n        </IconButton>\n        {/* <MenuItem onClick={handleSignout}>Signout</MenuItem> */}\n        {renderNotificationMenu}\n        {renderProfileMenu}\n      </>\n    );\n  } else {\n    navElements = (\n      <>\n        <Link to=\"signUp\" onClick={navChange}>\n          <MenuItem> Sign Up</MenuItem>\n        </Link>\n        <Link to=\"signIn\" onClick={navChange}>\n          <MenuItem>Sign In</MenuItem>\n        </Link>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Snackbar\n        open={opensnack}\n        onClose={handleSnackClose}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n        // anchorPosition ={ { right: 10, top: 100 }}\n      >\n        <Alert onClose={handleSnackClose} severity=\"info\">\n          {snackbarMsg}\n        </Alert>\n      </Snackbar>\n      <Navbar bg=\"\" style={{ backgroundColor: \"#010302\" }} variant=\"dark\">\n        <Navbar.Brand href=\"/\" className={showSign ? null : \"m-auto\"}>\n          <>\n            <img\n              src={\"/static/paper.png\"}\n              width={\"38\"}\n              height={\"38\"}\n              className={\"d-inline-block align-top\"}\n              className=\"nav__logo\"\n              alt={\"logo\"}\n            />\n            <span className=\"nav__heading\" style={{ fontSize: \"122%\" }}>\n              paper\n            </span>\n          </>\n        </Navbar.Brand>\n        {showSign ? <Nav className=\"ml-auto\">{navElements}</Nav> : null}\n      </Navbar>\n    </>\n  );\n}\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Authentication/SignUp.js",["201","202","203"],"import React, { useState } from \"react\";\nimport { Container, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Forms from \"../Generic/Forms\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { Link } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./SignIn.css\";\n\nconst apiDomain = \"http://localhost:8080/\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  margin: {\n    // margin: theme.spacing(1),\n  },\n  textField: {\n    // width: \"15vw\",\n    // margin: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  shadows: [\"none\"],\n}));\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function SignUp() {\n  const classes = useStyles();\n\n  const [values, setValues] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    role: \"\",\n    designation: \"\",\n    university: \"\",\n    department: \"\",\n    session: \"\",\n    regNo: \"\",\n    result: \"\",\n    error: \"\",\n  });\n\n  // useEffect(() => {\n  //   axios({\n  //     method: \"get\",\n  //     url: apiDomain + \"university/all\",\n  //   })\n  //     .then((response) => {\n  //       // console.log(\"All Universites..\");\n\n  //       // console.log(response.data);\n\n  //       const data = response.data;\n\n  //       if (data.status === \"OK\") {\n  //         setUniversities(data.result.data);\n  //       }\n  //     })\n  //     .catch((error) => console.log(error));\n  // }, []);\n\n  // console.log(\"API CALL DATA\", universities);\n  let history = useHistory();\n\n  const obj = {\n    role: values.role,\n    username: values.username,\n    email: values.email,\n    password: values.password,\n    repassword: values.confirmPassword,\n    firstName: values.firstName,\n    lastName: values.lastName,\n    department: values.department,\n    registrationNo: parseInt(values.regNo, 10),\n    session: values.session,\n    varsity: values.university,\n    designation: values.designation,\n  };\n\n  const body = JSON.stringify(obj);\n\n  const handleSignUp = (e) => {\n    // console.log('hello')\n    fetchData();\n    e.preventDefault();\n  };\n  const fetchData = async () => {\n    let endpoint;\n    if (values.role === \"Teacher\") endpoint = \"auth/create-teacher\";\n    else endpoint = \"auth/create-student\";\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: body,\n    };\n\n    const response = await fetch(`${apiDomain}${endpoint}`, requestOptions);\n\n    const data = await response.json();\n\n    console.log(\"API data\", data);\n\n    if (data.status === \"FAILED\")\n      setValues({ ...values, [\"error\"]: data.result });\n    else {\n      setValues({ ...values, [\"error\"]: \"\" });\n      // const userdata = {\n      //   token: data.result.jwt.token,\n      //   role: data.result.data.role.toLowerCase(),\n      //   id: data.result.data.id,\n      // };\n\n      localStorage.setItem(\"data\", JSON.stringify(data.result.data));\n\n      // console.log(userdata);\n\n      // localStorage.setItem(\"data\", JSON.stringify(userdata));\n      history.push(\"/\");\n      window.location.reload();\n    }\n  };\n\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n  // if (universities)\n  return (\n    <Container>\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Grid container justify=\"center\" alignItems=\"center\">\n          <Grid item className={classes.textField}>\n            <h2>Hello There!!</h2>\n            <p>Lets Sign Up to continue</p>\n          </Grid>\n        </Grid>\n        {values.error !== \"\" ? (\n          <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            className={classes.root}\n          >\n            <Alert elevation={0} severity=\"error\">\n              {values.error}\n            </Alert>\n          </Grid>\n        ) : null}\n        <form onSubmit={handleSignUp}>\n          <Grid item xs={12}>\n            <Forms\n              id=\"role\"\n              type=\"select\"\n              label=\"Role\"\n              classes={classes}\n              values={values.role}\n              handleChange={handleChange}\n            />\n          </Grid>\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={6}>\n              <Forms\n                id=\"university\"\n                type=\"select\"\n                label=\"University\"\n                labelWidth={117}\n                classes={classes}\n                values={values.university}\n                handleChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Forms\n                selectedUniversity={values.university}\n                id=\"department\"\n                type=\"select\"\n                label=\"Department\"\n                labelWidth={117}\n                classes={classes}\n                values={values.department}\n                handleChange={handleChange}\n              />\n            </Grid>\n          </Grid>\n          {values.role !== \"Teacher\" ? (\n            <Grid container justify=\"center\" alignItems=\"center\">\n              <Grid item xs={12} sm={6}>\n                <Forms\n                  id=\"session\"\n                  type=\"select\"\n                  label=\"Session\"\n                  labelWidth={117}\n                  classes={classes}\n                  values={values.session}\n                  handleChange={handleChange}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Forms\n                  id=\"regNo\"\n                  type=\"text\"\n                  label=\"Registration No\"\n                  labelWidth={120}\n                  classes={classes}\n                  values={values.regNo}\n                  handleChange={handleChange}\n                  required={true}\n                />\n              </Grid>\n            </Grid>\n          ) : (\n            <Grid item xs={12}>\n              <Forms\n                id=\"designation\"\n                type=\"select\"\n                label=\"Designation\"\n                labelWidth={117}\n                classes={classes}\n                values={values.designation}\n                handleChange={handleChange}\n              />\n            </Grid>\n          )}\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={6}>\n              <Forms\n                id=\"firstName\"\n                type=\"text\"\n                label=\"First Name\"\n                labelWidth={78}\n                classes={classes}\n                values={values.firstName}\n                handleChange={handleChange}\n                required={false}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Forms\n                id=\"lastName\"\n                type=\"text\"\n                label=\"Last Name\"\n                labelWidth={78}\n                classes={classes}\n                values={values.lastName}\n                handleChange={handleChange}\n                required={false}\n              />\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={6}>\n              <Forms\n                id=\"username\"\n                type=\"text\"\n                label=\"Username\"\n                labelWidth={84}\n                classes={classes}\n                values={values.username}\n                handleChange={handleChange}\n                required={true}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Forms\n                id=\"email\"\n                type=\"text\"\n                label=\"Email Address\"\n                labelWidth={110}\n                classes={classes}\n                values={values.email}\n                handleChange={handleChange}\n                required={true}\n              />\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={6}>\n              <Forms\n                id=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                labelWidth={80}\n                classes={classes}\n                values={values.password}\n                handleChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Forms\n                id=\"confirmPassword\"\n                label=\"Confirm Password\"\n                type=\"password\"\n                labelWidth={140}\n                classes={classes}\n                values={values.confirmPassword}\n                handleChange={handleChange}\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} className={classes.textField}>\n            <Button variant=\"contained\" value=\"Sign Up\" type=\"submit\" fullWidth>\n              Sign Up\n            </Button>\n            <Grid item xs={12} className={classes.textField}>\n              <Typography>\n                Already have an account?{\" \"}\n                <Link to=\"/signIn\">\n                  <b>Sign In</b>\n                </Link>{\" \"}\n                instead\n              </Typography>\n            </Grid>\n          </Grid>\n        </form>\n      </Grid>\n    </Container>\n  );\n  // else return <h1>Loading</h1>;\n}\n","/home/jspw/Documents/Projects/Paper/client/src/Components/PreviousExam/PreviousExam.js",["204","205","206","207","208","209","210","211","212","213","214"],"import React, { useEffect, useState } from \"react\";\n\nimport {\n  Button,\n  Col,\n  Container,\n  Row,\n  Modal,\n  Form,\n  Spinner,\n  Card,\n  Alert,\n  Jumbotron,\n  Table,\n  Tab,\n  TabContainer,\n  ListGroup,\n  TabContent,\n  TabPane,\n} from \"react-bootstrap\";\n\nimport axios from \"axios\";\n\nimport \"./PreviousExam.css\";\n\nimport MarkSheet from \"./MarkSheet\";\n\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport LinearIndeterminate from \"../Generic/Loader\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { Box, CardContent, MenuList, Typography } from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\n\nimport ExamInfo from \"./ExamInfo\";\n\nconst PreviousExam = (props) => {\n  var months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  var days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  const { id } = useParams();\n\n  let userdata;\n  userdata = localStorage.getItem(\"data\");\n  userdata = JSON.parse(userdata);\n\n  let role;\n\n  role = userdata.role;\n\n  const [mcqExamData, setMcqExamData] = useState(null);\n  const [cqExamData, setCqExamData] = useState(null);\n  const [mcqExamsData, setMcqExamsData] = useState(null);\n  const [cqExamsData, setCqExamsData] = useState(null);\n\n  const [onlyExamInfo, setOnlyExamInfo] = useState(null);\n\n  let mcq;\n  let cq;\n\n  useEffect(() => {\n    let examType = \"mcq\";\n    let endpoint;\n    if (role === \"Teacher\") endpoint = `teacher/exam/${examType}/submits/${id}`;\n    else endpoint = `${role}/exam/${examType}/submit/${id}`;\n\n    axios\n      .get(endpoint)\n      .then((response) => {\n        console.log(response.data);\n        if (response.data.status == \"OK\") {\n          if (role === \"Teacher\") setMcqExamsData(response.data.result.data);\n          else setMcqExamData(response.data.result.data);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        axios\n          .get(`${role}/exam/${id}`)\n          .then((response) => {\n            setOnlyExamInfo(response.data.result.data);\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      });\n\n    examType = \"cq\";\n    if (role === \"Teacher\") endpoint = `teacher/exam/${examType}/submits/${id}`;\n    else endpoint = `${role}/exam/${examType}/submit/${id}`;\n\n    axios\n      .get(endpoint)\n      .then((response) => {\n        console.log(response.data);\n        if (response.data.status == \"OK\") {\n          if (role === \"Teacher\") setCqExamsData(response.data.result.data);\n          else setCqExamData(response.data.result.data);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        axios\n          .get(`${role}/exam/${id}`)\n          .then((response) => {\n            setOnlyExamInfo(response.data.result.data);\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      });\n  }, []);\n\n  if (mcqExamData)\n    mcq = mcqExamData.studentAnswers.map((test) => {\n      return (\n        <div>\n          <Card>\n            <Box fontWeight=\"fontWeightBold\" m={1}>\n              {\" \"}\n              Question :{\" \"}\n            </Box>\n            <div className=\"card card-body bg-light\">\n              <Typography>{test.mcqQuestion.description}</Typography>\n              {/* <Alert variant=\"primary\"> */}\n              <Typography>{test.mcqQuestion.mainQuestion}</Typography>\n              {/* </Alert> */}\n            </div>\n\n            <CardContent>\n              {/* <Box fontWeight=\"fontWeightBold\" m={1}> Options :  </Box> */}\n              <MenuList>\n                {test.mcqQuestion.options.map((op) => {\n                  if (test.mcqQuestion.correctAnswers[0].answer === op.option)\n                    return <Alert variant=\"success\">{op.option}</Alert>;\n                  if (test.studentAnswer === op.option)\n                    return <Alert variant=\"danger\">{op.option}</Alert>;\n\n                  return <MenuItem>{op.option}</MenuItem>;\n                })}\n              </MenuList>\n            </CardContent>\n          </Card>\n          <br></br>\n        </div>\n      );\n    });\n  else if (cqExamData)\n    cq = cqExamData.cqExam.cqQuestions.map((cqx, i) => {\n      console.log(cqExamData);\n      return (\n        <div>\n          <Card>\n            <Box fontWeight=\"fontWeightBold\" m={1}>\n              {\" \"}\n              Question : [ {`Marks : ${cqx.cqQuestionId.marks} || `}\n              {`Time : ${cqx.cqQuestionId.time / 60}  min  ${\n                cqx.cqQuestionId.time % 60\n              } sec `}\n              ]\n            </Box>\n\n            <div className=\"card card-body bg-light\">\n              <Typography>\n                {\" \"}\n                {cqx.cqQuestionId.description\n                  ? cqx.cqQuestionId.description\n                  : \"\"}\n              </Typography>\n\n              <Typography> {cqx.cqQuestionId.mainQuestion} </Typography>\n            </div>\n            <CardContent>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label>\n                  <Box fontWeight=\"fontWeightBold\" m={1}>\n                    Ans :{\" \"}\n                  </Box>\n                </Form.Label>\n                <Form.Control\n                  value={\n                    cqExamData.studentAnswers[i]\n                      ? cqExamData.studentAnswers[i].studentAnswer\n                      : \"\"\n                  }\n                  disabled\n                  as=\"textarea\"\n                  rows={3}\n                />\n              </Form.Group>\n            </CardContent>\n          </Card>\n          <br></br>\n        </div>\n      );\n    });\n\n  if (role === \"Teacher\" && (mcqExamsData || onlyExamInfo || cqExamData)) {\n    return (\n      <Tab.Container\n        className=\"scroll-off\"\n        id=\"list-group-tabs-example\"\n        defaultActiveKey=\"#exam-info\"\n      >\n        <Row>\n          <Col sm={2}>\n            <ListGroup variant=\"flush\" className=\"align-items-center\">\n              <ListGroup.Item action href=\"#exam-info\">\n                Exam Info\n              </ListGroup.Item>\n              <ListGroup.Item action href=\"#mark-sheet\">\n                Mark Sheet\n              </ListGroup.Item>\n              <ListGroup.Item action href=\"#reviews\">\n                Reviews\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n          <Col sm={10}>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"#exam-info\">\n                <ExamInfo\n                  onlyExamInfo={onlyExamInfo}\n                  mcqExamData={mcqExamsData ? mcqExamsData[0] : null}\n                  cqExamData={cqExamsData ? cqExamsData[0] : null}\n                />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"#mark-sheet\">\n                <MarkSheet\n                  mcqExamsData={mcqExamsData}\n                  cqExamsData={cqExamsData}\n                />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"#reviews\">Reports</Tab.Pane>\n            </Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    );\n  }\n  // else if()\n  else if (role === \"Student\" && (mcqExamData || cqExamData))\n    return (\n      <Container style={{ marginTop: \"5px\", backgroundColor: \"white\" }}>\n        <Alert variant=\"light\">\n          <h1 className=\"text-center\">\n            {mcqExamData ? mcqExamData.mcqExam.name : cqExamData.cqExam.name}\n          </h1>\n        </Alert>\n\n        <Row>\n          <Col>\n            <Row>\n              <Col>\n                <Table\n                  // variant=\"dark\"\n                  responsive\n                  hover\n                  bordered\n                  size=\"sm\"\n                  bsPrefix=\"table\"\n                >\n                  <tbody>\n                    <tr>\n                      <td>Participated On</td>\n                      <td>\n                        {new Date(\n                          mcqExamData\n                            ? mcqExamData.submitOn\n                            : cqExamData.submitOn\n                        ).getDate()}\n                        th{\" \"}\n                        {\n                          months[\n                            new Date(\n                              mcqExamData\n                                ? mcqExamData.submitOn\n                                : cqExamData.submitOn\n                            ).getMonth()\n                          ]\n                        }\n                        ,\n                        {new Date(\n                          mcqExamData\n                            ? mcqExamData.submitOn\n                            : cqExamData.submitOn\n                        ).getFullYear()}{\" \"}\n                        (\n                        {\n                          days[\n                            new Date(\n                              mcqExamData\n                                ? mcqExamData.submitOn\n                                : cqExamData.submitOn\n                            ).getDay()\n                          ]\n                        }\n                        )\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>At</td>\n                      <td>\n                        {new Date(\n                          mcqExamData\n                            ? mcqExamData.mcqExam.date\n                            : cqExamData.cqExam.date\n                        ).getHours() < 10\n                          ? \"0\" +\n                            new Date(\n                              mcqExamData\n                                ? mcqExamData.mcqExam.date\n                                : cqExamData.cqExam.date\n                            ).getHours()\n                          : new Date(\n                              mcqExamData\n                                ? mcqExamData.mcqExam.date\n                                : cqExamData.cqExam.date\n                            ).getHours()}\n                        :\n                        {new Date(\n                          mcqExamData\n                            ? mcqExamData.mcqExam.date\n                            : cqExamData.cqExam.date\n                        ).getMinutes() < 10\n                          ? \"0\" +\n                            new Date(\n                              mcqExamData\n                                ? mcqExamData.mcqExam.date\n                                : cqExamData.cqExam.date\n                            ).getMinutes()\n                          : new Date(\n                              mcqExamData\n                                ? mcqExamData.mcqExam.date\n                                : cqExamData.cqExam.date\n                            ).getMinutes()}{\" \"}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Total Time</td>\n                      <td>\n                        {mcqExamData\n                          ? mcqExamData.mcqExam.totalTime\n                          : cqExamData.cqExam.totalTime}{\" \"}\n                        min\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          </Col>\n\n          <Col>\n            <Row>\n              <Col></Col>\n              <Col>\n                <Table\n                  // variant=\"dark\"\n                  responsive\n                  hover\n                  bordered\n                  size=\"sm\"\n                  bsPrefix=\"table\"\n                >\n                  <tbody>\n                    <tr>\n                      <td>Total Marks</td>\n                      <td>\n                        {mcqExamData ? mcqExamData.mark : cqExamData.totalMarks}\n                        /\n                        {mcqExamData\n                          ? mcqExamData.mcqExam.totalMarks\n                          : cqExamData.cqExam.totalMarks}\n                      </td>\n                    </tr>\n\n                    <tr>\n                      <td>Solved</td>\n                      <td>{mcqExamData ? mcqExamData.solved : \"\"}</td>\n                    </tr>\n\n                    <tr>\n                      <td>Wrong</td>\n                      <td>{mcqExamData ? mcqExamData.wrong : \"\"}</td>\n                    </tr>\n\n                    <tr>\n                      <td>Examined By</td>\n                      <td>\n                        {mcqExamData ? \"Automatic\" : cqExamData.examineBy.firstName ? cqExamData.examineBy.firstName : '' + cqExamData.examineBy.lastName ? cqExamData.examineBy.lastName : '' + cqExamData.examineBy.username }\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col></Col>\n\n          <Col></Col>\n        </Row>\n        <Container fluid>{mcq ? mcq : cq}</Container>\n      </Container>\n    );\n  else if (onlyExamInfo && role === \"Student\")\n    return (\n      <Container>\n        <div className=\"d-flex justify-content-center\">\n          <Alert variant=\"danger\">You Haven't Participated In This Exam</Alert>\n        </div>\n        <ExamInfo onlyExamInfo={onlyExamInfo} />\n      </Container>\n    );\n  else return <LinearIndeterminate />;\n};\n\nexport default PreviousExam;\n","/home/jspw/Documents/Projects/Paper/client/src/Components/PreviousExam/Examine.js",["215","216","217","218","219","220","221"],"/home/jspw/Documents/Projects/Paper/client/src/Components/Home/Home.js",["222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, Snackbar, TextField } from \"@material-ui/core\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SubjectIcon from \"@material-ui/icons/Subject\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport AssignmentTurnedInOutlinedIcon from \"@material-ui/icons/AssignmentTurnedInOutlined\";\nimport Timer from \"../Timer/Timer\";\nimport { Link } from \"react-router-dom\";\nimport LinearIndeterminate from \"../Generic/Loader\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Forms from \"../Generic/Forms\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { useHistory } from \"react-router-dom\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport \"./Home.scss\";\nimport axios from \"axios\";\n// import Alert from \"@material-ui/lab/Alert\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  margin: {\n    // margin: theme.spacing(1),\n  },\n  textField: {\n    // width: \"15vw\",\n    // margin: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  shadows: [\"none\"],\n}));\n\nexport default function Home(props) {\n  let userdata;\n  userdata = localStorage.getItem(\"data\");\n  userdata = JSON.parse(userdata);\n\n  const [open, setOpen] = React.useState(false);\n\n  let history = useHistory();\n  const [opensnack, setopensnack] = React.useState(false);\n\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const courseCreateModalHandleClose = () => {\n    setOpen(false);\n  };\n  const classes = useStyles();\n\n  const [values, setValues] = useState({\n    courseName: \"\",\n    courseCode: \"\",\n    university: \"\",\n    department: \"\",\n  });\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n  var months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  var days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let courseUI;\n  let upcomingExams = [];\n  let upcomingExamsUI;\n  let mostUpcomingExamUI;\n  let previousExams = [];\n  let previousExamsUI;\n  let ongoingExams = [];\n\n  const [timerDeadline, setTimerDeadLine] = useState(Date.now());\n\n  const [snackbarMsg, setsnackbarMsg] = useState(null);\n\n  const handleSnackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setopensnack(false);\n  };\n\n  const createCourse = () => {\n    // const dept = document.getElementById(\"department\").innerHTML);\n\n    if (\n      values.university &&\n      values.department &&\n      values.courseCode &&\n      values.courseName\n    ) {\n      courseCreateModalHandleClose();\n      axios({\n        method: \"POST\",\n        url: `teacher/course/create`,\n\n        headers: { \"Content-Type\": \"application/json\" },\n\n        data: JSON.stringify({\n          name: values.courseName,\n          code: values.courseCode,\n          department: {\n            name: `${document.getElementById(\"department\").innerHTML}`,\n            id: values.department,\n          },\n          varsity: {\n            name: `${document.getElementById(\"university\").innerHTML}`,\n            id: values.department,\n          },\n        }),\n      })\n        .then((response) => {\n          console.log(response.data);\n          if (response.data.status === \"OK\") {\n            setopensnack(true);\n            setsnackbarMsg(\"Course Created Successfully\");\n\n            setTimeout(function () {\n              history.push(\"/\");\n              window.location.reload();\n            }, 1000);\n          } else {\n            setopensnack(true);\n            setsnackbarMsg(\"Course Creation Failed!\");\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n          setsnackbarMsg(\"Course Creation Failed!\");\n          setopensnack(true);\n        });\n    }\n  };\n\n  if (userdata) {\n    if (userdata.courses.length > 0) {\n      courseUI = userdata.courses.map((course, k) => {\n        // console.log(items);\n\n        return (\n          <Grid key={k} container alignitems=\"flex-start\" className=\"sideExams\">\n            <Grid item>\n              <SubjectIcon style={{ fontSize: \"27px\" }} />\n            </Grid>\n            <Grid item xs className=\"examName\">\n              <Link\n                to={`/course/${course.course._id}/#exams`}\n                style={{ textDecoration: \"none\", color: \"black\" }}\n              >\n                <span>{course.course.name}</span>\n              </Link>\n            </Grid>\n          </Grid>\n        );\n      });\n    }\n\n    userdata.courses.forEach((course, i) => {\n      \n\n      if (course.course.cqExams) {\n        course.course.cqExams.forEach((exam, j) => {\n          let date = new Date();\n          console.log(exam.examId.name);\n          console.log(\n            new Date(exam.examId.date).getTime() + exam.examId.totalTime * 60\n          );\n          console.log(date.getTime());\n\n          // console.log(course.course);\n          if (\n            new Date(exam.examId.date).getTime() + exam.examId.totalTime * 1000 <\n            new Date().getTime()\n          )\n            previousExams.push({\n              _id: exam.examId._id,\n              name: exam.examId.name,\n              courseName: course.course.name,\n              date: new Date(exam.examId.date),\n              totalMarks: exam.examId.totalMarks,\n              totalTime: exam.examId.totalTime,\n              createdBy: course.course.createdBy.firstName\n                ? course.course.createdBy.firstName\n                : \"\" + \" \" + course.course.createdBy.lastName\n                ? course.course.createdBy.lastName\n                : \"\" + \" \" + course.course.createdBy.username,\n            });\n          else {\n            upcomingExams.push({\n              _id: exam.examId._id,\n              name: exam.examId.name,\n              courseName: course.course.name,\n              date: new Date(exam.examId.date),\n              totalMarks: exam.examId.totalMarks,\n              totalTime: exam.examId.totalTime,\n              createdBy: course.course.createdBy.firstName\n                ? course.course.createdBy.firstName\n                : \"\" + \" \" + course.course.createdBy.lastName\n                ? course.course.createdBy.lastName\n                : \"\" + \" \" + course.course.createdBy.username,\n            });\n          }\n        });\n      }\n\n      if (course.course.mcqExams) {\n        course.course.mcqExams.forEach((exam, j) => {\n          let date = new Date();\n\n          console.log(exam.examId.name);\n\n          console.log(\n            new Date(exam.examId.date).getTime() + (exam.examId.totalTime * 60)\n          );\n          console.log(date.getTime());\n\n          \n          if (\n            new Date(exam.examId.date).getTime() + exam.examId.totalTime * 1000 <\n            new Date().getTime()\n          )\n            previousExams.push({\n              _id: exam.examId._id,\n              name: exam.examId.name,\n              courseName: course.course.name,\n              date: new Date(exam.examId.date),\n              totalMarks: exam.examId.totalMarks,\n              totalTime: exam.examId.totalTime,\n              createdBy: course.course.createdBy.firstName\n                ? course.course.createdBy.firstName\n                : \"\" + \" \" + course.course.createdBy.lastName\n                ? course.course.createdBy.lastName\n                : \"\" + \" \" + course.course.createdBy.username,\n            });\n          else {\n            upcomingExams.push({\n              _id: exam.examId._id,\n              name: exam.examId.name,\n              courseName: course.course.name,\n              date: new Date(exam.examId.date),\n              totalMarks: exam.examId.totalMarks,\n              totalTime: exam.examId.totalTime,\n              createdBy: course.course.createdBy.firstName\n                ? course.course.createdBy.firstName\n                : \"\" + \" \" + course.course.createdBy.lastName\n                ? course.course.createdBy.lastName\n                : \"\" + \" \" + course.course.createdBy.username,\n            });\n          }\n        });\n      }\n    });\n\n    upcomingExams.sort(function (a, b) {\n      return a.date.getTime() - b.date.getTime();\n    });\n    previousExams.sort(function (a, b) {\n      return b.date.getTime() - a.date.getTime();\n    });\n\n    ongoingExams.sort(function (a, b) {\n      return a.date.getTime() - b.date.getTime();\n    });\n\n    const reloadHandler = (event) => {\n      event.preventDefault();\n    };\n    let examSchedule;\n    if (upcomingExams.length > 0) {\n      examSchedule = `${\n        new Date(upcomingExams[0].date).getHours() < 10\n          ? \"0\" + new Date(upcomingExams[0].date).getHours()\n          : new Date(upcomingExams[0].date).getHours()\n      }:${\n        new Date(upcomingExams[0].date).getMinutes() < 10\n          ? \"0\" + new Date(upcomingExams[0].date).getMinutes()\n          : new Date(upcomingExams[0].date).getMinutes()\n      }\n      ${new Date(upcomingExams[0].date).getDate()}th ${\n        months[new Date(upcomingExams[0].date).getMonth()]\n      },\n      ${new Date(upcomingExams[0].date).getFullYear()}`;\n\n      mostUpcomingExamUI = (\n        <Container fluid key={upcomingExams[0]._id} alignitems=\"flex-start\">\n          <Row className=\"examHeading d-flex justify-content-between\">\n            <Col xs=\"auto\">\n              <span className=\"examName\">\n                <b>{upcomingExams[0].name}</b>\n              </span>\n            </Col>\n            <Col xs=\"auto\" className=\"examSchedule\">\n              <p>{examSchedule}</p>\n            </Col>\n          </Row>\n          <Row className=\"infos\">\n            <Col>\n              <span>Course: {upcomingExams[0].courseName}</span>\n            </Col>\n          </Row>\n          <Row className=\"infos\">\n            <Col>\n              <p>Host: {upcomingExams[0].createdBy}</p>\n            </Col>\n          </Row>\n          <Row className=\"infos\">\n            <Col>\n              <span>Total Marks: {upcomingExams[0].totalMarks}</span>\n            </Col>\n          </Row>\n          <Row className=\"infos\">\n            <Col>\n              <span>Total Time: {upcomingExams[0].totalTime}</span>\n            </Col>\n          </Row>\n        </Container>\n      );\n      upcomingExamsUI = upcomingExams.map((ex, i) => {\n        if (i != 0)\n          return (\n            <>\n              <Container\n                fluid\n                key={ex._id}\n                alignitems=\"flex-start\"\n                className=\"upcoming__next\"\n              >\n                <Link\n                  to={`/upcoming-exam/${ex._id}`}\n                  style={{ textDecoration: \"none\", color: \"black\" }}\n                >\n                  <Row className=\"examHeading d-flex justify-content-between\">\n                    <Col xs=\"auto\">\n                      <span className=\"examName\">\n                        <b>{ex.name}</b>\n                      </span>\n                    </Col>\n                    <Col xs=\"auto\" className=\"examSchedule\">\n                      <p>\n                        {new Date(ex.date).getHours() < 10\n                          ? \"0\" + new Date(ex.date).getHours()\n                          : new Date(ex.date).getHours()}\n                        :\n                        {new Date(ex.date).getMinutes() < 10\n                          ? \"0\" + new Date(ex.date).getMinutes()\n                          : new Date(ex.date).getMinutes()}{\" \"}\n                        {new Date(ex.date).getDate()}\n                        th {months[new Date(ex.date).getMonth()]},\n                        {new Date(ex.date).getFullYear()}\n                      </p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col style={{ paddingBottom: \"10px\" }}>{ex.courseName}</Col>\n                  </Row>\n                </Link>\n              </Container>\n            </>\n          );\n      });\n    }\n\n    if (previousExams)\n      previousExamsUI = previousExams.map((ex, i) => {\n        return (\n          <Grid\n            key={ex._id}\n            container\n            alignitems=\"flex-start\"\n            className=\"sideExams\"\n          >\n            <Grid item>\n              <AssignmentTurnedInOutlinedIcon style={{ fontSize: \"27px\" }} />\n            </Grid>\n            <Grid item xs className=\"examName\">\n              <Link\n                to={`/previous-exam/${ex._id}`}\n                style={{ textDecoration: \"none\", color: \"black\" }}\n              >\n                <span>{ex.name}</span>\n              </Link>\n            </Grid>\n            <Grid item>\n              <p>\n                {new Date(ex.date).getHours() < 10\n                  ? \"0\" + new Date(ex.date).getHours()\n                  : new Date(ex.date).getHours()}\n                :\n                {new Date(ex.date).getMinutes() < 10\n                  ? \"0\" + new Date(ex.date).getMinutes()\n                  : new Date(ex.date).getMinutes()}{\" \"}\n                {new Date(ex.date).getDate()}\n                th {months[new Date(ex.date).getMonth()]},\n                {new Date(ex.date).getFullYear()}\n              </p>\n            </Grid>\n          </Grid>\n        );\n      });\n  }\n  if (userdata) {\n    const role = userdata.role;\n    // console.log(role)\n    return (\n      // <Container fluid style={{ marginTop: \"10px\", height: \"100vh\" }}>\n      <>\n        <Snackbar\n          open={opensnack}\n          onClose={handleSnackClose}\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n          // anchorPosition ={ { right: 10, top: 100 }}\n        >\n          <Alert onClose={handleSnackClose} severity=\"success\">\n            {setsnackbarMsg}\n          </Alert>\n        </Snackbar>\n        <Grid container justify=\"space-between\" alignItems=\"flex-start\">\n          <Grid\n            item\n            xs={12}\n            md={2}\n            className=\"leftside\"\n            style={{ float: \"left\", paddingTop: \"10px\", paddingLeft: \"10px\" }}\n          >\n            <Grid container justify=\"space-between\">\n              <Grid item>\n                <h4 className=\"leftHeading\">My Courses</h4>\n              </Grid>\n              {role === \"Teacher\" ? (\n                <Grid item>\n                  <AddIcon\n                    onClick={handleClickOpen}\n                    style={{\n                      fontSize: \"30px\",\n                      color: \"#234058\",\n                      cursor: \"pointer\",\n                    }}\n                  />\n                  <Dialog\n                    open={open}\n                    onClose={courseCreateModalHandleClose}\n                    aria-labelledby=\"form-dialog-title\"\n                  >\n                    <DialogTitle id=\"form-dialog-title\">\n                      Create New Course\n                    </DialogTitle>\n                    <DialogContent>\n                      <Forms\n                        id=\"university\"\n                        type=\"select\"\n                        label=\"University\"\n                        labelWidth={117}\n                        classes={classes}\n                        values={values.university}\n                        handleChange={handleChange}\n                      />\n                      <Forms\n                        selectedUniversity={values.university}\n                        id=\"department\"\n                        type=\"select\"\n                        label=\"Department\"\n                        labelWidth={117}\n                        classes={classes}\n                        values={values.department}\n                        handleChange={handleChange}\n                      />\n                      <Forms\n                        id=\"courseName\"\n                        type=\"text\"\n                        label=\"Course Name\"\n                        labelWidth={78}\n                        classes={classes}\n                        values={values.firstName}\n                        handleChange={handleChange}\n                        required={false}\n                      />\n                      <Forms\n                        id=\"courseCode\"\n                        type=\"text\"\n                        label=\"Course Code\"\n                        labelWidth={78}\n                        classes={classes}\n                        values={values.firstName}\n                        handleChange={handleChange}\n                        required={false}\n                      />\n                    </DialogContent>\n                    <DialogActions>\n                      <Button\n                        onClick={courseCreateModalHandleClose}\n                        color=\"default\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button onClick={createCourse} color=\"primary\">\n                        Create\n                      </Button>\n                    </DialogActions>\n                  </Dialog>\n                </Grid>\n              ) : null}\n            </Grid>\n            <Grid item>\n              <hr />\n            </Grid>\n            {courseUI}\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            md={6}\n            className=\"upcoming\"\n            style={{ padding: \"10px\" }}\n          >\n            <Grid container justify=\"space-between\" alignitems=\"flex-start\">\n              <Grid item>\n                <h4 className=\"centerHeading\">Upcoming Exams</h4>\n              </Grid>\n              <Grid item>\n                <InfoOutlinedIcon\n                  style={{ fontSize: \"35px\", color: \"#234058\" }}\n                />\n              </Grid>\n            </Grid>\n            <Grid item>\n              <hr />\n            </Grid>\n            <div className=\"upcoming__first\">\n              {mostUpcomingExamUI}\n\n              {upcomingExams.length > 0 ? (\n                <Timer\n                  examID={upcomingExams[0]._id}\n                  deadline={upcomingExams[0].date}\n                />\n              ) : (\n                <>\n                  <Grid container justify=\"center\">\n                    <Grid item xs=\"auto\" style={{ marginTop: \"10%\" }}>\n                      <FaRegCheckCircle\n                        style={{ fontSize: \"50px\", color: \"#234058\" }}\n                      />\n                    </Grid>\n                  </Grid>\n                  <Grid container justify=\"center\" style={{ marginTop: \"2%\" }}>\n                    <Grid item xs=\"auto\">\n                      <h3 style={{ textAlign: \"center\" }}>\n                        You're All Caught Up!\n                      </h3>\n                      <p style={{ textAlign: \"center\", fontSize: \"20px\" }}>\n                        No Upcoming Exams\n                      </p>\n                    </Grid>\n                  </Grid>\n                </>\n              )}\n            </div>\n            <div>{upcomingExamsUI}</div>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            md={3}\n            className=\"rightside\"\n            style={{ padding: \"10px\" }}\n          >\n            <Grid container justify=\"space-between\" alignitems=\"flex-start\">\n              <Grid item>\n                <h4 className=\"rightHeading\">Previous Exams</h4>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <hr />\n            </Grid>\n            {previousExamsUI}\n          </Grid>\n        </Grid>\n        {/* // </Container> */}\n      </>\n    );\n  } else return <LinearIndeterminate />;\n}\n","/home/jspw/Documents/Projects/Paper/client/src/Components/LiveExam/LiveExam.js",["242","243","244","245","246","247"],"import React, { useEffect, useRef, useState } from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"@material-ui/core/Button\";\nimport LinearIndeterminate from \"../Generic/Loader\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { LinearProgress, makeStyles, Snackbar } from \"@material-ui/core\";\n// import Alert from \"@material-ui/lab/Alert\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Result from \"./Result\";\nimport \"./LiveExam.scss\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  },\n}));\n\nexport default function LiveExam(props) {\n  const { id } = useParams();\n  const classes = useStyles();\n\n  const [value, setValue] = React.useState(\"\");\n  const [questionIndex, setquestionIndex] = React.useState(0);\n\n  const [examinfo, setExamInfo] = useState(null);\n\n  const [open, setOpen] = React.useState(false);\n  const [seconds, setSeconds] = useState(1);\n\n  const [windowChange, setwindowChange] = useState(0);\n\n  const [studentAnswers, setStudentAnswers] = useState([]);\n\n  const [result, setResult] = useState(0);\n\n  const intervalRef = useRef();\n  const [disableNextButton, setdisableNextButton] = useState(false);\n\n  const [openFeedback, setOpenFeedback] = useState(false);\n  const [feedback, setFeedback] = useState(\"\");\n\n  const [answer, setAnswer] = useState(\"\");\n\n  const [showResult, setShowResult] = useState(false);\n\n  useEffect(() => {\n    axios\n      .get(`student/exam/${id}`)\n      .then((response) => {\n        if (response.data.result.data.mcqQuestions) {\n          setSeconds(\n            response.data.result.data.mcqQuestions[questionIndex].mcqQuestionId\n              .time\n          );\n        } else\n          setSeconds(\n            response.data.result.data.cqQuestions[questionIndex].cqQuestionId\n              .time\n          );\n\n        const interval = setInterval(() => {\n          setSeconds((seconds) => seconds - 1);\n          // console.log(seconds);\n        }, 1000);\n\n        intervalRef.current = interval;\n\n        setExamInfo(response.data.result.data);\n        // console.log(\"examinfo\", response.data.result.data);\n\n        let examTimeEndAfter = 0;\n\n        examTimeEndAfter =\n          new Date(response.data.result.data.date).getTime() +\n          (response.data.result.data.totalTime * 1000 - Date.now());\n\n        console.log(\"examTimeEndAfter\", examTimeEndAfter);\n\n        const timeout = setTimeout(() => {\n          clearInterval(intervalRef.current);\n          setdisableNextButton(true);\n\n          submitAnswers();\n          // alert(\"Exam Timeout!\");\n        }, examTimeEndAfter);\n\n        return () => {\n          clearInterval(intervalRef);\n          clearTimeout(timeout);\n        };\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  // console.log(\"examinfo\", examinfo);\n\n  const handleAnswer = (event) => {\n    setAnswer(event.target.value);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n  const handleFeedbackOpen = () => {\n    setOpenFeedback(true);\n  };\n\n  const handleFeedbackClose = () => {\n    setOpenFeedback(false);\n  };\n\n  const handleFeedback = (event) => {\n    setFeedback(event.target.value);\n  };\n  // console.log(feedback);\n  // const [totalExamTime, setTotalExamTime] = useState(0);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const submitAnswers = () => {\n    let url;\n    let data;\n\n    setShowResult(true);\n\n    console.log(examinfo);\n\n    console.log(\"Student answer!\", studentAnswers);\n\n    if (examinfo) {\n      if (examinfo.mcqQuestions) {\n        console.log(\"studentAnswers\", studentAnswers);\n        url = `student/exam/mcq/submit/${id}`;\n        data = JSON.stringify({\n          studentAnswers: studentAnswers,\n          feedback: feedback,\n          windowChanged: windowChange,\n        });\n      } else {\n        console.log(\"studentAnswers\", studentAnswers);\n        url = `student/exam/cq/submit/${id}`;\n\n        data = JSON.stringify({\n          studentAnswers: studentAnswers,\n          feedback: feedback,\n          windowChanged: windowChange,\n        });\n      }\n\n      // setResult(\"Loading\");\n      axios({\n        method: \"POST\",\n        url: url,\n\n        headers: { \"Content-Type\": \"application/json\" },\n        data: data,\n      })\n        .then((response) => {\n          console.log(response.data);\n          if (response.data.status === \"OK\") {\n            setResult(response.data.result.data);\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  const nextQuestion = (event) => {\n    console.log(\"Question index\", questionIndex);\n\n    console.log(\"value\", value);\n\n    console.log(\"answer\", answer);\n\n    console.log(\"STudent ans\", studentAnswers);\n\n    if (examinfo.mcqQuestions)\n      studentAnswers.push({\n        mcqQuestion: examinfo.mcqQuestions[questionIndex].mcqQuestionId._id,\n        studentAnswer: value,\n      });\n    else {\n      studentAnswers.push({\n        cqQuestion: examinfo.cqQuestions[questionIndex].cqQuestionId._id,\n        studentAnswer: answer,\n      });\n    }\n\n    console.log(\"STudent ans\", studentAnswers);\n\n    setValue(\"\");\n    setAnswer(\"\");\n\n    if (examinfo.mcqQuestions) {\n      if (questionIndex + 1 < examinfo.mcqQuestions.length) {\n        console.log(\n          \"questionIndex\",\n          questionIndex,\n          examinfo.mcqQuestions.length\n        );\n        setSeconds(\n          (seconds) => examinfo.mcqQuestions[questionIndex].mcqQuestionId.time\n        );\n        setquestionIndex((questionIndex) => questionIndex + 1);\n      } else {\n        clearInterval(intervalRef.current);\n        submitAnswers();\n      }\n    } else if (examinfo.cqQuestions) {\n      if (questionIndex + 1 < examinfo.cqQuestions.length) {\n        console.log(\n          \"questionIndex\",\n          questionIndex,\n          examinfo.cqQuestions.length\n        );\n        setSeconds(\n          (seconds) => examinfo.cqQuestions[questionIndex].cqQuestionId.time\n        );\n        setquestionIndex((questionIndex) => questionIndex + 1);\n      } else {\n        clearInterval(intervalRef.current);\n        submitAnswers();\n      }\n    }\n  };\n\n  document.addEventListener(\"visibilitychange\", function () {\n    // document.title = document.hidden ? \"I'm am cheating\" : \"I'm here\";\n    // var mp3_url =\n    //   \"https://media.geeksforgeeks.org/wp-content/uploads/20190531135120/beep.mp3\";\n\n    // new Audio(mp3_url).play();\n    setwindowChange((windowChange) => windowChange + 1);\n    handleClick();\n  });\n\n  if (examinfo) {\n    let des;\n    if (examinfo.cqQuestions) {\n      des = examinfo.cqQuestions[questionIndex].cqQuestionId.description ? (\n        <Row className=\"exam__description\">\n          <Col>\n            <h5>\n              {examinfo.cqQuestions[questionIndex].cqQuestionId.description}\n            </h5>\n          </Col>\n        </Row>\n      ) : null;\n    }\n\n    if (examinfo.mcqQuestions) {\n      des = examinfo.mcqQuestions[questionIndex].mcqQuestionId.description ? (\n        <Row className=\"exam__description\">\n          <Col>\n            <h5>\n              {examinfo.mcqQuestions[questionIndex].mcqQuestionId.description}\n            </h5>\n          </Col>\n        </Row>\n      ) : null;\n    }\n\n    if (seconds <= 0) nextQuestion();\n\n    if (result || showResult) {\n      return (\n        <Result\n          result={result}\n          examID={id}\n          examType={examinfo.mcqQuestions ? \"mcq\" : \"cq\"}\n        />\n      );\n    } else\n      return (\n        <div>\n          <Snackbar\n            open={open}\n            onClose={handleClose}\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n            // anchorPosition ={ { right: 10, top: 100 }}\n          >\n            <Alert onClose={handleClose} severity=\"warning\">\n              Please Don't Leave Tab During Exam!\n            </Alert>\n          </Snackbar>\n          <Container fluid className=\"root noselect\">\n            <Row className=\"justify-content-center\">\n              <Col xs={7} className=\"exam\">\n                <Row className=\"exam__title justify-content-center\">\n                  <Col xs=\"auto\">\n                    <h4>{examinfo.name}</h4>\n                  </Col>\n                </Row>\n\n                {des}\n\n                <Row className=\"d-flex justify-content-between exam__question\">\n                  <Col>\n                    <h5>\n                      {examinfo.mcqQuestions\n                        ? examinfo.mcqQuestions[questionIndex].mcqQuestionId\n                            .mainQuestion\n                        : examinfo.cqQuestions[questionIndex].cqQuestionId\n                            .mainQuestion}\n                    </h5>\n                  </Col>\n                  <Col xs=\"auto\">\n                    <p style={{ fontSize: \"1vw\" }}>\n                      Marks:{\" \"}\n                      {examinfo.mcqQuestions\n                        ? examinfo.mcqQuestions[questionIndex].mcqQuestionId\n                            .marks\n                        : examinfo.cqQuestions[questionIndex].cqQuestionId\n                            .marks}\n                    </p>\n                  </Col>\n                </Row>\n                <Row className=\"exam__options\">\n                  <Col xs={12}>\n                    {examinfo.mcqQuestions ? (\n                      <FormControl component=\"fieldset\" fullWidth>\n                        <RadioGroup\n                          aria-label=\"ans\"\n                          name=\"ans\"\n                          value={value}\n                          onChange={handleChange}\n                        >\n                          <Row className=\"option\" xs={12}>\n                            <Col xs={12}>\n                              <FormControlLabel\n                                value={\n                                  examinfo.mcqQuestions[questionIndex]\n                                    .mcqQuestionId.options[0].option\n                                }\n                                control={<Radio color=\"primary\" />}\n                                label={\n                                  examinfo.mcqQuestions[questionIndex]\n                                    .mcqQuestionId.options[0].option\n                                }\n                              />\n                            </Col>\n                          </Row>\n                          <Row className=\"option\">\n                            <Col xs={12}>\n                              <FormControlLabel\n                                value={\n                                  examinfo.mcqQuestions[questionIndex]\n                                    .mcqQuestionId.options[1].option\n                                }\n                                control={<Radio color=\"primary\" />}\n                                label={\n                                  examinfo.mcqQuestions[questionIndex]\n                                    .mcqQuestionId.options[1].option\n                                }\n                              />\n                            </Col>\n                          </Row>\n                          <Row className=\"option\">\n                            <Col xs={12}>\n                              <FormControlLabel\n                                value={\n                                  examinfo.mcqQuestions[questionIndex]\n                                    .mcqQuestionId.options[2].option\n                                }\n                                control={<Radio color=\"primary\" />}\n                                label={\n                                  examinfo.mcqQuestions[questionIndex]\n                                    .mcqQuestionId.options[2].option\n                                }\n                              />\n                            </Col>\n                          </Row>\n                          <Row className=\"option\">\n                            <Col xs={12}>\n                              <FormControlLabel\n                                value={\n                                  examinfo.mcqQuestions[questionIndex]\n                                    .mcqQuestionId.options[3].option\n                                }\n                                control={<Radio color=\"primary\" />}\n                                label={\n                                  examinfo.mcqQuestions[questionIndex]\n                                    .mcqQuestionId.options[3].option\n                                }\n                              />\n                            </Col>\n                          </Row>\n                        </RadioGroup>\n                      </FormControl>\n                    ) : (\n                      <TextField\n                        id=\"ans\"\n                        label=\"Answer\"\n                        autoFocus\n                        margin=\"dense\"\n                        fullWidth\n                        multiline\n                        rows={5}\n                        variant=\"standard\"\n                        value={answer}\n                        onChange={handleAnswer}\n                        onCopy=\"return false\"\n                        onDrag=\"return false\"\n                        onDrop=\"return false\"\n                        onPaste=\"return false\"\n                      />\n                    )}\n                  </Col>\n                </Row>\n                <Row className=\"feedback\">\n                  <Col>\n                    <p>\n                      Something wrong with this question?\n                      <a onClick={handleFeedbackOpen}>\n                        <b> Give Feedback</b>\n                      </a>\n                    </p>\n                    <Dialog\n                      open={openFeedback}\n                      onClose={handleClose}\n                      aria-labelledby=\"form-dialog-title\"\n                    >\n                      <DialogContent>\n                        <DialogTitle>\n                          Let your teacher know what is wrong\n                        </DialogTitle>\n                        <TextField\n                          autoFocus\n                          margin=\"dense\"\n                          id=\"feedback\"\n                          label=\"Feedback\"\n                          fullWidth\n                          multiline\n                          rows={3}\n                          variant=\"outlined\"\n                          value={feedback}\n                          onChange={handleFeedback}\n                        />\n                      </DialogContent>\n                      <DialogActions>\n                        <Button onClick={handleFeedbackClose} color=\"default\">\n                          Cancel\n                        </Button>\n                        <Button onClick={handleFeedbackClose} color=\"primary\">\n                          Send\n                        </Button>\n                      </DialogActions>\n                    </Dialog>\n                  </Col>\n                </Row>\n                <Row className=\"exam__buttons d-flex justify-content-between\">\n                  <Col>\n                    <span className=\"timer\">\n                      <b>\n                        {/* <div id=\"countdown\"></div> */}\n                        {seconds <= 0 ? \"Timeout!\" : seconds}\n                      </b>\n                    </span>\n                  </Col>\n                  <Col xs=\"auto\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={nextQuestion}\n                      disableElevation\n                      disabled={disableNextButton}\n                      style={{ backgroundColor: \"#3F7CAC\" }}\n                      // disabled={\n                      //   questionIndex + 1 == examinfo.mcqQuestions.length && true\n                      // }\n                    >\n                      Next\n                    </Button>\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      );\n  } else return <LinearIndeterminate />;\n}\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Sidebar.js",["248","249","250"],"import React, { useState ,useEffect} from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { IoCreate } from \"react-icons/io5\";\nimport { IoClipboard } from \"react-icons/io5\";\nimport { FaAngleDoubleRight } from \"react-icons/fa\";\nimport { FaChalkboardTeacher } from \"react-icons/fa\";\nimport { FaUsers } from \"react-icons/fa\";\nimport { FaInfoCircle } from \"react-icons/fa\";\nimport \"./Sidebar.scss\";\nimport ExamType from \"./CreateExam/ExamType\";\nimport Students from './Students';\nimport Exams from \"./Exams\";\nimport Teacher from \"./Teacher\";\nimport Info from \"./Info\";\n\nexport default function Sidebar(props) {\n\n\n\n  let userdata;\n  userdata = localStorage.getItem(\"data\");\n  userdata = JSON.parse(userdata);\n\n  console.log(props.courseData);\n\n\n  let displayContent;\n\n  const [sidebar, setSidebar] = useState(false);\n  const showSidebar = () => setSidebar(!sidebar);\n\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const [content, setContent] = useState(\"\");\n  const handleClick = (prop) => (event) => {\n    setContent(prop);\n  };\n  console.log(content);\n  if (content === \"createExam\")\n    displayContent = (\n      <ExamType className=\"content\" courseData={props.courseData} />\n    );\n  else if (content === \"exams\")\n    displayContent = (\n      <Exams\n        className=\"content\"\n        userInfo={userdata}\n        courseData={props.courseData}\n      />\n    );\n  else if (content === \"students\")\n    displayContent = (\n      <Students\n        className=\"content\"\n        userInfo={userdata}\n        courseData={props.courseData}\n      />\n    );\n  else if(content === \"teacher\") {\n    displayContent = (\n      <Teacher\n        className=\"content\"\n        userInfo={userdata}\n        courseData={props.courseData}\n      />\n    );\n  }\n  else if(content === \"info\") {\n    displayContent = (\n      <Info\n        className=\"content\"\n        userInfo={userdata}\n        courseData={props.courseData}\n      />\n    );\n  }\n\n  return (\n    <div className=\"parent\">\n      <div className={sidebar ? \"sidebar active\" : \"sidebar\"}>\n        <ul className=\"sidebar__nav\">\n          <li className=\"sidebar__logo\">\n            <Row>\n              <span className=\"sidebar__item__link\" onClick={showSidebar}>\n                <Col xs={4} className=\"sidebar__item__text\">\n                  {props.courseData.code}\n                </Col>\n                <Col xs={sidebar ? { span: 4, offset: 2 } : {}}>\n                  <FaAngleDoubleRight className=\"sidebar__item__icon\" />\n                </Col>\n              </span>\n            </Row>\n          </li>\n          {userdata.role === \"Teacher\" ? (\n            <li className=\"sidebar__item\">\n              <a\n                href=\"#create-exam\"\n                id=\"create-exam\"\n                className=\"sidebar__item__link\"\n                onClick={handleClick(\"createExam\")}\n              >\n                <IoCreate className=\"sidebar__item__icon\" />\n                <span className=\"sidebar__item__text\">Create Exam</span>\n              </a>\n            </li>\n          ) : (\n            \"\"\n          )}\n          <li className=\"sidebar__item\">\n            <a\n              href=\"#exams\"\n              id=\"exams\"\n              className=\"sidebar__item__link\"\n              onClick={handleClick(\"exams\")}\n            >\n              <IoClipboard className=\"sidebar__item__icon\" />\n              <span className=\"sidebar__item__text\">Exams</span>\n            </a>\n          </li>\n          <li className=\"sidebar__item\">\n            <a\n              href=\"#students\"\n              id=\"students\"\n              className=\"sidebar__item__link\"\n              onClick={handleClick(\"students\")}\n            >\n              <FaUsers className=\"sidebar__item__icon\" />\n              <span className=\"sidebar__item__text\">Students</span>\n            </a>\n          </li>\n          <li className=\"sidebar__item\">\n            <a\n              href=\"#teacher\"\n              id=\"teacher\"\n              className=\"sidebar__item__link\"\n              onClick={handleClick(\"teacher\")}\n            >\n              <FaChalkboardTeacher className=\"sidebar__item__icon\" />\n              <span className=\"sidebar__item__text\">Teacher</span>\n            </a>\n          </li>\n          <li className=\"sidebar__item\">\n            <a\n              href=\"#info\"\n              id=\"info\"\n              className=\"sidebar__item__link\"\n              onClick={handleClick(\"info\")}\n            >\n              <FaInfoCircle className=\"sidebar__item__icon\" />\n              <span className=\"sidebar__item__text\">Course Info</span>\n            </a>\n          </li>\n        </ul>\n      </div>\n      <div className={sidebar ? \"content__small\" : \"content__large\"}>\n        {displayContent}\n      </div>\n    </div>\n  );\n}\n","/home/jspw/Documents/Projects/Paper/client/src/Components/PreviousExam/MarkSheet.js",["251","252"],"/home/jspw/Documents/Projects/Paper/client/src/Components/Generic/Loader.js",[],"/home/jspw/Documents/Projects/Paper/client/src/Components/Generic/Forms.js",["253"],"import React, { useState, useEffect } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport axios from \"axios\";\nimport \"./Forms.scss\";\n\nconst apiDomain = \"http://localhost:8080/\";\n\nconst TextFieldForm = (props) => (\n  <TextField\n  id={props.id}\n  label={props.label}\n  multiline\n  rows={props.rows}\n  variant=\"outlined\"\n  onChange={props.handleChange(props.id)}\n  labelWidth={props.labelWidth}\n  value={props.values}\n  fullWidth\n  className={props.classes.textField}\n  required={props.required}\n  defaultValue={props.defaultValue ? props.defaultValue : ''}\n  disabled={props.disabled ? props.disabled : false}\n/>\n)\n\nconst TextForm = (props) => (\n  <FormControl\n    className={props.classes.textField}\n    variant=\"outlined\"\n    fullWidth\n    required={props.required}\n  >\n    <InputLabel>{props.label}</InputLabel>\n    <OutlinedInput\n      id={props.id}\n      onChange={props.handleChange(props.id)}\n      value={props.values}\n      labelWidth={props.labelWidth}\n    />\n  </FormControl>\n);\n\nconst PasswordForm = (props) => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n  return (\n    <FormControl\n      className={props.classes.textField}\n      variant=\"outlined\"\n      fullWidth\n      required\n    >\n      <InputLabel>{props.label}</InputLabel>\n      <OutlinedInput\n        id={props.id}\n        type={showPassword ? \"text\" : \"password\"}\n        value={props.values}\n        onChange={props.handleChange(props.id)}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label={\"password\"}\n              onClick={handleClickShowPassword}\n              onMouseDown={handleMouseDownPassword}\n              edge=\"end\"\n            >\n              {showPassword ? <Visibility /> : <VisibilityOff />}\n            </IconButton>\n          </InputAdornment>\n        }\n        labelWidth={props.labelWidth}\n      />\n    </FormControl>\n  );\n};\n\nconst Forms = (props) => {\n  const type = props.type;\n\n  const [universities, setUniversities] = useState(null);\n  const [isApiLoaded, setIsApiLoaded] = useState(true);\n\n  // console.log(props);\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: apiDomain + \"university/all\",\n    })\n      .then((response) => {\n        // console.log(\"All Universites..\");\n\n        // console.log(response.data);\n\n        const data = response.data;\n\n        if (data.status === \"OK\") {\n          setUniversities(data.result.data.universities);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsApiLoaded(false);\n      });\n  }, []);\n\n  const SelectForm = (props) => {\n    // console.log(\"COMPONENT : select form\");\n    let items = [];\n    const id = props.id;\n\n    if (universities) {\n      // console.log(\"Univbersity\", universities);\n\n      // for (let i = 0; i < universities.length; i++) {\n      //   console.log(\"Loop\");\n      //   console.log(universities[i]);\n      // }\n\n      if (id === \"role\")\n        items = [\n          {\n            id: \"Teacher\",\n            value: \"Teacher\",\n          },\n          {\n            id: \"Student\",\n            value: \"Student\",\n          },\n        ];\n      else if (id === \"university\") {\n        items = [];\n        universities.forEach((element) => {\n          items.push({\n            id: element._id,\n            value: element.shortform,\n          });\n        });\n      } else if (id === \"department\") {\n        items = [];\n\n        if (props.selectedUniversity) {\n          // console.log(\"Selected University \", props.selectedUniversity);\n          universities.forEach((element) => {\n            if (element._id === props.selectedUniversity) {\n              element.departments.forEach((dept) => {\n                // console.log(dept);\n                items.push({\n                  id: dept._id,\n                  value: dept.shortform,\n                });\n              });\n            }\n          });\n        }\n      } else if (id === \"session\") {\n        items = [];\n        items = [\n          {\n            id: \"2016-2017\",\n            value: \"2016-2017\",\n          },\n          {\n            id: \"2017-2018\",\n            value: \"2017-2018\",\n          },\n          {\n            id: \"2018-2019\",\n            value: \"2018-2019\",\n          },\n          {\n            id: \"2020-2021\",\n            value: \"2020-2021\",\n          },\n        ];\n      } else if (id === \"designation\") {\n        items = [];\n        items = [\n          {\n            id: \"Department Head\",\n            value: \"Department Head\",\n          },\n          {\n            id: \"Professor\",\n            value: \"Professor\",\n          },\n          {\n            id: \"Assistant Professor\",\n            value: \"Assistant Professor\",\n          },\n          {\n            id: \"Lecturer\",\n            value: \"Lecturer\",\n          },\n        ];\n      } else if(id === \"options\") {\n        items = [];\n        items = [\n          {\n            id: \"optA\",\n            value: \"A\",\n          },\n          {\n            id: \"optB\",\n            value: \"B\",\n          },\n          {\n            id: \"optC\",\n            value: \"C\",\n          },\n          {\n            id: \"optD\",\n            value: \"D\",\n          },\n        ];\n      }\n    }\n\n    const menuItems = items.map((item, i) => {\n      // console.log(items);\n      return (\n        <MenuItem key={i} value={item.id}>\n          {item.value}\n        </MenuItem>\n      );\n    });\n\n    return (\n      <FormControl\n      disabled = {props.disable ?  props.disable : false}\n        variant=\"outlined\"\n        className={props.classes.textField}\n        fullWidth\n        required\n      >\n        <InputLabel>{props.label}</InputLabel>\n        <Select\n          id={id}\n          value={props.values}\n          onChange={props.handleChange(id)}\n          label={props.label}\n        >\n          <MenuItem disabled>\n            <em>{props.label}</em>\n          </MenuItem>\n          {menuItems}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  if (type === \"text\") {\n    return <TextForm {...props} />;\n  } else if (type === \"password\") {\n    return <PasswordForm {...props} />;\n  } else if (type === \"select\") {\n    return <SelectForm {...props} />;\n  } else {\n    return <TextFieldForm {...props}/>\n  }\n};\n\nexport default Forms;\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Timer/Timer.js",["254","255","256","257","258","259"],"import { useRef, useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from '@material-ui/core/Button';\nimport \"./Timer.css\";\n\nconst Timer = (props) => {\n  const [timerDays, setTimerDays] = useState(\"00\");\n  const [timerHours, setTimerHours] = useState(\"00\");\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\n\n  //   console.log(props.deadline)\n  let interval = useRef();\n\n  const timer = (props) => {\n    const seconds = 1000;\n    const minutes = seconds * 60;\n    const hours = minutes * 60;\n    const days = hours * 24;\n    const deadline = new Date(props.deadline).getTime();\n\n    interval = setInterval(() => {\n      const now = new Date().getTime();\n      const timeLeft = deadline - now;\n      if (timeLeft < 0) {\n        clearInterval(interval.current);\n      } else {\n        setTimerDays(Math.floor(timeLeft / days));\n        setTimerHours(Math.floor((timeLeft % days) / hours));\n        setTimerMinutes(Math.floor((timeLeft % hours) / minutes));\n        setTimerSeconds(Math.floor((timeLeft % minutes) / seconds));\n      }\n    }, 1000);\n  };\n\n  useEffect(() => {\n    timer(props);\n    return () => {\n      clearInterval(interval.current);\n    };\n  });\n\n  if (timerDays == 0 && timerHours == 0 && timerMinutes == 0 && timerSeconds == 0)\n    return (\n      <Container className=\"enterExam\">\n        <Row className=\"d-flex justify-content-center enterHeading\">\n          <Col xs=\"auto\">\n            <h4>Your Exam is Running!</h4>\n          </Col>\n        </Row>\n        <Row className=\"d-flex justify-content-center\">\n          <Col xs=\"auto\">\n            <Link\n              to={`/live-exam/${props.examID}`}\n              style={{ textDecoration: \"none\", color: \"black\" }}\n            >\n              <Button variant=\"contained\" color=\"primary\" disableElevation style={{backgroundColor: \"#3F7CAC\"}}>Enter Exam</Button>\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n    );\n  else\n    return (\n      <div className=\"timer-container\">\n        <ul>\n          <li>\n            <span id=\"days\">{timerDays}</span> Days\n          </li>\n          <li>\n            <span id=\"hours\">{timerHours}</span> Hours\n          </li>\n          <li>\n            <span id=\"minutes\">{timerMinutes}</span> Minutes\n          </li>\n          <li>\n            <span id=\"seconds\">{timerSeconds}</span> Seconds\n          </li>\n        </ul>\n      </div>\n    );\n};\n\nexport default Timer;\n","/home/jspw/Documents/Projects/Paper/client/src/Components/PreviousExam/ExamInfo.js",["260","261","262","263","264","265","266","267","268"],"import React from \"react\";\nimport { Col, Container, Row, Card, Alert, Table } from \"react-bootstrap\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Box, CardContent, MenuList, Typography } from \"@material-ui/core\";\n\nimport {\n  Button,\n  Modal,\n  Form,\n  Spinner,\n  Jumbotron,\n  Tab,\n  TabContainer,\n  ListGroup,\n  TabContent,\n  TabPane,\n} from \"react-bootstrap\";\n\nimport \"./PreviousExam.css\";\n\nconst ExamInfo = (props) => {\n  var months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  var days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  const mcqExamData = props.mcqExamData;\n  const cqExamData = props.cqExamData;\n  const onlyExamInfo = props.onlyExamInfo;\n  let mcq;\n  let cq;\n\n  console.log(\"mcqExamData\", mcqExamData);\n  console.log(\"cqExamData\", cqExamData);\n  console.log(\"onlyExamInfo\", onlyExamInfo);\n\n  if (mcqExamData) {\n    mcq = mcqExamData.mcqExam.mcqQuestions.map((questions) => {\n      return (\n        <div>\n          <Card>\n            <Box fontWeight=\"fontWeightBold\" m={1}>\n              {\" \"}\n              Question :{\" \"}\n            </Box>\n            <div className=\"card card-body bg-light\">\n              <Typography>{questions.mcqQuestionId.description}</Typography>\n              {/* <Alert variant=\"primary\"> */}\n              <Typography>{questions.mcqQuestionId.mainQuestion}</Typography>\n              {/* </Alert> */}\n            </div>\n\n            <CardContent>\n              {/* <Box fontWeight=\"fontWeightBold\" m={1}> Options :  </Box> */}\n              <MenuList>\n                {questions.mcqQuestionId.options.map((op) => {\n                  if (\n                    questions.mcqQuestionId.correctAnswers[0].answer ===\n                    op.option\n                  )\n                    return <Alert variant=\"success\">{op.option}</Alert>;\n\n                  return <MenuItem>{op.option}</MenuItem>;\n                })}\n              </MenuList>\n            </CardContent>\n          </Card>\n          <br></br>\n        </div>\n      );\n    });\n  } else if (cqExamData) {\n    cq = cqExamData.cqExam.cqQuestions.map((cqx, i) => {\n      console.log(cqExamData);\n      return (\n        <div>\n          <Card>\n            <Box fontWeight=\"fontWeightBold\" m={1}>\n              {\" \"}\n              Question : [ {`Marks : ${cqx.cqQuestionId.marks} || `}\n              {`Time : ${cqx.cqQuestionId.time / 60}  min  ${\n                cqx.cqQuestionId.time % 60\n              } sec `}\n              ]\n            </Box>\n\n            <div className=\"card card-body bg-light\">\n              <Typography>\n                {\" \"}\n                {cqx.cqQuestionId.description\n                  ? cqx.cqQuestionId.description\n                  : \"\"}\n              </Typography>\n\n              <Typography> {cqx.cqQuestionId.mainQuestion} </Typography>\n            </div>\n            <CardContent>\n              <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label>\n                  <Box fontWeight=\"fontWeightBold\" m={1}>\n                    Ans :{\" \"}\n                  </Box>\n                </Form.Label>\n                <Form.Control\n                  value={\n                    cqExamData.studentAnswers[i]\n                      ? cqExamData.studentAnswers[i].studentAnswer\n                      : \"\"\n                  }\n                  disabled\n                  as=\"textarea\"\n                  rows={3}\n                />\n              </Form.Group>\n            </CardContent>\n          </Card>\n          <br></br>\n        </div>\n      );\n    });\n  }\n\n  if (onlyExamInfo) {\n    if (onlyExamInfo.mcqQuestions)\n      mcq = onlyExamInfo.mcqQuestions.map((questions) => {\n        return (\n          <div>\n            <Card>\n              <Box fontWeight=\"fontWeightBold\" m={1}>\n                {\" \"}\n                Question :{\" \"}\n              </Box>\n              <div className=\"card card-body bg-light\">\n                <Typography>{questions.mcqQuestionId.description}</Typography>\n                {/* <Alert variant=\"primary\"> */}\n                <Typography>{questions.mcqQuestionId.mainQuestion}</Typography>\n                {/* </Alert> */}\n              </div>\n\n              <CardContent>\n                {/* <Box fontWeight=\"fontWeightBold\" m={1}> Options :  </Box> */}\n                <MenuList>\n                  {questions.mcqQuestionId.options.map((op) => {\n                    if (\n                      questions.mcqQuestionId.correctAnswers[0].answer ===\n                      op.option\n                    )\n                      return <Alert variant=\"success\">{op.option}</Alert>;\n\n                    return <MenuItem>{op.option}</MenuItem>;\n                  })}\n                </MenuList>\n              </CardContent>\n            </Card>\n            <br></br>\n          </div>\n        );\n      });\n\n    if (onlyExamInfo.cqQuestions)\n      cq = onlyExamInfo.cqQuestions.map((questions) => {\n        return (\n          <div>\n            <Card>\n              <Box fontWeight=\"fontWeightBold\" m={1}>\n                {\" \"}\n                Question :{\" \"}\n              </Box>\n              <div className=\"card card-body bg-light\">\n                <Typography>{questions.cqQuestionId.description}</Typography>\n                {/* <Alert variant=\"primary\"> */}\n                <Typography>{questions.cqQuestionId.mainQuestion}</Typography>\n                {/* </Alert> */}\n              </div>\n\n              {/* <CardContent>\n              <MenuList>\n                {questions.mcqQuestionId.options.map((op) => {\n                  if (\n                    questions.mcqQuestionId.correctAnswers[0].answer ===\n                    op.option\n                  )\n                    return <Alert variant=\"success\">{op.option}</Alert>;\n\n                  return <MenuItem>{op.option}</MenuItem>;\n                })}\n              </MenuList>\n            </CardContent> */}\n            </Card>\n            <br></br>\n          </div>\n        );\n      });\n\n    return (\n      <Container fluid style={{ marginTop: \"5px\" }}>\n        <Alert variant=\"light\">\n          <h1 className=\"text-center\">Exam Name : {onlyExamInfo.name}</h1>\n        </Alert>\n        <Row>\n          <Col>\n            <Row>\n              <Col>\n                <Table\n                  // variant=\"dark\"\n                  responsive\n                  hover\n                  bordered\n                  size=\"sm\"\n                  bsPrefix=\"table\"\n                >\n                  <tbody>\n                    <tr>\n                      <td>Date</td>\n                      <td>\n                        {new Date(onlyExamInfo.date).getDate()}\n                        th {months[new Date(onlyExamInfo.date).getMonth()]},\n                        {new Date(onlyExamInfo.date).getFullYear()} (\n                        {days[new Date(onlyExamInfo.date).getDay()]})\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>At</td>\n                      <td>\n                        {new Date(onlyExamInfo.date).getHours() < 10\n                          ? \"0\" + new Date(onlyExamInfo.date).getHours()\n                          : new Date(onlyExamInfo.date).getHours()}\n                        :\n                        {new Date(onlyExamInfo.date).getMinutes() < 10\n                          ? \"0\" + new Date(onlyExamInfo.date).getMinutes()\n                          : new Date(onlyExamInfo.date).getMinutes()}{\" \"}\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          </Col>\n\n          <Col>\n            <Row>\n              <Col></Col>\n              <Col>\n                <Table\n                  // variant=\"dark\"\n                  responsive\n                  hover\n                  bordered\n                  size=\"sm\"\n                  bsPrefix=\"table\"\n                >\n                  <tbody>\n                    <tr>\n                      <td>Total Marks</td>\n                      <td>{onlyExamInfo.totalMarks}</td>\n                    </tr>\n\n                    <tr>\n                      <td>Total Time</td>\n                      <td>{onlyExamInfo.totalTime} min</td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <Container>{mcq ? mcq : cq}</Container>\n      </Container>\n    );\n  } else\n    return (\n      <Container fluid style={{ marginTop: \"5px\" }}>\n        <Alert variant=\"light\">\n          <h1 className=\"text-center\">\n            Exam Name :{\" \"}\n            {mcqExamData ? mcqExamData.mcqExam.name : cqExamData.cqExam.name}\n          </h1>\n        </Alert>\n        <Row>\n          <Col>\n            <Row>\n              <Col>\n                <Table\n                  // variant=\"dark\"\n                  responsive\n                  hover\n                  bordered\n                  size=\"sm\"\n                  bsPrefix=\"table\"\n                >\n                  <tbody>\n                    <tr>\n                      <td>Date</td>\n                      <td>\n                        {new Date(\n                          mcqExamData\n                            ? mcqExamData.submitOn\n                            : cqExamData.submitOn\n                        ).getDate()}\n                        th{\" \"}\n                        {\n                          months[\n                            new Date(\n                              mcqExamData\n                                ? mcqExamData.submitOn\n                                : cqExamData.submitOn\n                            ).getMonth()\n                          ]\n                        }\n                        ,\n                        {new Date(\n                          mcqExamData\n                            ? mcqExamData.submitOn\n                            : cqExamData.submitOn\n                        ).getFullYear()}{\" \"}\n                        (\n                        {\n                          days[\n                            new Date(\n                              mcqExamData\n                                ? mcqExamData.submitOn\n                                : cqExamData.submitOn\n                            ).getDay()\n                          ]\n                        }\n                        )\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>At</td>\n                      <td>\n                        {new Date(\n                          mcqExamData\n                            ? mcqExamData.mcqExam.date\n                            : cqExamData.cqExam.date\n                        ).getHours() < 10\n                          ? \"0\" +\n                            new Date(\n                              mcqExamData\n                                ? mcqExamData.mcqExam.date\n                                : cqExamData.cqExam.date\n                            ).getHours()\n                          : new Date(\n                              mcqExamData\n                                ? mcqExamData.mcqExam.date\n                                : cqExamData.cqExam.date\n                            ).getHours()}\n                        :\n                        {new Date(\n                          mcqExamData\n                            ? mcqExamData.mcqExam.date\n                            : cqExamData.cqExam.date\n                        ).getMinutes() < 10\n                          ? \"0\" +\n                            new Date(\n                              mcqExamData\n                                ? mcqExamData.mcqExam.date\n                                : cqExamData.cqExam.date\n                            ).getMinutes()\n                          : new Date(\n                              mcqExamData\n                                ? mcqExamData.mcqExam.date\n                                : cqExamData.cqExam.date\n                            ).getMinutes()}{\" \"}\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          </Col>\n\n          <Col>\n            <Row>\n              <Col></Col>\n              <Col>\n                <Table\n                  // variant=\"dark\"\n                  responsive\n                  hover\n                  bordered\n                  size=\"sm\"\n                  bsPrefix=\"table\"\n                >\n                  <tbody>\n                    <tr>\n                      <td>Total Marks</td>\n                      <td>\n                        {mcqExamData\n                          ? mcqExamData.mcqExam.totalMarks\n                          : cqExamData.cqExam.totalMarks}\n                      </td>\n                    </tr>\n\n                    <tr>\n                      <td>Total Time</td>\n                      <td>\n                        {mcqExamData\n                          ? mcqExamData.mcqExam.totalTime\n                          : cqExamData.cqExam.totalTime}{\" \"}\n                        min\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <Container className=\"scroll\">{mcq}</Container>\n      </Container>\n    );\n};\n\nexport default ExamInfo;\n","/home/jspw/Documents/Projects/Paper/client/src/Components/LiveExam/Result.js",[],"/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Info.js",["269"],"import React from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nexport default function(props) {\n    const name = props.courseData.name;\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1>Course Info</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h5>Name</h5>\n          </Col>\n          <Col>\n            <h5>{name}</h5>\n          </Col>\n        </Row>\n        <Row>\n        <Col>\n            <h5>Department</h5>\n          </Col>\n          <Col>\n            <h5>{props.userInfo.department}</h5>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h5>University</h5>\n          </Col>\n          <Col>\n            <h5>{props.userInfo.varsity}</h5>\n          </Col>\n        </Row>\n      </Container>\n    );\n}","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Teacher.js",["270"],"import React from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nexport default function(props) {\n    const name = `${props.userInfo.firstName} ${props.userInfo.lastName}`\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1>Teacher Info</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h5>Name</h5>\n          </Col>\n          <Col>\n            <h5>{name}</h5>\n          </Col>\n        </Row>\n        <Row>\n        <Col>\n            <h5>Department</h5>\n          </Col>\n          <Col>\n            <h5>{props.userInfo.department}</h5>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h5>University</h5>\n          </Col>\n          <Col>\n            <h5>{props.userInfo.varsity}</h5>\n          </Col>\n        </Row>\n      </Container>\n    );\n}","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Exams.js",["271","272","273","274","275","276","277","278"],"import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nconst Exams = (props) => {\n  console.log(props.userInfo.role);\n\n  const exams = [];\n\n  if (props.courseData.cqExams) {\n    props.courseData.cqExams.forEach((exam, j) => {\n      if (\n        new Date(exam.examId.date).getTime() + exam.examId.totalTime * 1000 <\n        new Date().getTime()\n      )\n        exams.push({\n          _id: exam.examId._id,\n          name: exam.examId.name,\n          courseName: props.courseData.name,\n          date: new Date(exam.examId.date),\n          totalMarks: exam.examId.totalMarks,\n          examType: \"cq\",\n          when: \"previous\",\n          totalTime: exam.examId.totalTime,\n          createdBy: props.courseData.createdBy.firstName\n            ? props.courseData.createdBy.firstName\n            : \"\" + \" \" + props.courseData.createdBy.lastName\n            ? props.courseData.createdBy.lastName\n            : \"\" + \" \" + props.courseData.createdBy.username,\n        });\n      else {\n        exams.push({\n          _id: exam.examId._id,\n          name: exam.examId.name,\n          courseName: props.courseData.name,\n          date: new Date(exam.examId.date),\n          totalMarks: exam.examId.totalMarks,\n          totalTime: exam.examId.totalTime,\n          examType: \"cq\",\n          when: \"upcoming\",\n          createdBy: props.courseData.createdBy.firstName\n            ? props.courseData.createdBy.firstName\n            : \"\" + \" \" + props.courseData.createdBy.lastName\n            ? props.courseData.createdBy.lastName\n            : \"\" + \" \" + props.courseData.createdBy.username,\n        });\n      }\n    });\n  }\n\n  if (props.courseData.mcqExams) {\n    props.courseData.mcqExams.forEach((exam, j) => {\n      if (\n        new Date(exam.examId.date).getTime() + exam.examId.totalTime * 1000 >\n        new Date().getTime()\n      )\n        exams.push({\n          _id: exam.examId._id,\n          name: exam.examId.name,\n          courseName: props.courseData.name,\n          date: new Date(exam.examId.date),\n          totalMarks: exam.examId.totalMarks,\n          totalTime: exam.examId.totalTime,\n          examType: \"mcq\",\n          when: \"upcoming\",\n          createdBy: props.courseData.createdBy.firstName\n            ? props.courseData.createdBy.firstName\n            : \"\" + \" \" + props.courseData.createdBy.lastName\n            ? props.courseData.createdBy.lastName\n            : \"\" + \" \" + props.courseData.createdBy.username,\n        });\n      else {\n        exams.push({\n          _id: exam.examId._id,\n          name: exam.examId.name,\n          courseName: props.courseData.name,\n          date: new Date(exam.examId.date),\n          totalMarks: exam.examId.totalMarks,\n          totalTime: exam.examId.totalTime,\n          examType: \"mcq\",\n          when: \"previous\",\n          createdBy: props.courseData.createdBy.firstName\n            ? props.courseData.createdBy.firstName\n            : \"\" + \" \" + props.courseData.createdBy.lastName\n            ? props.courseData.createdBy.lastName\n            : \"\" + \" \" + props.courseData.createdBy.username,\n        });\n      }\n    });\n  }\n\n  exams.sort(function (a, b) {\n    return b.date.getTime() - a.date.getTime();\n  });\n\n  let x = 1;\n  const tableBody = exams.map((exam) => {\n    console.log(\"exam->\", exam);\n    return (\n      <>\n        <tr>\n          <td>{x++}</td>\n          <td>{exam.name}</td>\n          <td>{exam.examType}</td>\n          <td>{exam.totalMarks}</td>\n          <td>{`${Math.round(exam.totalTime / 60)} min : ${\n            exam.totalTime % 60\n          } sec`}</td>\n          <td>{exam.when}</td>\n          <td>{exam.date.toString()}</td>\n          {props.userInfo.role === \"Teacher\" ? (\n            <td>\n              <Button disabled = {exam.examType === 'mcq' ? true : false }  href={`/examine/${exam._id}`} variant=\"primary\">\n                Examine\n              </Button>\n            </td>\n          ) : null}\n\n          <td>\n            <Button href={`/${exam.when}-exam/${exam._id}`} variant=\"info\">\n              View\n            </Button>\n          </td>\n        </tr>\n      </>\n    );\n  });\n\n  return (\n    <table\n      className=\"table table-hover table-striped table-light\"\n      style={{ textAlign: \"center\" }}\n    >\n      <thead className=\"thead-dark\">\n        <tr>\n          <th>#</th>\n          <th>Exam Name</th>\n          <th>Exam Type</th>\n          <th>Total Marks</th>\n          <th>Total Time</th>\n          <th>Condition</th>\n          <th>Date</th>\n          {props.userInfo.role === \"Teacher\" ? <th>Check</th> : null}\n          <th>Action</th>\n        </tr>\n      </thead>\n\n      <tbody>{tableBody}</tbody>\n    </table>\n  );\n};\n\nexport default Exams;\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/Students.js",["279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298"],"import React from \"react\";\nimport { Col, Container, Row, Card, Alert, Table } from \"react-bootstrap\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Box, CardContent, MenuList, Typography } from \"@material-ui/core\";\n\nimport {\n  Button,\n  Modal,\n  Form,\n  Spinner,\n  Jumbotron,\n  Tab,\n  TabContainer,\n  ListGroup,\n  TabContent,\n  TabPane,\n} from \"react-bootstrap\";\n\nconst Students = (props) => {\n  console.log(props.userInfo);\n  console.log(props.courseData);\n\n  let x = 1;\n  const tableBody = props.courseData.students.map((students) => {\n    return (\n      <>\n        <tr>\n          <td>{x++}</td>\n          {/* <td> */}\n          {/* <span class=\"crown badge\" style={{ fontSize: \"20px\" }}>\n              {x == 2 ? \"👑\" : \"\"}\n            </span> */}\n          {/* {students.student} */}\n          {/* </td> */}\n          {/*   <td>{exam.examType}</td>\n          <td>{exam.totalMarks}</td>\n          <td>{`${Math.round(exam.totalTime / 60)} min : ${\n            exam.totalTime % 60\n          } sec`}</td>\n          <td>{exam.when}</td>\n          <td>{exam.date.toString()}</td>\n          {props.userInfo.role === \"Teacher\" ? (\n            <td>\n              <Button href={`/profile/${tudents.student}`} variant=\"primary\">\n                Examine\n              </Button>\n            </td>\n          ) : (\n            null\n          )} */}\n\n          <td>\n            <Button href={`/profile/${students.student}`} variant=\"primary\">\n              Examine\n            </Button>\n          </td>\n\n          {/* <td>\n            <Button href={`/${exam.when}-exam/${exam._id}`} variant=\"info\">\n              View\n            </Button>\n          </td> */}\n        </tr>\n      </>\n    );\n  });\n\n  return (\n    <table\n      className=\"table table-hover table-striped table-light\"\n      style={{ textAlign: \"center\" }}\n    >\n      <thead className=\"thead-dark\">\n        <tr>\n          <th>#</th>\n          {/* <th>Exam Name</th>\n          <th>Exam Type</th>\n          <th>Total Marks</th>\n          <th>Total Time</th>\n\n          <th>Condition</th>\n          <th>Date</th>\n          {props.userInfo.role === \"Teacher\" ? <th>Check</th> : null} */}\n          <th>Action</th>\n        </tr>\n      </thead>\n\n      <tbody>{tableBody}</tbody>\n    </table>\n  );\n};\n\nexport default Students;\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/CreateExam/ExamType.js",[],"/home/jspw/Documents/Projects/Paper/client/src/Components/Course/CreateExam/CreateExam.js",["299"],"import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Tabs } from \"antd\";\nimport axios from \"axios\";\nimport { Toast } from \"react-bootstrap\";\nimport Container from \"react-bootstrap/Container\";\nimport Question from \"./Question\";\nimport \"./CreateExam.scss\";\n\nconst { TabPane } = Tabs;\n\nexport default class CreateCourse extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  questionIDs = [];\n  newTabIndex = 0;\n  quesNo = 2;\n  totalMarks = 0;\n  totalTime = 0;\n\n  addQuestion = (id, marks, time) => {\n    this.setState({\n      showToast: true,\n      examCreateMessage: \"Question Created Successfully\",\n    });\n\n    console.log(\"mcq Question Id !\", id);\n    console.log(\"Mark !\", marks);\n    console.log(\"Time!\", time);\n\n    this.totalMarks += marks\n    this.totalTime += time;\n\n    if (this.props.examType === \"CQ\")\n      this.questionIDs.push({\n        cqQuestionId: id,\n      });\n    else {\n      this.questionIDs.push({\n        mcqQuestionId: id,\n      });\n    }\n\n    console.log(this.questionIDs);\n  };\n\n  createExam = (date, examName) => {\n    console.log(\"Date \", date);\n    console.log(\"Name \", examName);\n\n    let data;\n\n    if (this.props.examType === \"CQ\")\n      data = JSON.stringify({\n        course: this.props.courseData._id,\n        cqQuestions: this.questionIDs,\n        totalTime: this.totalTime,\n        totalMarks: this.totalMarks,\n        date: date,\n        name: examName,\n      });\n    else\n      data = JSON.stringify({\n        course: this.props.courseData._id,\n        mcqQuestions: this.questionIDs,\n        totalTime: this.totalTime,\n        totalMarks: this.totalMarks,\n        date: date,\n        name: examName,\n      });\n\n    axios({\n      method: \"POST\",\n      url: `teacher/exam/${this.props.examType === \"CQ\" ? \"cq\" : \"mcq\"}/create`,\n\n      headers: { \"Content-Type\": \"application/json\" },\n\n      data: data,\n    })\n      .then((response) => {\n        console.log(response.data);\n        if (response.data.status === \"OK\") {\n          this.setState({\n            showToast: true,\n            examCreateMessage: \"Exam Created Successfully\",\n          });\n        } else\n          this.setState({\n            showToast: true,\n            examCreateMessage: \"Exam Created Successfully\",\n          });\n      })\n      .catch((error) => {\n        console.log(error);\n        this.setState({\n          showToast: true,\n          examCreateMessage: \"Something Went Wrong!\",\n        });\n      });\n  };\n\n  initialPanes = [\n    {\n      title: \"Question 1\",\n      content: (\n        <Question\n          onAdd={this.addQuestion}\n          createExam={this.createExam}\n          totalMarks={this.totalMarks}\n          totalTime={this.totalTime}\n          examType={this.props.examType}\n        />\n      ),\n      key: \"1\",\n      closable: false,\n    },\n  ];\n\n  state = {\n    activeKey: this.initialPanes[0].key,\n    panes: this.initialPanes,\n    showToast: false,\n    examCreateMessage: null,\n    create: true,\n  };\n\n  onChange = (activeKey) => {\n    this.setState({ activeKey });\n  };\n\n  onEdit = (targetKey, action) => {\n    this[action](targetKey);\n  };\n\n  add = () => {\n    const { panes } = this.state;\n    const activeKey = `question${this.newTabIndex++}`;\n    const newPanes = [...panes];\n    newPanes.push({\n      title: `Question ${this.quesNo++}`,\n      content: (\n        <Question\n          onAdd={this.addQuestion}\n          createExam={this.createExam}\n          totalMarks={this.totalMarks}\n          totalTime={this.totalTime}\n          examType={this.props.examType}\n        />\n      ),\n      key: activeKey,\n    });\n    this.setState({\n      panes: newPanes,\n      activeKey,\n    });\n  };\n\n  remove = (targetKey) => {\n    const { panes, activeKey } = this.state;\n    let newActiveKey = activeKey;\n    let lastIndex;\n    panes.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const newPanes = panes.filter((pane) => pane.key !== targetKey);\n    if (newPanes.length && newActiveKey === targetKey) {\n      if (lastIndex >= 0) {\n        newActiveKey = newPanes[lastIndex].key;\n      } else {\n        newActiveKey = newPanes[0].key;\n      }\n    }\n    this.setState({\n      panes: newPanes,\n      activeKey: newActiveKey,\n    });\n  };\n\n  render() {\n    const { panes, activeKey } = this.state;\n    return (\n      <Container fluid className=\"justify-content-center\">\n        <Toast\n          autohide\n          className=\"toast-modify\"\n          onClose={() => this.setState({ showToast: false })}\n          show={this.state.showToast}\n        >\n          <Toast.Header>\n            <img\n              src=\"holder.js/20x20?text=%20\"\n              className=\"rounded mr-2\"\n              alt=\"\"\n            />\n            <strong className=\"mr-auto\">Create Message</strong>\n            <small>just now</small>\n          </Toast.Header>\n          <Toast.Body>{this.state.examCreateMessage}</Toast.Body>\n        </Toast>\n        <Tabs\n          type=\"editable-card\"\n          onChange={this.onChange}\n          activeKey={activeKey}\n          onEdit={this.onEdit}\n        >\n          {panes.map((pane) => (\n            <TabPane tab={pane.title} key={pane.key} closable={pane.closable}>\n              {pane.content}\n            </TabPane>\n          ))}\n        </Tabs>\n      </Container>\n    );\n  }\n}\n","/home/jspw/Documents/Projects/Paper/client/src/Components/Course/CreateExam/Question.js",["300"],"import React, { useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Forms from \"../../Generic/Forms\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\nimport { Toast } from \"react-bootstrap\";\nimport \"./CreateExam.scss\";\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    marginTop: theme.spacing(3),\n  },\n  leftTextField: {\n    marginTop: theme.spacing(6),\n  },\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    width: \"100%\",\n  },\n  button: {\n    marginTop: theme.spacing(10),\n    // backgroundColor: '#3F7CAC',\n  },\n}));\n\nconst leftStyles = makeStyles((theme) => ({\n  textField: {\n    marginTop: theme.spacing(3.5),\n  },\n  timeField: {\n    marginTop: theme.spacing(2.9),\n  },\n}));\n\nexport default function Question(props) {\n  const classes = useStyles();\n  const leftClasses = leftStyles();\n\n  let questionsCreated = 0;\n\n  const [values, setValues] = useState({\n    description: \"\",\n    question: null,\n    optA: null,\n    optB: null,\n    optC: null,\n    optD: null,\n    ans: null,\n    marks: null,\n    min: null,\n    sec: null,\n    date: Date.now(),\n    name: null,\n  });\n  const [open, setOpen] = React.useState(false);\n\n  const [questionEditDisable, setQuestionEditDisable] = useState(false);\n\n  const [showToast, setShowToast] = useState(false);\n\n  console.log(\"questionEditDisable\", questionEditDisable);\n\n  const handleLockExamClickOpen = () => {\n    console.log(props.totalMarks,props.totalTime)\n    if (\n      (values.question &&\n        values.optA &&\n        values.optB &&\n        values.optC &&\n        values.optD &&\n        values.ans &&\n        values.marks &&\n        values.min &&\n        values.sec) ||\n      (values.question && values.marks && values.min && values.sec)\n    ) {\n      setOpen(true);\n    } else {\n      setShowToast(true);\n    }\n  };\n\n  const handleDialogClose = () => {\n    setOpen(false);\n  };\n\n  const createExam = () => {\n    console.log(props.totalMarks,props.totalTime)\n    console.log(values.name);\n    if (values.name) {\n      props.createExam(values.date, values.name);\n      setOpen(false);\n    }\n  };\n\n  const handleChange = (prop) => (event) => {\n    console.log(\"Triggered\", event.target.value);\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleQuestionAdd = (id) => {\n    console.log(id, values.marks, values.min, values.sec);\n    props.onAdd(\n      id,\n\n      parseInt(values.marks, 10),\n      parseInt(values.min, 10) * 60 + parseInt(values.sec, 10)\n    );\n  };\n\n  function sendQuestion(e) {\n    e.preventDefault();\n\n    console.log(\"Form Values \", values);\n\n    axios({\n      method: \"POST\",\n      url: `teacher/question/${props.examType === \"CQ\" ? \"cq\" : \"mcq\"}/create`,\n\n      headers: { \"Content-Type\": \"application/json\" },\n      data: JSON.stringify({\n        description: values.description,\n        mainQuestion: values.question,\n        options: [\n          {\n            option: values.optA,\n          },\n          {\n            option: values.optB,\n          },\n          {\n            option: values.optC,\n          },\n          {\n            option: values.optD,\n          },\n        ],\n        correctAnswers: [\n          {\n            answer:\n              values.ans === \"A\"\n                ? values.optA\n                : values.ans === \"B\"\n                ? values.optB\n                : values.ans === \"C\"\n                ? values.optC\n                : values.optD,\n          },\n        ],\n        time: parseInt(values.min, 10) * 60 + parseInt(values.sec, 10),\n        marks: parseInt(values.marks, 10),\n      }),\n    })\n      .then((response) => {\n        console.log(response.data);\n        if (response.data.status === \"OK\") {\n          handleQuestionAdd(response.data.result.data._id);\n          setQuestionEditDisable(true);\n          questionsCreated++;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  const mcq = (\n    <Row>\n      <Col xs={12} lg={6}>\n        <Col lg={12}>\n          <Row className=\"justify-content-flex-start\">\n            <Col xs={12}>\n              <Forms\n                id=\"description\"\n                type=\"textField\"\n                label=\"Description\"\n                labelWidth={80}\n                values={values.description}\n                handleChange={handleChange}\n                rows={4}\n                classes={classes}\n              />\n            </Col>\n          </Row>\n          <Row className=\"justify-content-flex-start\">\n            <Col xs={12}>\n              <Forms\n                id=\"question\"\n                type=\"textField\"\n                label=\"Question\"\n                labelWidth={75}\n                values={values.question}\n                handleChange={handleChange}\n                required={true}\n                rows={3}\n                classes={classes}\n              />\n            </Col>\n          </Row>\n          <Row className=\"justify-content-flex-start\">\n            <Col xs={6}>\n              <Forms\n                id=\"optA\"\n                type=\"text\"\n                label=\"Option A\"\n                labelWidth={75}\n                values={values.optA}\n                handleChange={handleChange}\n                required={true}\n                classes={classes}\n              />\n            </Col>\n            <Col xs={6}>\n              <Forms\n                id=\"optB\"\n                type=\"text\"\n                label=\"Option B\"\n                labelWidth={75}\n                values={values.optB}\n                handleChange={handleChange}\n                required={true}\n                classes={classes}\n              />\n            </Col>\n          </Row>\n          <Row className=\"justify-content-flex-start\">\n            <Col xs={6}>\n              <Forms\n                id=\"optC\"\n                type=\"text\"\n                label=\"Option C\"\n                labelWidth={75}\n                values={values.optC}\n                handleChange={handleChange}\n                required={true}\n                classes={classes}\n              />\n            </Col>\n            <Col xs={6}>\n              <Forms\n                id=\"optD\"\n                type=\"text\"\n                label=\"Option D\"\n                labelWidth={75}\n                values={values.optD}\n                handleChange={handleChange}\n                required={true}\n                classes={classes}\n              />\n            </Col>\n          </Row>\n        </Col>\n      </Col>\n      <Col>\n        <Row className=\"justify-content-flex-start\">\n          <Col>\n            <FormControl\n              component=\"fieldset\"\n              className={classes.textField}\n              required\n            >\n              <FormLabel component=\"legend\">Select Correct Ans</FormLabel>\n              <RadioGroup\n                aria-label=\"ans\"\n                name=\"ans\"\n                value={values.ans}\n                onChange={handleChange(\"ans\")}\n              >\n                <FormControlLabel\n                  value=\"A\"\n                  control={<Radio color=\"primary\" />}\n                  label=\"A\"\n                />\n                <FormControlLabel\n                  value=\"B\"\n                  control={<Radio color=\"primary\" />}\n                  label=\"B\"\n                />\n                <FormControlLabel\n                  value=\"C\"\n                  control={<Radio color=\"primary\" />}\n                  label=\"C\"\n                />\n                <FormControlLabel\n                  value=\"D\"\n                  control={<Radio color=\"primary\" />}\n                  label=\"D\"\n                />\n              </RadioGroup>\n            </FormControl>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={4}>\n            <TextField\n              type=\"number\"\n              label=\"Marks\"\n              variant=\"outlined\"\n              value={values.marks}\n              onChange={handleChange(\"marks\")}\n              className={leftClasses.textField}\n              required\n            />\n          </Col>\n        </Row>\n        <Row className=\"justify-content-flex-start\">\n          <Col xs={4}>\n            <TextField\n              id=\"min\"\n              type=\"number\"\n              placeholder=\"00\"\n              label=\"Minutes\"\n              variant=\"outlined\"\n              value={values.min}\n              onChange={handleChange(\"min\")}\n              className={classes.textField}\n              required\n            />\n          </Col>\n          <Col xs={4}>\n            <TextField\n              id=\"sec\"\n              min=\"0\"\n              type=\"number\"\n              max=\"59\"\n              placeholder=\"00\"\n              label=\"Seconds\"\n              variant=\"outlined\"\n              value={values.sec}\n              onChange={handleChange(\"sec\")}\n              className={classes.textField}\n              required\n            />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n  const cq = (\n    <Row className=\"justify-content-center\">\n      <Col xs={12} lg={6}>\n        <Row>\n          <Col xs={12}>\n            <Forms\n              id=\"description\"\n              type=\"textField\"\n              label=\"Description\"\n              labelWidth={80}\n              values={values.description}\n              handleChange={handleChange}\n              rows={4}\n              classes={classes}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <Forms\n              id=\"question\"\n              type=\"textField\"\n              label=\"Question\"\n              labelWidth={75}\n              values={values.question}\n              handleChange={handleChange}\n              required={true}\n              rows={4}\n              classes={classes}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12} sm={12} md={4}>\n            <TextField\n              type=\"number\"\n              label=\"Marks\"\n              variant=\"outlined\"\n              value={values.marks}\n              onChange={handleChange(\"marks\")}\n              className={classes.textField}\n              required\n            />\n          </Col>\n          <Col xs={12} sm={6} md={4}>\n            <TextField\n              id=\"min\"\n              type=\"number\"\n              placeholder=\"00\"\n              label=\"Minutes\"\n              variant=\"outlined\"\n              value={values.min}\n              onChange={handleChange(\"min\")}\n              className={classes.textField}\n              required\n            />\n          </Col>\n          <Col xs={12} sm={6} md={4}>\n            <TextField\n              id=\"sec\"\n              min=\"0\"\n              type=\"number\"\n              max=\"59\"\n              placeholder=\"00\"\n              label=\"Seconds\"\n              variant=\"outlined\"\n              value={values.sec}\n              onChange={handleChange(\"sec\")}\n              className={classes.textField}\n              required\n            />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n  console.log(props.examType, \"exam type\");\n  return (\n    <Container fluid className=\"justify-content-flex-start\">\n      <Toast\n        className=\"toast-modify\"\n        autohide\n        onClose={() => setShowToast(false)}\n        show={showToast}\n      >\n        <Toast.Header>\n          <img src=\"holder.js/20x20?text=%20\" className=\"rounded mr-2\" alt=\"\" />\n          <strong className=\"mr-auto\">Alert Message</strong>\n          <small>just now</small>\n        </Toast.Header>\n        <Toast.Body>You Have To Create At Least One Question!</Toast.Body>\n      </Toast>\n      <Row className=\"justify-content-center\">\n        <Col xs=\"auto\">\n          <h3>Create Your Question Here</h3>\n        </Col>\n      </Row>\n      <form onSubmit={sendQuestion}>\n        {props.examType === \"CQ\" ? cq : mcq}\n        <Row className=\"justify-content-center\">\n          <ButtonGroup size=\"large\" color=\"primary\">\n            <Button\n              color=\"primary\"\n              className={classes.button}\n              startIcon={<EditIcon />}\n            >\n              Edit\n            </Button>\n            <Button\n              disabled={questionEditDisable}\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              startIcon={<SaveIcon />}\n              type=\"submit\"\n            >\n              Save\n            </Button>\n            <Button\n              color=\"primary\"\n              className={classes.button}\n              startIcon={<LockIcon />}\n              onClick={handleLockExamClickOpen}\n            >\n              Lock Exam\n            </Button>\n          </ButtonGroup>\n        </Row>\n      </form>\n      <Dialog\n        open={open}\n        onClose={handleDialogClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Create This Exam</DialogTitle>\n        <DialogContent>\n          <TextField\n            id=\"exam-name\"\n            type=\"text\"\n            label=\"Exam Name\"\n            value={values.name}\n            onChange={handleChange(\"name\")}\n            required={true}\n            classes={classes.textField}\n          />\n\n          <br />\n          <br />\n\n          <TextField\n            id=\"datetime-local\"\n            label=\"Schedule Exam\"\n            type=\"datetime-local\"\n            value={values.date}\n            onChange={handleChange(\"date\")}\n            defaultValue=\"2021-05-01T10:30\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n          <DialogContentText>\n            <br />\n            Total Marks: {props.totalMarks}\n            <br />\n            Total Time: {props.totalTime}\n            <br />\n            <br />\n            By clicking confirm this exam will be created as schedule.\n            <br />\n            <br />\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={createExam} color=\"primary\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}\n",{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","replacedBy":"304"},{"ruleId":"305","severity":1,"message":"306","line":4,"column":8,"nodeType":"307","messageId":"308","endLine":4,"endColumn":22},{"ruleId":"305","severity":1,"message":"309","line":11,"column":8,"nodeType":"307","messageId":"308","endLine":11,"endColumn":14},{"ruleId":"305","severity":1,"message":"310","line":32,"column":9,"nodeType":"307","messageId":"308","endLine":32,"endColumn":17},{"ruleId":"305","severity":1,"message":"311","line":36,"column":7,"nodeType":"307","messageId":"308","endLine":36,"endColumn":16},{"ruleId":"305","severity":1,"message":"312","line":60,"column":9,"nodeType":"307","messageId":"308","endLine":60,"endColumn":26},{"ruleId":"305","severity":1,"message":"313","line":3,"column":8,"nodeType":"307","messageId":"308","endLine":3,"endColumn":17},{"ruleId":"314","severity":1,"message":"315","line":27,"column":3,"nodeType":"316","messageId":"317","endLine":27,"endColumn":7},{"ruleId":"318","severity":1,"message":"319","line":40,"column":16,"nodeType":"320","endLine":40,"endColumn":44},{"ruleId":"305","severity":1,"message":"321","line":2,"column":17,"nodeType":"307","messageId":"308","endLine":2,"endColumn":23},{"ruleId":"318","severity":1,"message":"322","line":30,"column":6,"nodeType":"323","endLine":30,"endColumn":8,"suggestions":"324"},{"ruleId":"305","severity":1,"message":"321","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":23},{"ruleId":"305","severity":1,"message":"325","line":15,"column":3,"nodeType":"307","messageId":"308","endLine":15,"endColumn":7},{"ruleId":"305","severity":1,"message":"326","line":16,"column":3,"nodeType":"307","messageId":"308","endLine":16,"endColumn":11},{"ruleId":"305","severity":1,"message":"327","line":45,"column":9,"nodeType":"307","messageId":"308","endLine":45,"endColumn":16},{"ruleId":"318","severity":1,"message":"328","line":53,"column":6,"nodeType":"323","endLine":53,"endColumn":8,"suggestions":"329"},{"ruleId":"330","severity":1,"message":"331","line":40,"column":35,"nodeType":"332","messageId":"333","endLine":40,"endColumn":37},{"ruleId":"330","severity":1,"message":"331","line":42,"column":40,"nodeType":"332","messageId":"333","endLine":42,"endColumn":42},{"ruleId":"334","severity":1,"message":"335","line":44,"column":29,"nodeType":"336","messageId":"317","endLine":44,"endColumn":31},{"ruleId":"330","severity":1,"message":"331","line":49,"column":41,"nodeType":"332","messageId":"333","endLine":49,"endColumn":43},{"ruleId":"334","severity":1,"message":"335","line":51,"column":29,"nodeType":"336","messageId":"317","endLine":51,"endColumn":31},{"ruleId":"305","severity":1,"message":"321","line":1,"column":38,"nodeType":"307","messageId":"308","endLine":1,"endColumn":44},{"ruleId":"305","severity":1,"message":"337","line":2,"column":10,"nodeType":"307","messageId":"308","endLine":2,"endColumn":14},{"ruleId":"305","severity":1,"message":"338","line":3,"column":8,"nodeType":"307","messageId":"308","endLine":3,"endColumn":14},{"ruleId":"305","severity":1,"message":"339","line":4,"column":8,"nodeType":"307","messageId":"308","endLine":4,"endColumn":11},{"ruleId":"305","severity":1,"message":"340","line":5,"column":8,"nodeType":"307","messageId":"308","endLine":5,"endColumn":18},{"ruleId":"305","severity":1,"message":"341","line":6,"column":8,"nodeType":"307","messageId":"308","endLine":6,"endColumn":13},{"ruleId":"305","severity":1,"message":"326","line":7,"column":8,"nodeType":"307","messageId":"308","endLine":7,"endColumn":16},{"ruleId":"305","severity":1,"message":"325","line":8,"column":8,"nodeType":"307","messageId":"308","endLine":8,"endColumn":12},{"ruleId":"305","severity":1,"message":"342","line":9,"column":10,"nodeType":"307","messageId":"308","endLine":9,"endColumn":19},{"ruleId":"305","severity":1,"message":"343","line":10,"column":10,"nodeType":"307","messageId":"308","endLine":10,"endColumn":16},{"ruleId":"305","severity":1,"message":"344","line":11,"column":10,"nodeType":"307","messageId":"308","endLine":11,"endColumn":20},{"ruleId":"305","severity":1,"message":"345","line":12,"column":10,"nodeType":"307","messageId":"308","endLine":12,"endColumn":17},{"ruleId":"305","severity":1,"message":"346","line":15,"column":10,"nodeType":"307","messageId":"308","endLine":15,"endColumn":18},{"ruleId":"305","severity":1,"message":"347","line":16,"column":8,"nodeType":"307","messageId":"308","endLine":16,"endColumn":13},{"ruleId":"305","severity":1,"message":"348","line":25,"column":15,"nodeType":"307","messageId":"308","endLine":25,"endColumn":21},{"ruleId":"330","severity":1,"message":"349","line":88,"column":42,"nodeType":"332","messageId":"350","endLine":88,"endColumn":44},{"ruleId":"305","severity":1,"message":"351","line":14,"column":8,"nodeType":"307","messageId":"308","endLine":14,"endColumn":13},{"ruleId":"305","severity":1,"message":"352","line":18,"column":8,"nodeType":"307","messageId":"308","endLine":18,"endColumn":12},{"ruleId":"305","severity":1,"message":"353","line":20,"column":8,"nodeType":"307","messageId":"308","endLine":20,"endColumn":22},{"ruleId":"305","severity":1,"message":"327","line":34,"column":9,"nodeType":"307","messageId":"308","endLine":34,"endColumn":16},{"ruleId":"305","severity":1,"message":"354","line":45,"column":10,"nodeType":"307","messageId":"308","endLine":45,"endColumn":18},{"ruleId":"305","severity":1,"message":"355","line":45,"column":20,"nodeType":"307","messageId":"308","endLine":45,"endColumn":31},{"ruleId":"305","severity":1,"message":"311","line":49,"column":7,"nodeType":"307","messageId":"308","endLine":49,"endColumn":16},{"ruleId":"318","severity":1,"message":"319","line":68,"column":16,"nodeType":"320","endLine":68,"endColumn":44},{"ruleId":"318","severity":1,"message":"356","line":118,"column":6,"nodeType":"323","endLine":118,"endColumn":8,"suggestions":"357"},{"ruleId":"358","severity":1,"message":"359","line":193,"column":43,"nodeType":"360","endLine":193,"endColumn":66},{"ruleId":"305","severity":1,"message":"361","line":198,"column":7,"nodeType":"307","messageId":"308","endLine":198,"endColumn":8},{"ruleId":"330","severity":1,"message":"349","line":200,"column":42,"nodeType":"332","messageId":"350","endLine":200,"endColumn":44},{"ruleId":"334","severity":1,"message":"335","line":288,"column":32,"nodeType":"336","messageId":"317","endLine":288,"endColumn":34},{"ruleId":"358","severity":1,"message":"359","line":351,"column":15,"nodeType":"360","endLine":351,"endColumn":36},{"ruleId":"314","severity":1,"message":"315","line":28,"column":3,"nodeType":"316","messageId":"317","endLine":28,"endColumn":7},{"ruleId":"362","severity":1,"message":"363","line":122,"column":30,"nodeType":"364","messageId":"365","endLine":122,"endColumn":52,"fix":"366"},{"ruleId":"362","severity":1,"message":"363","line":124,"column":30,"nodeType":"364","messageId":"365","endLine":124,"endColumn":43,"fix":"367"},{"ruleId":"305","severity":1,"message":"368","line":4,"column":3,"nodeType":"307","messageId":"308","endLine":4,"endColumn":9},{"ruleId":"305","severity":1,"message":"369","line":8,"column":3,"nodeType":"307","messageId":"308","endLine":8,"endColumn":8},{"ruleId":"305","severity":1,"message":"345","line":10,"column":3,"nodeType":"307","messageId":"308","endLine":10,"endColumn":10},{"ruleId":"305","severity":1,"message":"313","line":13,"column":3,"nodeType":"307","messageId":"308","endLine":13,"endColumn":12},{"ruleId":"305","severity":1,"message":"370","line":16,"column":3,"nodeType":"307","messageId":"308","endLine":16,"endColumn":15},{"ruleId":"305","severity":1,"message":"371","line":18,"column":3,"nodeType":"307","messageId":"308","endLine":18,"endColumn":13},{"ruleId":"305","severity":1,"message":"372","line":19,"column":3,"nodeType":"307","messageId":"308","endLine":19,"endColumn":10},{"ruleId":"305","severity":1,"message":"373","line":31,"column":8,"nodeType":"307","messageId":"308","endLine":31,"endColumn":24},{"ruleId":"334","severity":1,"message":"335","line":92,"column":34,"nodeType":"336","messageId":"317","endLine":92,"endColumn":36},{"ruleId":"334","severity":1,"message":"335","line":117,"column":34,"nodeType":"336","messageId":"317","endLine":117,"endColumn":36},{"ruleId":"318","severity":1,"message":"374","line":133,"column":6,"nodeType":"323","endLine":133,"endColumn":8,"suggestions":"375"},{"ruleId":"305","severity":1,"message":"376","line":11,"column":8,"nodeType":"307","messageId":"308","endLine":11,"endColumn":17},{"ruleId":"305","severity":1,"message":"377","line":12,"column":10,"nodeType":"307","messageId":"308","endLine":12,"endColumn":20},{"ruleId":"305","severity":1,"message":"373","line":15,"column":8,"nodeType":"307","messageId":"308","endLine":15,"endColumn":24},{"ruleId":"305","severity":1,"message":"378","line":48,"column":25,"nodeType":"307","messageId":"308","endLine":48,"endColumn":33},{"ruleId":"305","severity":1,"message":"379","line":64,"column":9,"nodeType":"307","messageId":"308","endLine":64,"endColumn":17},{"ruleId":"334","severity":1,"message":"335","line":71,"column":34,"nodeType":"336","messageId":"317","endLine":71,"endColumn":36},{"ruleId":"318","severity":1,"message":"322","line":87,"column":6,"nodeType":"323","endLine":87,"endColumn":8,"suggestions":"380"},{"ruleId":"305","severity":1,"message":"381","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":36},{"ruleId":"305","severity":1,"message":"382","line":2,"column":26,"nodeType":"307","messageId":"308","endLine":2,"endColumn":35},{"ruleId":"314","severity":1,"message":"315","line":45,"column":3,"nodeType":"316","messageId":"317","endLine":45,"endColumn":7},{"ruleId":"305","severity":1,"message":"383","line":64,"column":10,"nodeType":"307","messageId":"308","endLine":64,"endColumn":22},{"ruleId":"305","severity":1,"message":"384","line":64,"column":24,"nodeType":"307","messageId":"308","endLine":64,"endColumn":39},{"ruleId":"305","severity":1,"message":"385","line":99,"column":7,"nodeType":"307","messageId":"308","endLine":99,"endColumn":11},{"ruleId":"305","severity":1,"message":"386","line":117,"column":10,"nodeType":"307","messageId":"308","endLine":117,"endColumn":23},{"ruleId":"305","severity":1,"message":"387","line":117,"column":25,"nodeType":"307","messageId":"308","endLine":117,"endColumn":41},{"ruleId":"305","severity":1,"message":"388","line":119,"column":10,"nodeType":"307","messageId":"308","endLine":119,"endColumn":21},{"ruleId":"389","severity":1,"message":"390","line":230,"column":22,"nodeType":"336","messageId":"391","endLine":230,"endColumn":23},{"ruleId":"389","severity":1,"message":"390","line":232,"column":22,"nodeType":"336","messageId":"391","endLine":232,"endColumn":23},{"ruleId":"389","severity":1,"message":"390","line":244,"column":22,"nodeType":"336","messageId":"391","endLine":244,"endColumn":23},{"ruleId":"389","severity":1,"message":"390","line":246,"column":22,"nodeType":"336","messageId":"391","endLine":246,"endColumn":23},{"ruleId":"389","severity":1,"message":"390","line":277,"column":22,"nodeType":"336","messageId":"391","endLine":277,"endColumn":23},{"ruleId":"389","severity":1,"message":"390","line":279,"column":22,"nodeType":"336","messageId":"391","endLine":279,"endColumn":23},{"ruleId":"389","severity":1,"message":"390","line":291,"column":22,"nodeType":"336","messageId":"391","endLine":291,"endColumn":23},{"ruleId":"389","severity":1,"message":"390","line":293,"column":22,"nodeType":"336","messageId":"391","endLine":293,"endColumn":23},{"ruleId":"305","severity":1,"message":"392","line":311,"column":11,"nodeType":"307","messageId":"308","endLine":311,"endColumn":24},{"ruleId":"330","severity":1,"message":"349","line":364,"column":51,"nodeType":"332","messageId":"350","endLine":364,"endColumn":53},{"ruleId":"334","severity":1,"message":"393","line":365,"column":15,"nodeType":"336","messageId":"317","endLine":365,"endColumn":17},{"ruleId":"305","severity":1,"message":"394","line":10,"column":8,"nodeType":"307","messageId":"308","endLine":10,"endColumn":25},{"ruleId":"305","severity":1,"message":"395","line":19,"column":10,"nodeType":"307","messageId":"308","endLine":19,"endColumn":24},{"ruleId":"305","severity":1,"message":"327","line":41,"column":9,"nodeType":"307","messageId":"308","endLine":41,"endColumn":16},{"ruleId":"305","severity":1,"message":"396","line":53,"column":25,"nodeType":"307","messageId":"308","endLine":53,"endColumn":42},{"ruleId":"318","severity":1,"message":"397","line":116,"column":6,"nodeType":"323","endLine":116,"endColumn":8,"suggestions":"398"},{"ruleId":"399","severity":1,"message":"400","line":451,"column":23,"nodeType":"401","endLine":451,"endColumn":55},{"ruleId":"305","severity":1,"message":"381","line":1,"column":27,"nodeType":"307","messageId":"308","endLine":1,"endColumn":36},{"ruleId":"305","severity":1,"message":"402","line":33,"column":10,"nodeType":"307","messageId":"308","endLine":33,"endColumn":15},{"ruleId":"305","severity":1,"message":"403","line":35,"column":9,"nodeType":"307","messageId":"308","endLine":35,"endColumn":21},{"ruleId":"334","severity":1,"message":"335","line":44,"column":20,"nodeType":"336","messageId":"317","endLine":44,"endColumn":22},{"ruleId":"334","severity":1,"message":"335","line":81,"column":20,"nodeType":"336","messageId":"317","endLine":81,"endColumn":22},{"ruleId":"305","severity":1,"message":"404","line":97,"column":10,"nodeType":"307","messageId":"308","endLine":97,"endColumn":21},{"ruleId":"305","severity":1,"message":"405","line":2,"column":27,"nodeType":"307","messageId":"308","endLine":2,"endColumn":33},{"ruleId":"318","severity":1,"message":"406","line":42,"column":30,"nodeType":"307","endLine":42,"endColumn":37},{"ruleId":"334","severity":1,"message":"335","line":46,"column":17,"nodeType":"336","messageId":"317","endLine":46,"endColumn":19},{"ruleId":"334","severity":1,"message":"335","line":46,"column":36,"nodeType":"336","messageId":"317","endLine":46,"endColumn":38},{"ruleId":"334","severity":1,"message":"335","line":46,"column":57,"nodeType":"336","messageId":"317","endLine":46,"endColumn":59},{"ruleId":"334","severity":1,"message":"335","line":46,"column":78,"nodeType":"336","messageId":"317","endLine":46,"endColumn":80},{"ruleId":"305","severity":1,"message":"368","line":7,"column":3,"nodeType":"307","messageId":"308","endLine":7,"endColumn":9},{"ruleId":"305","severity":1,"message":"369","line":8,"column":3,"nodeType":"307","messageId":"308","endLine":8,"endColumn":8},{"ruleId":"305","severity":1,"message":"345","line":10,"column":3,"nodeType":"307","messageId":"308","endLine":10,"endColumn":10},{"ruleId":"305","severity":1,"message":"313","line":11,"column":3,"nodeType":"307","messageId":"308","endLine":11,"endColumn":12},{"ruleId":"305","severity":1,"message":"407","line":12,"column":3,"nodeType":"307","messageId":"308","endLine":12,"endColumn":6},{"ruleId":"305","severity":1,"message":"370","line":13,"column":3,"nodeType":"307","messageId":"308","endLine":13,"endColumn":15},{"ruleId":"305","severity":1,"message":"408","line":14,"column":3,"nodeType":"307","messageId":"308","endLine":14,"endColumn":12},{"ruleId":"305","severity":1,"message":"371","line":15,"column":3,"nodeType":"307","messageId":"308","endLine":15,"endColumn":13},{"ruleId":"305","severity":1,"message":"372","line":16,"column":3,"nodeType":"307","messageId":"308","endLine":16,"endColumn":10},{"ruleId":"409","severity":1,"message":"410","line":6,"column":1,"nodeType":"411","endLine":41,"endColumn":2},{"ruleId":"409","severity":1,"message":"410","line":6,"column":1,"nodeType":"411","endLine":41,"endColumn":2},{"ruleId":"389","severity":1,"message":"390","line":26,"column":18,"nodeType":"336","messageId":"391","endLine":26,"endColumn":19},{"ruleId":"389","severity":1,"message":"390","line":28,"column":18,"nodeType":"336","messageId":"391","endLine":28,"endColumn":19},{"ruleId":"389","severity":1,"message":"390","line":42,"column":18,"nodeType":"336","messageId":"391","endLine":42,"endColumn":19},{"ruleId":"389","severity":1,"message":"390","line":44,"column":18,"nodeType":"336","messageId":"391","endLine":44,"endColumn":19},{"ruleId":"389","severity":1,"message":"390","line":67,"column":18,"nodeType":"336","messageId":"391","endLine":67,"endColumn":19},{"ruleId":"389","severity":1,"message":"390","line":69,"column":18,"nodeType":"336","messageId":"391","endLine":69,"endColumn":19},{"ruleId":"389","severity":1,"message":"390","line":83,"column":18,"nodeType":"336","messageId":"391","endLine":83,"endColumn":19},{"ruleId":"389","severity":1,"message":"390","line":85,"column":18,"nodeType":"336","messageId":"391","endLine":85,"endColumn":19},{"ruleId":"305","severity":1,"message":"412","line":2,"column":10,"nodeType":"307","messageId":"308","endLine":2,"endColumn":13},{"ruleId":"305","severity":1,"message":"413","line":2,"column":15,"nodeType":"307","messageId":"308","endLine":2,"endColumn":24},{"ruleId":"305","severity":1,"message":"414","line":2,"column":26,"nodeType":"307","messageId":"308","endLine":2,"endColumn":29},{"ruleId":"305","severity":1,"message":"415","line":2,"column":31,"nodeType":"307","messageId":"308","endLine":2,"endColumn":35},{"ruleId":"305","severity":1,"message":"347","line":2,"column":37,"nodeType":"307","messageId":"308","endLine":2,"endColumn":42},{"ruleId":"305","severity":1,"message":"416","line":2,"column":44,"nodeType":"307","messageId":"308","endLine":2,"endColumn":49},{"ruleId":"305","severity":1,"message":"326","line":3,"column":8,"nodeType":"307","messageId":"308","endLine":3,"endColumn":16},{"ruleId":"305","severity":1,"message":"417","line":4,"column":10,"nodeType":"307","messageId":"308","endLine":4,"endColumn":13},{"ruleId":"305","severity":1,"message":"418","line":4,"column":15,"nodeType":"307","messageId":"308","endLine":4,"endColumn":26},{"ruleId":"305","severity":1,"message":"419","line":4,"column":28,"nodeType":"307","messageId":"308","endLine":4,"endColumn":36},{"ruleId":"305","severity":1,"message":"420","line":4,"column":38,"nodeType":"307","messageId":"308","endLine":4,"endColumn":48},{"ruleId":"305","severity":1,"message":"369","line":8,"column":3,"nodeType":"307","messageId":"308","endLine":8,"endColumn":8},{"ruleId":"305","severity":1,"message":"421","line":9,"column":3,"nodeType":"307","messageId":"308","endLine":9,"endColumn":7},{"ruleId":"305","severity":1,"message":"345","line":10,"column":3,"nodeType":"307","messageId":"308","endLine":10,"endColumn":10},{"ruleId":"305","severity":1,"message":"313","line":11,"column":3,"nodeType":"307","messageId":"308","endLine":11,"endColumn":12},{"ruleId":"305","severity":1,"message":"407","line":12,"column":3,"nodeType":"307","messageId":"308","endLine":12,"endColumn":6},{"ruleId":"305","severity":1,"message":"370","line":13,"column":3,"nodeType":"307","messageId":"308","endLine":13,"endColumn":15},{"ruleId":"305","severity":1,"message":"408","line":14,"column":3,"nodeType":"307","messageId":"308","endLine":14,"endColumn":12},{"ruleId":"305","severity":1,"message":"371","line":15,"column":3,"nodeType":"307","messageId":"308","endLine":15,"endColumn":13},{"ruleId":"305","severity":1,"message":"372","line":16,"column":3,"nodeType":"307","messageId":"308","endLine":16,"endColumn":10},{"ruleId":"422","severity":1,"message":"423","line":13,"column":3,"nodeType":"424","messageId":"425","endLine":15,"endColumn":4},{"ruleId":"305","severity":1,"message":"426","line":178,"column":11,"nodeType":"307","messageId":"308","endLine":178,"endColumn":27},"no-native-reassign",["427"],"no-negated-in-lhs",["428"],"no-unused-vars","'socketIOClient' is defined but never used.","Identifier","unusedVar","'Layout' is defined but never used.","'ENDPOINT' is assigned a value but never used.","'socketRef' is assigned a value but never used.","'createCourseModal' is assigned a value but never used.","'Jumbotron' is defined but never used.","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","Assignments to the 'userdata' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["429"],"'Menu' is defined but never used.","'MenuItem' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'props.userInfo'. Either include them or remove the dependency array.",["430"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Link' is defined but never used.","'Navbar' is defined but never used.","'Nav' is defined but never used.","'IconButton' is defined but never used.","'Badge' is defined but never used.","'FaUserAlt' is defined but never used.","'FaBell' is defined but never used.","'useHistory' is defined but never used.","'Spinner' is defined but never used.","'Snackbar' is defined but never used.","'Alert' is defined but never used.","'socket' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Paper' is defined but never used.","'Icon' is defined but never used.","'AddRoundedIcon' is defined but never used.","'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userdata'. Either include it or remove the dependency array.",["431"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'x' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"error\"] found.","Property","unnecessarilyComputedProperty",{"range":"432","text":"433"},{"range":"434","text":"433"},"'Button' is defined but never used.","'Modal' is defined but never used.","'TabContainer' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'CircularProgress' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'role'. Either include them or remove the dependency array.",["435"],"'MarkSheet' is defined but never used.","'makeStyles' is defined but never used.","'userdata' is assigned a value but never used.","'examType' is assigned a value but never used.",["436"],"'useEffect' is defined but never used.","'TextField' is defined but never used.","'snackbarOpen' is assigned a value but never used.","'setSnackbarOpen' is assigned a value but never used.","'days' is assigned a value but never used.","'timerDeadline' is assigned a value but never used.","'setTimerDeadLine' is assigned a value but never used.","'snackbarMsg' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'reloadHandler' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'DialogContentText' is defined but never used.","'LinearProgress' is defined but never used.","'setStudentAnswers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'questionIndex', and 'submitAnswers'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSeconds' needs the current value of 'questionIndex'.",["437"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'value' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'isApiLoaded' is assigned a value but never used.","'Router' is defined but never used.","The ref value 'interval.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'interval.current' to a variable inside the effect, and use that variable in the cleanup function.","'Tab' is defined but never used.","'ListGroup' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Col' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Card' is defined but never used.","'Table' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'MenuList' is defined but never used.","'Typography' is defined but never used.","'Form' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'questionsCreated' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},[2973,2982],"\"error\"",[3040,3049],{"desc":"444","fix":"445"},{"desc":"438","fix":"446"},{"desc":"447","fix":"448"},"Update the dependencies array to be: [id]",{"range":"449","text":"450"},"Update the dependencies array to be: [id, props.userInfo]",{"range":"451","text":"452"},"Update the dependencies array to be: [userdata]",{"range":"453","text":"454"},"Update the dependencies array to be: [id, role]",{"range":"455","text":"456"},{"range":"457","text":"450"},"Update the dependencies array to be: [id, questionIndex, submitAnswers]",{"range":"458","text":"459"},[821,823],"[id]",[1038,1040],"[id, props.userInfo]",[3533,3535],"[userdata]",[3051,3053],"[id, role]",[2051,2053],[3635,3637],"[id, questionIndex, submitAnswers]"]